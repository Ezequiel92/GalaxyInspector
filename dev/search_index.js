var documenterSearchIndex = {"docs":
[{"location":"api/pipelines/#Pipelines","page":"Pipelines","title":"Pipelines","text":"","category":"section"},{"location":"api/pipelines/","page":"Pipelines","title":"Pipelines","text":"These functions construct a plotting pipeline, from reading the data to generating the figures and animations.","category":"page"},{"location":"api/pipelines/","page":"Pipelines","title":"Pipelines","text":"They have many optional arguments allowing to configure most aspects of the plots.","category":"page"},{"location":"api/pipelines/","page":"Pipelines","title":"Pipelines","text":"All these functions are exported.","category":"page"},{"location":"api/pipelines/","page":"Pipelines","title":"Pipelines","text":"","category":"page"},{"location":"api/pipelines/","page":"Pipelines","title":"Pipelines","text":"Modules = [GalaxyInspector]\nPages   = [\"pipelines.jl\"]","category":"page"},{"location":"api/pipelines/#GalaxyInspector.snapshotPlot-Tuple{Vector{String}, Dict{Symbol, Vector{String}}, Vector{<:Function}}","page":"Pipelines","title":"GalaxyInspector.snapshotPlot","text":"snapshotPlot(\n    simulation_paths::Vector{String},\n    request::Dict{Symbol,Vector{String}},\n    plot_functions::Vector{<:Function};\n    <keyword arguments>\n)::Nothing\n\nGenerate one figure per snapshot, for one or more simulations.\n\nSome of the features are:\n\nIt can produce scatter plots, line plots, histograms, and heatmaps.\nIt can generate an animation of the results.\nIt transparently manages units; you only have to indicate the final unit of each axis.\n\nnote: Note\nThe snapshots of different simulations are grouped by the number in the file names, regardless of the \"Time\" parameter in the header. The data from the longest running simulation is used for the time stamp in the automatic title.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nrequest::Dict{Symbol,Vector{String}}: Dictionary with the shape cell/particle type -> [block, block, ...], where the possible types are the keys of PARTICLE_INDEX, and the possible quantities are the keys of QUANTITIES. Which data blocks are needed depends on the provided functions da_functions.\nplot_functions::Vector{<:Function}: Vector of plotting functions from Makie. This sets the type of plot for each simulation. The supported functions are:\nscatter!      -> Scatter plot.\nlines!        -> Line plot.\nscatterlines! -> Scatter plot with lines between the markers.\nhist!         -> Histogram.\nheatmap!      -> Heatmap.\narrows!       -> Vector field.\npf_kwargs::Vector{<:NamedTuple}=[(;)]: Vector of keyword arguments for the functions in plot_functions.\n\nsnapshotPlot configuration\n\noutput_path::String=\"./plots\": Path to the output folder.\nbase_filename::String=\"snapshot\": Every file will be named base_filename-XXXoutput_format where XXX is the snapshot number.\noutput_format::String=\".png\": File format for the figure. All formats supported by Makie can be used, namely .pdf, .svg and .png.\nwarnings::Bool=true: If a warning will be raised when there is some problem, but the function can still run using sane defaults.\nshow_progress::Bool=true: If a progress bar will be shown.\n\nData manipulation options\n\nslice::IndexType=(:): Slice of the simulation, i.e. which snapshots will be read. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). It works over the longest possible list of snapshots among the simulations (grouped by the number in the file names). Out of bounds indices are ignored.\nfilter_function::Function=filterNothing: A functions with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\nda_functions::Vector{<:Function}=[getNothing]: Vector of data analysis functions. See the required signature and examples in ./src/data_analysis.jl.\nda_args::Vector{<:Tuple}=[()]: Vector of positional arguments for the data analysis functions.\nda_kwargs::Vector{<:NamedTuple}=[(;)]: Vector of keyword arguments for the data analysis functions.\npost_processing::Function=getNothing: Post processing function. See the required signature and examples in ./src/post_processing.jl.\npp_args::Tuple=(): Positional arguments for the post processing function.\npp_kwargs::NamedTuple=(;): Keyword arguments for the post processing function.\ntransform_box::Bool=false: If a translation and rotation (in that order) will be applied to the simulation box, affecting the positions and velocities of all the cells and particles. If active, it is applied AFTER the filter_function.\ntranslation::Union{Symbol,NTuple{2,Int}}=:zero: Type of translation (only relevant if transform_box = true). The options are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Sets the center of mass of the whole system (after filtering) as the new origin.\n:stellar_cm                 -> Sets the stellar center of mass (after filtering) as the new origin.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo, as the new origin.\nrotation::Symbol=:zero: Type of rotation (only relevant if transform_box = true). The options are:\n:zero               -> No rotation is appplied.\n:global_am          -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am         -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa         -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\nsmooth::Int=0: The result of da_functions will be smooth out using smooth bins. Set it to 0 if you want no smoothing. Only valid for scatter!, lines!, and scatterlines! plots.\nx_unit::Unitful.Units=Unitful.NoUnits: Target unit for the x axis. The values will be converted accordingly. Use the default value of Unitful.NoUnits for dimensionless quantities.\ny_unit::Unitful.Units=Unitful.NoUnits: Target unit for the y axis. The values will be converted accordingly. Use the default value of Unitful.NoUnits for dimensionless quantities.\nx_exp_factor::Int=0: Numerical exponent to scale down the x axis, e.g. if x_exp_factor = 10 the values will be divided by 10^10. The default is no scaling.\ny_exp_factor::Int=0: Numerical exponent to scale down the y axis, e.g. if y_exp_factor = 10 the values will be divided by 10^10. The default is no scaling.\nx_trim::NTuple{2,<:Real}=(-Inf, Inf): The data will be trim down so the x coordinates fit within x_trim, in the units given by x_unit.\ny_trim::NTuple{2,<:Real}=(-Inf, Inf): The data will be trim down so the y coordinates fit within y_trim, in the units given by y_unit. This option does not affect histograms.\nx_edges::Bool=false: Set it to true if you want to keep the borders of x_trim.\ny_edges::Bool=false: Set it to true if you want to keep the borders of y_trim.\nx_func::Function=identity: Function to be applied to the values of the x axis. It must be a pure function with the signature x_func(x_values::Vector{Float64})::Vector{Float64}. The output must have the same length as the input. This function will be applied regardless of units and possible domain problems (use x_trim to solve incompatibilities), and that it will not be reflected in the automatic labeling.\ny_func::Function=identity: Function to be applied to the values of the y axis. It must be a pure function with the signature y_func(y_values::Vector{Float64})::Vector{Float64}. The output must have the same length as the input. This function will be applied regardless of units and possible domain problems (use y_trim to solve incompatibilities), and that it will not be reflected in the automatic labeling.\n\nAxes options\n\nxaxis_label::AbstractString=\"auto_label\": Label for the x axis. It can contain the string auto_label, which will be replaced by: xaxis_var_name [10^x_exp_factor x_unit]. If a LaTeXString with auto_label inside is used, it is recommended that each section arround auto_label is delimited with a $ pair, i.e. L\"some text auto_label more text\".\nyaxis_label::AbstractString=\"auto_label\": Label for the y axis. It can contain the string auto_label, which will be replaced by: yaxis_var_name [10^y_exp_factor y_unit]. If a LaTeXString with auto_label inside is used, it is recommended that each section arround auto_label is delimited with a $ pair, i.e. L\"some text auto_label more text\".\nxaxis_var_name::AbstractString=\"\": Name of the variable for the x axis.\nyaxis_var_name::AbstractString=\"\": Name of the variable for the y axis.\nxaxis_scale_func::Function=identity: Scaling function for the x axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nyaxis_scale_func::Function=identity: Scaling function for the y axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\n\nPlotting options\n\nsave_figures::Bool=true: If every figure will be saved as an image.\nbackup_results::Bool=false: If the values to be plotted will be backup in a JLD2 file.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\nsize::NTuple{2,Int}=(1000, 1000): Size of the figures in points. For PDFs and SVGs, 1 point = 0.1 mm. For PNGs, when strech assuming 1 point = 0.1 mm, one will get a dpi of 600 (23.622 px/mm).\nsim_labels::Union{Vector{String},Nothing}=nothing: Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntitle::Union{Symbol,<:AbstractString}=\"\": Title for the figure. If left empty, no title is printed. It can also be set to one of the following options:\n:physical_time -> Physical time since the Big Bang.\n:lookback_time -> Physical time left to reach the last snapshot.\n:scale_factor  -> Scale factor (only relevant for cosmological simulations).\n:redshift      -> Redshift (only relevant for cosmological simulations).\ncolorbar::Bool=false: If a colorbar will be added to heatmaps. Only relevant for when plot_functions is heatmap!.\nseries_colors::Union{Vector{<:ColorType},Nothing}=nothing: Colors for the different simulations. If set to nothing, the colors will be assigned automatically. This is only relevant for scatter!, scatterlines!, and lines! plots.\nseries_markers::Union{Vector{Symbol},Nothing}=nothing: Markers for the different simulations. If set to nothing, the markers will be assigned automatically. This is only relevant for scatter! and scatterlines! plots.\nseries_linestyles::Union{Vector{<:LineStyleType},Nothing}=nothing: Line styles for the different simulations. If set to nothing, the line styles will be assigned automatically. This is only relevant for lines! and scatterlines! plots.\n\nAnimation options\n\nanimation::Bool=false: If an animation will be created.\nanimation_filename::String=\"animation.mp4\": Filename for the animation, including its extension. All formats supported by Makie can be used, namely .mkv, .mp4, .webm and .gif.\nframerate::Int=15: Frame rate of the animation.\n\n\n\n\n\n","category":"method"},{"location":"api/pipelines/#GalaxyInspector.timeSeriesPlot-Tuple{Vector{String}, Vector{<:Function}}","page":"Pipelines","title":"GalaxyInspector.timeSeriesPlot","text":"timeSeriesPlot(\n    simulation_paths::Vector{String},\n    plot_functions::Vector{<:Function};\n    <keyword arguments>\n)::Tuple{Makie.Axis,Figure}\n\nGenerate one figure per simulation.\n\nSome of the features are:\n\nIt can produce scatter and line plots.\nIt transparently manages units; you only have to indicate the final unit of each axis.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nplot_functions::Vector{<:Function}: Vector of plotting functions from Makie. This sets the type of plot for each simulation. The supported functions are:\nscatter!      -> Scatter plot.\nlines!        -> Line plot.\nscatterlines! -> Scatter plot with lines between the markers.\npf_kwargs::Vector{<:NamedTuple}=[(;)]: Vector of keyword arguments for the functions in plot_functions.\n\ntimeSeriesPlot configuration\n\noutput_path::String=\"./plots\": Path to the output folder.\nfilename::String=\"time_series\": Filename for the figure, without the extension.\noutput_format::String=\".png\": File format for the figure. All formats supported by Makie can be used, namely .pdf, .svg and .png.\nwarnings::Bool=true: If a warning will be raised when there is some problem, but the function can still run using sane defaults.\nshow_progress::Bool=true: If a progress bar will be shown.\n\nData manipulation options\n\nslice::IndexType=(:): Slice of the simulation, i.e. which snapshots will be read. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). It works over the longest possible list of snapshots among the simulations (grouped by the number in the file names). Out of bounds indices are ignored.\nda_functions::Vector{<:Function}=[getNothing]: Vector of data analysis functions. See the required signature and examples in ./src/data_analysis.jl.\nda_args::Vector{<:Tuple}=[()]: Vector of positional arguments for the data analysis functions.\nda_kwargs::Vector{<:NamedTuple}=[(;)]: Vector of keyword arguments for the data analysis functions.\npost_processing::Function=getNothing: Post processing function. See the required signature and examples in ./src/post_processing.jl.\npp_args::Tuple=(): Positional arguments for the post processing function.\npp_kwargs::NamedTuple=(;): Keyword arguments for the post processing function.\nx_unit::Unitful.Units=Unitful.NoUnits: Target unit for the x axis. The values will be converted accordingly. Use the default value of Unitful.NoUnits for dimensionless quantities.\ny_unit::Unitful.Units=Unitful.NoUnits: Target unit for the y axis. The values will be converted accordingly. Use the default value of Unitful.NoUnits for dimensionless quantities.\nx_exp_factor::Int=0: Numerical exponent to scale down the x axis, e.g. if x_exp_factor = 10 the values will be divided by 10^10. The default is no scaling.\ny_exp_factor::Int=0: Numerical exponent to scale down the y axis, e.g. if y_exp_factor = 10 the values will be divided by 10^10. The default is no scaling.\nx_trim::NTuple{2,<:Real}=(-Inf, Inf): The data will be trim down so the x coordinates fit within x_trim, in the units given by x_unit.\ny_trim::NTuple{2,<:Real}=(-Inf, Inf): The data will be trim down so the y coordinates fit within y_trim, in the units given by y_unit.\nx_edges::Bool=false: Set it to true if you want to keep the borders of x_trim.\ny_edges::Bool=false: Set it to true if you want to keep the borders of y_trim.\nx_func::Function=identity: Function to be applied to the values of the x axis. It must be a pure function with the signature x_func(x_values::Vector{Float64})::Vector{Float64}. The output must have the same length as the input. This function will be applied regardless of units and possible domain problems (use x_trim to solve incompatibilities), and that it will not be reflected in the automatic labeling.\ny_func::Function=identity: Function to be applied to the values of the y axis. It must be a pure function with the signature y_func(y_values::Vector{Float64})::Vector{Float64}. The output must have the same length as the input. This function will be applied regardless of units and possible domain problems (use y_trim to solve incompatibilities), and that it will not be reflected in the automatic labeling.\n\nAxes options\n\nxaxis_label::AbstractString=\"auto_label\": Label for the x axis. It can contain the string auto_label, which will be replaced by: xaxis_var_name [10^x_exp_factor x_unit]. If a LaTeXString with auto_label inside is used, it is recommended that each section arround auto_label is delimited with a $ pair, i.e. L\"some text auto_label more text\".\nyaxis_label::AbstractString=\"auto_label\": Label for the y axis. It can contain the string auto_label, which will be replaced by: yaxis_var_name [10^y_exp_factor y_unit]. If a LaTeXString with auto_label inside is used, it is recommended that each section arround auto_label is delimited with a $ pair, i.e. L\"some text auto_label more text\".\nxaxis_var_name::AbstractString=\"\": Name of the variable for the x axis.\nyaxis_var_name::AbstractString=\"\": Name of the variable for the y axis.\nxaxis_scale_func::Function=identity: Scaling function for the x axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nyaxis_scale_func::Function=identity: Scaling function for the y axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\n\nPlotting options\n\nsave_figures::Bool=true: If the plot will be saved as an image.\nbackup_results::Bool=false: If the values to be plotted will be backup in a JLD2 file.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\nsize::NTuple{2,Int}=(1000, 1000): Size of the figures in points. For PDFs and SVGs, 1 point = 0.1 mm. For PNGs, when strech assuming 1 point = 0.1 mm, one will get a dpi of 600 (23.622 px/mm).\nsim_labels::Union{Vector{String},Nothing}=nothing: Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntitle::AbstractString=\"\": Title for the figure. If left empty, no title will be printed.\nseries_colors::Union{Vector{<:ColorType},Nothing}=nothing: Colors for the different simulations. If set to nothing, the colors will be assigned automatically.\nseries_markers::Union{Vector{Symbol},Nothing}=nothing: Markers for the different simulations. If set to nothing, the markers will be assigned automatically. This is only relevant for scatter! and scatterlines! plots.\nseries_linestyles::Union{Vector{<:LineStyleType},Nothing}=nothing: Line styles for the different simulations. If set to nothing, the line styles will be assigned automatically. This is only relevant for lines! and scatterlines! plots.\n\nReturns\n\nThe Axis and Figure objects.\n\n\n\n\n\n","category":"method"},{"location":"api/post_processing/#Post-processing-functions","page":"Post processing functions","title":"Post processing functions","text":"","category":"section"},{"location":"api/post_processing/","page":"Post processing functions","title":"Post processing functions","text":"A post-processing function must take a Makie figure, add something to it, and return how to label the additions (or nothing when no new labels should be drawn).","category":"page"},{"location":"api/post_processing/","page":"Post processing functions","title":"Post processing functions","text":"None of these functions are exported.","category":"page"},{"location":"api/post_processing/#Expected-signature:","page":"Post processing functions","title":"Expected signature:","text":"","category":"section"},{"location":"api/post_processing/","page":"Post processing functions","title":"Post processing functions","text":"  post_processing(figure, args...; kwargs...) -> ([marker, ...], [label, ...])","category":"page"},{"location":"api/post_processing/","page":"Post processing functions","title":"Post processing functions","text":"where:","category":"page"},{"location":"api/post_processing/","page":"Post processing functions","title":"Post processing functions","text":"figure::Makie.Figure\nmarker::LegendElement\nlabel::String","category":"page"},{"location":"api/post_processing/","page":"Post processing functions","title":"Post processing functions","text":"","category":"page"},{"location":"api/post_processing/","page":"Post processing functions","title":"Post processing functions","text":"Modules = [GalaxyInspector]\nPages   = [\"post_processing.jl\"]","category":"page"},{"location":"api/post_processing/#GalaxyInspector.ppAnnotation!-Tuple{Makie.Figure, String}","page":"Post processing functions","title":"GalaxyInspector.ppAnnotation!","text":"ppAnnotation!(\n    figure::Makie.Figure,\n    text::String;\n    <keyword arguments>\n)::Nothing\n\nAdd an annotation to the plot.\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\ntext::String: Text to be written.\ncolor::ColorType=:black: Color of the text.\nrel_pos::Union{NTuple{2,Real},Nothing}=nothing: Relative position for the top left corner of the text box, within the plot. If set to nothing, the text will be printed at the top left corner of the plot.\n\n\n\n\n\n","category":"method"},{"location":"api/post_processing/#GalaxyInspector.ppBigiel2008!-Tuple{Makie.Figure, Symbol}","page":"Post processing functions","title":"GalaxyInspector.ppBigiel2008!","text":"ppBigiel2008!(\n    figure::Makie.Figure,\n    quantity::Symbol;\n    <keyword arguments>\n)::Tuple{Vector{<:LegendElement},Vector{AbstractString}}\n\nDraw a line plot with the fit for the KS relation in Bigiel et al. (2008).\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\nquantity::Symbol: Quantity for the x axis. The possibilities are:\n:molecular_area_density -> Molecular hydrogen area mass density, for a radius of FILTER_R.\n:neutral_area_density   -> Neutral hydrogen area mass density, for a radius of FILTER_R.\nx_unit::Unitful.Units=u\"Msun * pc^-2\": Unit for the area density of gas used in figure.\ny_unit::Unitful.Units=u\"Msun * yr^-1 * kpc^-2\": Unit for the area density of star formation rate used in figure.\nx_log::Bool=true: If the x axis is log_10(Sigma_mathrmH) (x_log = true) or just Sigma_mathrmH (x_log = false).\ny_log::Bool=true: If the y axis is log_10(Sigma_mathrmSFR) (y_log = true) or just Sigma_mathrmSFR  (y_log = false).\ncolor::ColorType=:red: Color of the line.\nlinestyle::LineStyleType=nothing: Style of the line. nothing will produce a solid line.\n\nReturns\n\nA tuple with the elements for the legend:\nA LineElement to be used as the marker.\nThe label string.\n\nReferences\n\nF. Bigiel et al. (2008). THE STAR FORMATION LAW IN NEARBY GALAXIES ON SUB-KPC SCALES. The Astrophysical Journal, 136(6), 2846. doi:10.1088/0004-6256/136/6/2846\n\n\n\n\n\n","category":"method"},{"location":"api/post_processing/#GalaxyInspector.ppCross!-Tuple{Makie.Figure, Tuple{Real, Real}}","page":"Post processing functions","title":"GalaxyInspector.ppCross!","text":"ppCross!(\n    figure::Makie.Figure,\n    cross_point::Tuple{<:Real,<:Real};\n    <keyword arguments>\n)::Nothing\n\nDraw two lines, one horizontal and one vertical.\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\ncross_point::Tuple{<:Real,<:Real}: Crossing point of the lines.\ncolor::ColorType=:red: Color of the lines.\nlinestyle::LineStyleType=nothing: Style of the lines. nothing will produce a solid line.\nwarnings::Bool=true: If a warning will be raised when at least one of the lines is outside the plot range.\n\n\n\n\n\n","category":"method"},{"location":"api/post_processing/#GalaxyInspector.ppFeldmann2020!-Tuple{Makie.Figure, Symbol, Symbol}","page":"Post processing functions","title":"GalaxyInspector.ppFeldmann2020!","text":"ppFeldmann2020!(\n    figure::Makie.Figure,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::Tuple{Vector{<:LegendElement},Vector{AbstractString}}\n\nDraw a line, or scatter, plot using the experimental data from the xGASS and xCOLD GASS collaborations, processed by Feldmann (2020).\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\nx_quantity::Symbol: Quantity for the x axis. The possibilities are:\n:stellar_mass   -> Stellar mass.\n:molecular_mass -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass    -> Atomic hydrogen (mathrmHI) mass.\n:sfr            -> The star formation rate.\ny_quantity::Symbol: Quantity for the y axis. The possibilities are:\n:stellar_mass   -> Stellar mass.\n:molecular_mass -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass    -> Atomic hydrogen (mathrmHI) mass.\n:sfr            -> The star formation rate.\nscatter::Bool=false: If the data will be presented as a line plot with error bands (default), or alternatively, a scatter plot.\n\nReturns\n\nA tuple with the elements for the legend:\nA MarkerElement to be used as the marker.\nThe label string.\n\nReferences\n\nR. Feldmann (2020). The link between star formation and gas in nearby galaxies. Communications Physics 3(226). doi:10.1038/s42005-020-00493-0\n\n\n\n\n\n","category":"method"},{"location":"api/post_processing/#GalaxyInspector.ppFitLine!-Tuple{Makie.Figure}","page":"Post processing functions","title":"GalaxyInspector.ppFitLine!","text":"ppFitLine!(\n    figure::Makie.Figure;\n    <keyword arguments>\n)::Union{Tuple{Vector{<:LegendElement},Vector{AbstractString}},Nothing}\n\nDraw a linear fit for the data in figure.\n\nAn annotation with the equation y = a  x + b, and the fitted values for a and b, will be positioned in the upper right corner of the plot.\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\nerror_formating::Symbol=:std_error: Error format for the annotation. The options are:\n:std_error     -> mean ± standard_error.\n:conf_interval -> mean ± max(upper_95 - mean, mean - lower_95).\ncolor::ColorType=:red: Color of the line.\nlinestyle::LineStyleType=nothing: Style of the line. nothing will produce a solid line.\nwarnings::Bool=true: If a warning will be raised when there are no points to fit.\n\nReturns\n\nA tuple with the elements for the legend:\nA LineElement to be used as the marker.\nThe label string.\n\n\n\n\n\n","category":"method"},{"location":"api/post_processing/#GalaxyInspector.ppHorizontalFlags!-Tuple{Makie.Figure, Vector{<:Real}}","page":"Post processing functions","title":"GalaxyInspector.ppHorizontalFlags!","text":"ppHorizontalFlags!(\n    figure::Makie.Figure,\n    positions::Vector{<:Real};\n    <keyword arguments>\n)::Nothing\n\nDraw horizontal lines.\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\npositions::Vector{<:Real}: The y coordinates of the lines.\ncolors::Vector{<:ColorType}=[:red]: Colors of the lines.\nline_styles::Vector{<:LineStyleType}=[nothing]: Styles of the lines. nothing will produce a solid line.\nwarnings::Bool=true: If a warning will be raised when all the lines are outside the plot range.\n\n\n\n\n\n","category":"method"},{"location":"api/post_processing/#GalaxyInspector.ppKennicutt1998!-Tuple{Makie.Figure}","page":"Post processing functions","title":"GalaxyInspector.ppKennicutt1998!","text":"ppKennicutt1998!(\n    figure::Makie.Figure;\n    <keyword arguments>\n)::Union{Tuple{Vector{<:LegendElement},Vector{AbstractString}},Nothing}\n\nDraw a line plot with the fit for the KS relation in Kennicutt (1998).\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\nx_unit::Unitful.Units=u\"Msun * pc^-2\": Unit for the area density of gas used in figure.\ny_unit::Unitful.Units=u\"Msun * yr^-1 * kpc^-2\": Unit for the area density of star formation rate used in figure.\nx_log::Bool=true: If the x axis is log_10(Sigma_mathrmgas) (x_log = true) or just Sigma_mathrmgas (x_log = false).\ny_log::Bool=true: If the y axis is log_10(Sigma_mathrmSFR) (y_log = true) or just Sigma_mathrmSFR  (y_log = false).\ncolor::ColorType=:red: Color of the line.\nlinestyle::LineStyleType=nothing: Style of the line. nothing will produce a solid line.\n\nReturns\n\nA tuple with the elements for the legend:\nA LineElement to be used as the marker.\nThe label string.\n\nReferences\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\n\n\n\n\n","category":"method"},{"location":"api/post_processing/#GalaxyInspector.ppMolla2015!-Tuple{Makie.Figure, Symbol}","page":"Post processing functions","title":"GalaxyInspector.ppMolla2015!","text":"ppMolla2015!(\n    figure::Makie.Figure,\n    quantity::Symbol,\n    <keyword arguments>\n)::Tuple{Vector{<:LegendElement},Vector{AbstractString}}\n\nDraw a profile for the Milky Way using the data compiled by Mollá et al. (2015).\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\nquantity::Symbol: Quantity for the y axis. The possibilities are:\n:stellar_area_density   -> Stellar area mass density.\n:molecular_area_density -> Molecular hydrogen area mass density.\n:atomic_area_density    -> Atomic hydrogen area mass density.\n:sfr_area_density       -> Star formation rate area density.\n:X_stellar_abundance    -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). mathrmX can be O (oxygen), N (nitrogen), or C (carbon).\ncolor::ColorType=:red: Color of the line.\nlinestyle::LineStyleType=nothing: Style of the line. nothing will produce a solid line.\nerror_bars::Bool=true: If the error bars will be plotted.\n\nReturns\n\nA tuple with the elements for the legend:\nA MarkerElement to be used as the marker.\nThe label string.\n\nReferences\n\nM. Mollá et al. (2015). Galactic chemical evolution: stellar yields and the initial mass function. Monthly Notices of the Royal Astronomical Society 451(4), 3693–3708. doi:10.1093/mnras/stv1102\n\n\n\n\n\n","category":"method"},{"location":"api/post_processing/#GalaxyInspector.ppVerticalFlags!-Tuple{Makie.Figure, Vector{<:Real}}","page":"Post processing functions","title":"GalaxyInspector.ppVerticalFlags!","text":"ppVerticalFlags!(\n    figure::Makie.Figure,\n    positions::Vector{<:Real};\n    <keyword arguments>\n)::Nothing\n\nDraw vertical lines.\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\npositions::Vector{<:Real}: The x coordinates of the lines.\ncolors::Vector{<:ColorType}=[:red]: Colors of the lines.\nline_styles::Vector{<:LineStyleType}=[nothing]: Styles of the lines. nothing will produce a solid line.\nwarnings::Bool=true: If a warning will be raised when all the lines are outside the plot range.\n\n\n\n\n\n","category":"method"},{"location":"intro/#GalaxyInspector","page":"Introduction","title":"GalaxyInspector","text":"","category":"section"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"A Julia module for the data analysis of Arepo hydrodynamical simulations.","category":"page"},{"location":"api/constants/#Constants","page":"Constants","title":"Constants","text":"","category":"section"},{"location":"api/constants/","page":"Constants","title":"Constants","text":"This is a list of constant and types used to configure GalaxyInspector and to store information about Arepo (e.g. the quantities in a snapshot and their units).","category":"page"},{"location":"api/constants/","page":"Constants","title":"Constants","text":"None of these constants and types are exported.","category":"page"},{"location":"api/constants/","page":"Constants","title":"Constants","text":"","category":"page"},{"location":"api/constants/","page":"Constants","title":"Constants","text":"Modules = [GalaxyInspector]\nPages   = [\"constants.jl\"]","category":"page"},{"location":"api/constants/#GalaxyInspector.AGE_RESOLUTION","page":"Constants","title":"GalaxyInspector.AGE_RESOLUTION","text":"Stellar age limit for the SFR and sSFR calculations.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.AGE_RESOLUTION_ρ","page":"Constants","title":"GalaxyInspector.AGE_RESOLUTION_ρ","text":"Stellar age limit for the SFR area density calculation.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.ATOMIC_WEIGHTS","page":"Constants","title":"GalaxyInspector.ATOMIC_WEIGHTS","text":"Standard atomic weights.\n\nReferences\n\nT. Prohaska et al. (2022). Standard atomic weights of the elements 2021 (IUPAC Technical Report). Pure and Applied Chemistry, 94(5), 573-600. doi:10.1515/pac-2019-0603\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.BIGIEL2008_DATA_PATH","page":"Constants","title":"GalaxyInspector.BIGIEL2008_DATA_PATH","text":"Path to the file with the fits for the molecular Kennicutt-Schmidt relation, taken from Bigiel et al. (2008).\n\nReferences\n\nF. Bigiel et al. (2008). THE STAR FORMATION LAW IN NEARBY GALAXIES ON SUB-KPC SCALES. The Astrophysical Journal, 136(6), 2846. doi:10.1088/0004-6256/136/6/2846\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.CPU_REL_PATH","page":"Constants","title":"GalaxyInspector.CPU_REL_PATH","text":"Relative path, within the simulation directory, to the cpu.txt file.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.ColorType","page":"Constants","title":"GalaxyInspector.ColorType","text":"Color type.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/#GalaxyInspector.DEFAULT_PARTICLE_INDEX","page":"Constants","title":"GalaxyInspector.DEFAULT_PARTICLE_INDEX","text":"Code index for each type of cell/particle.\n\nnote: Note\nThis index is for simulations with 6 cell/particle types.\n\nReferences\n\nSee for example Gadget2 User's Guide, or Gadget4 documentation.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.DEFAULT_THEME","page":"Constants","title":"GalaxyInspector.DEFAULT_THEME","text":"Global plot theme.\n\nOn the graphic units used:\n\nWe know that 1 mm = 2.83466 pt and 1 in = 25,4 mm. Then, if we want 1 [code ]unit = 0.1 mm in vector graphics, we have to use pt_per_unit = 0.283466. For pixel images, we control the ppi with px_per_unit. A resonable high ppi is 600, so, using px_per_unit = 2.3622 we get 23.622 px/mm ~ 600 px/in (remember that 1 [code ]unit = 0.1 mm).\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.ELEMENT_INDEX","page":"Constants","title":"GalaxyInspector.ELEMENT_INDEX","text":"Code index for each tracked element.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.FELDMANN2020_DATA_PATH","page":"Constants","title":"GalaxyInspector.FELDMANN2020_DATA_PATH","text":"Path to the file with the global galaxy properties, taken from Feldmann (2020).\n\nReferences\n\nR. Feldmann (2020). The link between star formation and gas in nearby galaxies. Communications Physics 3(226). doi:10.1038/s42005-020-00493-0\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.FILTER_R","page":"Constants","title":"GalaxyInspector.FILTER_R","text":"Radius of the sphere used in filterWithin, and for area density calculation.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.FULL_PARTICLE_INDEX","page":"Constants","title":"GalaxyInspector.FULL_PARTICLE_INDEX","text":"Code index for each type of cell/particle.\n\nnote: Note\nThis index is for simulations with 7 cell/particle types.\n\nReferences\n\nSee for example Gadget2 User's Guide, or Gadget4 documentation.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.GAS_ABUNDANCE","page":"Constants","title":"GalaxyInspector.GAS_ABUNDANCE","text":"Symbol list for the gas abundance quantities.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.GC_BASENAME","page":"Constants","title":"GalaxyInspector.GC_BASENAME","text":"Base name of the group catalog files.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.HESTIA_SUBHALOS","page":"Constants","title":"GalaxyInspector.HESTIA_SUBHALOS","text":"Dictionary with the subhalo numbers for the MW and M31 in Hestia simulations.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.HUBBLE_CONSTANT","page":"Constants","title":"GalaxyInspector.HUBBLE_CONSTANT","text":"Hubble constant in mathrmGyr^-1.\n\nThis value corresponds to H_0 = 0102201  mathrmGyr^-1 = 100  mathrmkm  mathrms^-1  mathrmMpc^-1.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.ILLUSTRIS_L_UNIT","page":"Constants","title":"GalaxyInspector.ILLUSTRIS_L_UNIT","text":"Internal unit of length used in IllustrisTNG, equivalent to 10   mathrmkpc. See the documentation here\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.ILLUSTRIS_M_UNIT","page":"Constants","title":"GalaxyInspector.ILLUSTRIS_M_UNIT","text":"Internal unit of mass used in IllustrisTNG, equivalent to 10^10  mathrmM_odot. See the documentation here\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.ILLUSTRIS_V_UNIT","page":"Constants","title":"GalaxyInspector.ILLUSTRIS_V_UNIT","text":"Internal unit of velocity used in IllustrisTNG, equivalent to 10  mathrmkm  s^-1. See the documentation here\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.INDEX_PARTICLE","page":"Constants","title":"GalaxyInspector.INDEX_PARTICLE","text":"Type of cell/particle corresponding to each code index.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.IndexType","page":"Constants","title":"GalaxyInspector.IndexType","text":"Index type.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/#GalaxyInspector.KS98_INTERCEPT","page":"Constants","title":"GalaxyInspector.KS98_INTERCEPT","text":"Intercept of the Kennicutt-Schmidt law, taken from Kennicutt (1998).\n\nReferences\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.KS98_RHO_UNIT","page":"Constants","title":"GalaxyInspector.KS98_RHO_UNIT","text":"Unit of surface density of the Kennicutt-Schmidt law, taken from Kennicutt (1998).\n\nReferences\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.KS98_SLOPE","page":"Constants","title":"GalaxyInspector.KS98_SLOPE","text":"Slope of the Kennicutt-Schmidt law, taken from Kennicutt (1998).\n\nReferences\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.LINE_STYLES","page":"Constants","title":"GalaxyInspector.LINE_STYLES","text":"List of line styles.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.LineStyleType","page":"Constants","title":"GalaxyInspector.LineStyleType","text":"Line style type.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/#GalaxyInspector.MARKERS","page":"Constants","title":"GalaxyInspector.MARKERS","text":"List of marker types.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.MOLLA2015_DATA_PATH","page":"Constants","title":"GalaxyInspector.MOLLA2015_DATA_PATH","text":"Path to the file with the Milky Way profiles, taken from Mollá et al. (2015).\n\nReferences\n\nM. Mollá et al. (2015). Galactic chemical evolution: stellar yields and the initial mass function. Monthly Notices of the Royal Astronomical Society 451(4), 3693–3708. doi:10.1093/mnras/stv1102\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.MORPHOLOGICAL_COMPONENTS","page":"Constants","title":"GalaxyInspector.MORPHOLOGICAL_COMPONENTS","text":"Human readable name corresponding to each morphological component.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.P0","page":"Constants","title":"GalaxyInspector.P0","text":"Reference pressure for the molecular fraction-pressure relation, taken from Blitz et al. (2006).\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.PARTICLE_CODE_NAME","page":"Constants","title":"GalaxyInspector.PARTICLE_CODE_NAME","text":"Internal code name (data group in the HDF5 output) corresponding to each type of cell/particle.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.PARTICLE_INDEX","page":"Constants","title":"GalaxyInspector.PARTICLE_INDEX","text":"Current cell/particle index in use.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.PARTICLE_NAMES","page":"Constants","title":"GalaxyInspector.PARTICLE_NAMES","text":"Human readable name corresponding to each type of cell/particle.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.PARTICLE_TYPE","page":"Constants","title":"GalaxyInspector.PARTICLE_TYPE","text":"Type of cell/particle corresponding to each internal code name (data group in the HDF5 output).\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.PASS_ALL","page":"Constants","title":"GalaxyInspector.PASS_ALL","text":"Default filter dictionary that does not exclude any cells/particles.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.PASS_NONE","page":"Constants","title":"GalaxyInspector.PASS_NONE","text":"Filter out every cell/particle.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.PHYSICAL_UNITS","page":"Constants","title":"GalaxyInspector.PHYSICAL_UNITS","text":"If physical lengths will be used throughout, instead of comoving lengths.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.QUANTITIES","page":"Constants","title":"GalaxyInspector.QUANTITIES","text":"Dictionary of dimensional properties for the quantities in the code.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.SFR_REL_PATH","page":"Constants","title":"GalaxyInspector.SFR_REL_PATH","text":"Relative path, within the simulation directory, to the sfr.txt file.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.SNAP_BASENAME","page":"Constants","title":"GalaxyInspector.SNAP_BASENAME","text":"Base name of the snapshot files, set in the code variable SnapshotFileBase.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.SOLAR_ABUNDANCE","page":"Constants","title":"GalaxyInspector.SOLAR_ABUNDANCE","text":"Solar abundances.\n\nThey are defined as 12 + log_10(N_mathrmX  N_mathrmH), where N_mathrmX and N_mathrmH are the number densities of element mathrmX and hydrogen respectively.\n\nReferences\n\nM. Asplund et al. (2009). The Chemical Composition of the Sun. Annual Review of Astronomy and Astrophysics, 47(1), 481–522. doi:10.1146/annurev.astro.46.060407.145222\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.SOLAR_METALLICITY","page":"Constants","title":"GalaxyInspector.SOLAR_METALLICITY","text":"Solar metallicity, as used in Arepo.\n\nReferences\n\nM. Asplund et al. (2006). The new solar abundances - Part I: the observations. Communications in Asteroseismology, 147. doi:10.1553/cia147s76\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.STELLAR_ABUNDANCE","page":"Constants","title":"GalaxyInspector.STELLAR_ABUNDANCE","text":"Symbol list for the stellar abundance quantities.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.THRESHOLD_DENSITY","page":"Constants","title":"GalaxyInspector.THRESHOLD_DENSITY","text":"Threshold density, above which the gas particles enter the star formation routine.\n\nThis value corresponds to CritPhysDensity = 0318  mathrmcm^-3 in the param.txt file. Which is converted to internal units within the code using PhysDensThresh = CritPhysDensity * PROTONMASS / HYDROGEN_MASSFRAC / UnitDensity_in_cgs. Then, to go to physical units again ones does: PhysDensThresh * UnitDensityincgs * cfa3inv * HubbleParam * HubbleParam. For a cosmological simulation at readshift 0 (cfa3inv = 1), this result in a physical density threshold of 0192  mathrmcm^-3, or adding the proton mass a value of:\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/#GalaxyInspector.CircularGrid","page":"Constants","title":"GalaxyInspector.CircularGrid","text":"Circular grid (2D or 3D), formed by a series of concentric rings or spherical shells.\n\nFields\n\ngrid::Vector{<:Number}: Vector with the distance of each bin to the center of the grid.\nticks::Vector{<:Number}: Vector with the edges of the bins.\ncenter::Vector{<:Number}: 3D location of the center of the grid. For the 2D grid, the grid is assumed to be in the xy plane.\nbin_area::Vector{<:Number}: Area of each ring.\nbin_volumes::Vector{<:Number}: Volume of each spherical shell.\nlog::Bool: If the grid is logarithmic.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/#GalaxyInspector.GroupCatHeader","page":"Constants","title":"GalaxyInspector.GroupCatHeader","text":"Data in the \"Header\" group of a HDF5 group catalog file.\n\nFields\n\nbox_size::Float64 = NaN: Total size of the simulation box.\nh0::Float64 = NaN: Hubble parameter.\nn_groups_part::Int32 = -1: Number of halos (FoF groups) in this file chunk.\nn_groups_total::Int32 = -1: Total number of halos (FoF groups) in this snapshot.\nn_subgroups_part::Int32 = -1: Number of subhalos (subfind) in this file chunk.\nn_subgroups_total::Int32 = -1: Total number of subhalos (subfind) in this snapshot.\nnum_files::Int32 = -1: Number of file chunks per snapshot.\nomega_0::Float64 = NaN: The cosmological density parameter for matter.\nomega_l::Float64 = NaN: The cosmological density parameter for the cosmological constant.\nredshift::Float64 = NaN: The redshift.\ntime::Float64 = NaN: The physical time/scale factor.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/#GalaxyInspector.GroupCatalog","page":"Constants","title":"GalaxyInspector.GroupCatalog","text":"Metadata for a group catalog file.\n\nFields\n\npath::Union{String,Missing}: Full path to the group catalog file.\nheader::GroupCatHeader: Header of the group catalog.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/#GalaxyInspector.InternalUnits","page":"Constants","title":"GalaxyInspector.InternalUnits","text":"Unit conversion struct.\n\nFields\n\nx_cgs::Unitful.Length: Length, from internal units to mathrmcm.\nx_cosmo::Unitful.Length: Length, from internal units to mathrmkpc.\nx_comoving::Unitful.Length: Length, from internal units to mathrmckpc.\nv_cgs::Unitful.Velocity: Velocity, from internal units to mathrmcm  s^-1.\nv_cosmo::Unitful.Velocity: Velocity, from internal units to mathrmkm  s^-1.\nm_cgs::Unitful.Mass: Mass, from internal units to mathrmg.\nm_cosmo::Unitful.Mass: Mass, from internal units to mathrmM_odot.\nt_cgs::Unitful.Time: Time, from internal units to mathrms.\nt_cosmo::Unitful.Time: Time, from internal units to mathrmMyr.\nU_cgs::Unitful.Energy: Specific energy, from internal units to mathrmerg  g^-1.\nrho_cgs::Unitful.Density: Density, from internal units to mathrmg  cm^-3.\nP_Pa::Unitful.Pressure: Pressure, from internal units to mathrmPa.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/#GalaxyInspector.LinearGrid","page":"Constants","title":"GalaxyInspector.LinearGrid","text":"Linear grid (1D).\n\nFields\n\ngrid::Vector{<:Number}: Vector with the center value of each bin.\nticks::Vector{<:Number}: Vector with the edges of the bins.\nbin_widths::Vector{<:Number}: Widths of the bins.\nlog::Bool: If the grid is logarithmic.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/#GalaxyInspector.PlotParams","page":"Constants","title":"GalaxyInspector.PlotParams","text":"Plotting parameters for a quantity.\n\nFields\n\nrequest::Dict{Symbol,Vector{String}} = Dict{Symbol,Vector{String}}(): Data request for readSnapshot. It must have the shape cell/particle type -> [block, block, block, ...].\nvar_name::AbstractString = \"\": Name of the quantity for the plot axis. It should not include units or scaling factors.\nexp_factor::Int = 0: Numerical exponent to scale down the axis, e.g. if x_exp_factor = 10 the values will be divided by 10^10. The default is no scaling.\nunit::Unitful.Units = Unitful.NoUnits: Target unit for the axis.\naxis_label::AbstractString = \"auto_label\": Label for the axis. It can contain the string auto_label, which will be replaced by the default label: var_name / 10^exp_factor unit.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/#GalaxyInspector.Qty","page":"Constants","title":"GalaxyInspector.Qty","text":"Dimensional information about a physical quantity.\n\nFields\n\nhdf5_name::String: HDF5 block name.\ndimensions::Unitful.Dimensions: Physical dimensions of the quantity, e.g. Unitful.𝐋 * Unitful.𝐓^-1.\nunit::Union{Unitful.Units,Symbol}: Units of the quantity within the code. It can be a unit from Unitful or UnitfulAstro, or it can be the symbol :internal which denotes internal code units.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/#GalaxyInspector.Simulation","page":"Constants","title":"GalaxyInspector.Simulation","text":"Metadata for a simulation.\n\nFields\n\npath::String: Full path to the simulation directory.\nindex::Int: An index associated with the simulation.\nslice::IndexType: Slice of the simulation, i.e. which snapshots will be read. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots).\ncosmological::Bool: If the simulation is cosmological,\nfalse -> Newtonian simulation    (ComovingIntegrationOn = 0).\ntrue  -> Cosmological simulation (ComovingIntegrationOn = 1).\ntable::DataFrame: A dataframe where each row is a snapshot, and with 8 colums:\n:ids            -> Dataframe index of each snapshot, i.e. if there are 10 snapshots in total it runs from 1 to 10.\n:numbers        -> Number in the file name of each snapshot.\n:scale_factors  -> Scale factor of each snapshot.\n:redshifts      -> Redshift of each snapshot.\n:physical_times -> Physical time since the Big Bang.\n:lookback_times -> Physical time left to reach the last snapshot.\n:snapshot_paths -> Full path to the snapshots.\n:groupcat_paths -> Full path to the group catalog files.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/#GalaxyInspector.Snapshot","page":"Constants","title":"GalaxyInspector.Snapshot","text":"Metadata for a snapshot.\n\nFields\n\npath::String: Full path to the snapshot.\nglobal_index::Int: Index of the snapshot in the context of the whole simulation.\nslice_index::Int: Index of the snapshot in the context of the slice.\nphysical_time::Unitful.Time: Physical time since the Big Bang.\nlookback_time::Unitful.Time: Physical time left to reach the last snapshot.\nscale_factor::Float64: Scale factor of the snapshot.\nredshift::Float64: Redshift of the snapshot.\nheader::SnapshotHeader: Header of the snapshot.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/#GalaxyInspector.SnapshotHeader","page":"Constants","title":"GalaxyInspector.SnapshotHeader","text":"Data in the \"Header\" group of a HDF5 snapshot file.\n\nFields\n\nbox_size::Float64: Total size of the simulation box.\nh0::Float64: Hubble parameter.\nmass_table::Vector{Float64}: Masses of particle types which have a constant mass.\nnum_files::Int32: Number of file chunks per snapshot.\nnum_part::Vector{Int32}: Number of particles (of each type) included in this file chunk.\nnum_total::Vector{UInt32}: Total number of particles (of each type) for this snapshot.\nomega_0::Float64: The cosmological density parameter for matter.\nomega_l::Float64: The cosmological density parameter for the cosmological constant.\nredshift::Float64: The redshift.\ntime::Float64: The physical time/scale factor.\nl_unit::Unitful.Length: Conversion factor from internal units of length to centimeters.\nm_unit::Unitful.Mass: Conversion factor from internal units of mass to grams.\nv_unit::Unitful.Velocity: Conversion factor from internal units of velocity to centimeters per second.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/#GalaxyInspector.SquareGrid","page":"Constants","title":"GalaxyInspector.SquareGrid","text":"Square grid (2D).\n\nFields\n\ngrid::Matrix{NTuple{2,<:Number}}: Matrix with the physical coordinates of the center of each pixel in the grid.\nx_ticks::Vector{<:Number}: Full set of possible values for the x coordinate.\ny_ticks::Vector{<:Number}: Full set of possible values for the y coordinate.\nsize::Number: Side length of the square grid.\nn_bins::Int: Number of bins per side of the grid.\nbin_width::Number: Side length of each bin.\nbin_area::Number: Area of each bin.\n\n\n\n\n\n","category":"type"},{"location":"api/general_utilities/#General-utilities","page":"General utilities","title":"General utilities","text":"","category":"section"},{"location":"api/general_utilities/","page":"General utilities","title":"General utilities","text":"These functions are only used internally, and are general in the sense that do not depend on the specifics of Arepo.","category":"page"},{"location":"api/general_utilities/","page":"General utilities","title":"General utilities","text":"None of these functions are exported.","category":"page"},{"location":"api/general_utilities/","page":"General utilities","title":"General utilities","text":"","category":"page"},{"location":"api/general_utilities/","page":"General utilities","title":"General utilities","text":"Modules = [GalaxyInspector]\nPages   = [\"general_utilities.jl\"]","category":"page"},{"location":"api/general_utilities/#Base.intersect-Tuple{Colon, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"General utilities","title":"Base.intersect","text":"New methods for Base.intersect to use with the Colon type.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#Base.intersect-Tuple{Vector{Bool}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"General utilities","title":"Base.intersect","text":"New methods for Base.intersect to use with the Vector{Bool} type.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#Base.isempty-Tuple{LaTeXStrings.LaTeXString}","page":"General utilities","title":"Base.isempty","text":"New method for Base.isempty to check for empty LaTeXStrings.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#Base.iszero-Tuple{Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"General utilities","title":"Base.iszero","text":"New method for Base.iszero to compare IndexType with 0 as an interger.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.absCoor-Tuple{Union{Makie.Axis, Makie.Figure, Makie.FigureAxisPlot}, Real, Real}","page":"General utilities","title":"GalaxyInspector.absCoor","text":"absCoor(\n    plot::Union{Makie.FigureAxisPlot,Makie.Axis,Makie.Figure},\n    r_x::Real,\n    r_y::Real,\n)::NTuple{2,Float64}\n\nCompute the absolute x and y coordinates of a plot, from the relative ones.\n\nArguments\n\nplot::Union{Makie.FigureAxisPlot,Makie.Axis,Makie.Figure}: Plot, axis, or figure for which the absolute coordinates will be calculated. In the case of a figure, it will use the limits from the current axis object.\nr_x::Real: Relative x coordinate.\nr_y::Real: Relative y coordinate.\n\nReturns\n\nA tuple with the absolute coordinates, (ax, ay).\n\nExamples\n\njulia> absCoor(lines(rand(100)), 0.5, 0.5)\n(50.50000071525574, 0.48792968317866325)\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.area-Tuple{Number}","page":"General utilities","title":"GalaxyInspector.area","text":"Area of a circle with radius r.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.cleanPlot!-Tuple{Any}","page":"General utilities","title":"GalaxyInspector.cleanPlot!","text":"Default function to end cleanPlot! recursion if an unknown type is encountered.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.cleanPlot!-Tuple{Makie.Axis}","page":"General utilities","title":"GalaxyInspector.cleanPlot!","text":"cleanPlot!(ax::Makie.Axis)::Bool\n\nEmpty an axis.\n\nArguments\n\nax::Makie.Axis: Axis to be emptied.\n\nReturns\n\nFlag to indicate that an axis has been emptied.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.cleanPlot!-Tuple{Makie.Figure}","page":"General utilities","title":"GalaxyInspector.cleanPlot!","text":"cleanPlot!(figure::Makie.Figure)::Nothing\n\nDelete all the legends of a figure and empty all its axes.\n\nArguments\n\nfigure::Makie.Figure: Figure to be cleaned.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.cleanPlot!-Tuple{Union{Makie.Colorbar, Makie.Legend}}","page":"General utilities","title":"GalaxyInspector.cleanPlot!","text":"cleanPlot!(legend::Union{Makie.Legend,Makie.Colorbar})::Bool\n\nDelete a legend or colorbar.\n\nArguments\n\nlegend::Union{Makie.Legend,Makie.Colorbar}: Legend or colorbar to be deleted.\n\nReturns\n\nFlag to indicate that a legend or colorbar has been deleted.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.cubicSplineKernel-Tuple{Real, Number}","page":"General utilities","title":"GalaxyInspector.cubicSplineKernel","text":"cubicSplineKernel(q::Real, h::Number)::Number\n\n2D cubic spline kernel.\n\nArguments\n\nq::Real: Relative distance to the neighbor, r - r  h.\nh::Number: Smoothing length.\n\nReturns\n\nThe kernel function evaluated at a separation q * h, and with a smoothing length h.\n\nReferences\n\nPySPH documentation\n\nJ. J. Monaghan (1992). Smoothed Particle Hydrodynamics. Annual Review of Astronomy and Astrophysics, 30, 543-574. doi:10.1146/annurev.aa.30.090192.002551\n\nM.B. Liu et al. (2010). Smoothed Particle Hydrodynamics (SPH): an Overview and Recent Developments. Archives of Computational Methods in Engineering, 17, 25–76. doi:10.1007/s11831-010-9040-7\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.getEmpty-Tuple","page":"General utilities","title":"GalaxyInspector.getEmpty","text":"Always returns an empty vector, for any type and number of arguments.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.getNothing-Tuple","page":"General utilities","title":"GalaxyInspector.getNothing","text":"Always returns nothing, for any type and number of arguments.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.histogram1D-Tuple{Vector{<:Number}, Union{GalaxyInspector.CircularGrid, GalaxyInspector.LinearGrid}}","page":"General utilities","title":"GalaxyInspector.histogram1D","text":"histogram1D(\n    positions::Vector{<:Number},\n    grid::Union{LinearGrid,CircularGrid},\n)::Vector{Int}\n\nCompute a 1D histogram of positions.\n\nArguments\n\npositions::Vector{<:Number}: Values for which the histogram will be constructed.\ngrid::Union{LinearGrid,CircularGrid}: A linear or circular grid.\n\nReturns\n\nA vector with the counts.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.histogram1D-Tuple{Vector{<:Number}, Vector{<:Number}, Union{GalaxyInspector.CircularGrid, GalaxyInspector.LinearGrid}}","page":"General utilities","title":"GalaxyInspector.histogram1D","text":"histogram1D(\n    positions::Vector{<:Number},\n    values::Vector{<:Number},\n    grid::Union{LinearGrid,CircularGrid};\n    <keyword arguments>\n)::Vector{<:Number}\n\nCompute a 1D histogram of values.\n\nArguments\n\npositions::Vector{<:Number}: Positions of the values within a 1D axis. This determines to which bin each value will be added.\nvalues::Vector{<:Number}: The values that will be added up in each bin, according to their positions.\ngrid::Union{LinearGrid,CircularGrid}: A linear or circular grid.\ntotal::Bool=true: If the sum (default) or the mean of values will be computed for each bin.\nempty_nan::Bool=true: If NaN will be put into empty bins, 0 is used otherwise.\n\nReturns\n\nA vector with the histogram values.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.histogram1D-Tuple{Vector{<:Number}, Vector{<:Number}, Vector{<:Number}}","page":"General utilities","title":"GalaxyInspector.histogram1D","text":"histogram1D(\n    positions::Vector{<:Number},\n    values::Vector{<:Number},\n    edges::Vector{<:Number};\n    <keyword arguments>\n)::Vector{<:Number}\n\nCompute a 1D histogram of values.\n\nArguments\n\npositions::Vector{<:Number}: Positions of the values within a 1D axis. This determines to which bin each value will be added.\nvalues::Vector{<:Number}: The values that will be added up in each bin, according to their positions.\nedges::Vector{<:Number}: A sorted list of bin edges.\ntotal::Bool=true: If the sum (default) or the mean of values will be computed for each bin.\nempty_nan::Bool=true: If NaN will be put into empty bins, 0 is used otherwise.\n\nReturns\n\nA vector with the histogram values.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.histogram1D-Tuple{Vector{<:Number}, Vector{<:Number}}","page":"General utilities","title":"GalaxyInspector.histogram1D","text":"histogram1D(positions::Vector{<:Number}, edges::Vector{<:Number})::Vector{Int}\n\nCompute a 1D histogram of positions.\n\nArguments\n\npositions::Vector{<:Number}: Values for which the histogram will be constructed.\nedges::Vector{<:Number}: A sorted list of bin edges.\n\nReturns\n\nA vector with the counts.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.histogram2D-Tuple{Matrix{<:Number}, GalaxyInspector.SquareGrid}","page":"General utilities","title":"GalaxyInspector.histogram2D","text":"histogram2D(positions::Matrix{<:Number}, grid::SquareGrid)::Matrix{Int}\n\nCompute a 2D histogram of positions.\n\nArguments\n\npositions::Matrix{<:Number}: Values for which the histogram will be constructed.\ngrid::SquareGrid: A square grid.\n\nReturns\n\nA matrix with the counts.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.histogram2D-Tuple{Matrix{<:Number}, Vector{<:Number}, GalaxyInspector.SquareGrid}","page":"General utilities","title":"GalaxyInspector.histogram2D","text":"histogram2D(\n    positions::Matrix{<:Number},\n    values::Vector{<:Number},\n    grid::SquareGrid;\n    <keyword arguments>\n)::Matrix{<:Number}\n\nCompute a 2D histogram of values.\n\nArguments\n\npositions::Matrix{<:Number}: Positions of the values in the grid. Each column correspond to a value and each row is a dimension. This determines to which bin each value will be added.\nvalues::Vector{<:Number}: The values that will be added up in each square bin, according to their positions.\ngrid::SquareGrid: A square grid.\ntotal::Bool=true: If the sum (default) or the mean of values will be computed in each bin.\nempty_nan::Bool=true: If NaN will be put into empty bins, 0 is used otherwise.\n\nReturns\n\nA matrix with the histogram values.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.histogram2D-Tuple{Matrix{<:Number}, Vector{<:Number}, Vector{<:Number}, Vector{<:Number}}","page":"General utilities","title":"GalaxyInspector.histogram2D","text":"histogram2D(\n    positions::Matrix{<:Number},\n    values::Vector{<:Number},\n    x_edges::Vector{<:Number},\n    y_edges::Vector{<:Number};\n    <keyword arguments>\n)::Matrix{<:Number}\n\nCompute a 2D histogram of values.\n\nArguments\n\npositions::Matrix{<:Number}: Positions of the values in the grid. Each column correspond to a value and each row is a dimension. This determines to which bin each value will be added.\nvalues::Vector{<:Number}: The values that will be added up in each square bin, according to their positions.\nx_edges::Vector{<:Number}: A sorted list of bin edges for the x axis.\ny_edges::Vector{<:Number}: A sorted list of bin edges for the y axis.\ntotal::Bool=true: If the sum (default) or the mean of values will be computed in each bin.\nempty_nan::Bool=true: If NaN will be put into empty bins, 0 is used otherwise.\n\nReturns\n\nA matrix with the histogram values.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.histogram2D-Tuple{Matrix{<:Number}, Vector{<:Number}, Vector{<:Number}}","page":"General utilities","title":"GalaxyInspector.histogram2D","text":"histogram2D(\n    positions::Matrix{<:Number},\n    x_edges::Vector{<:Number},\n    y_edges::Vector{<:Number},\n)::Matrix{Int}\n\nCompute a 2D histogram of positions.\n\nArguments\n\npositions::Matrix{<:Number}: Values for which the histogram will be constructed.\ngrid::SquareGrid: A square grid.\nx_edges::Vector{<:Number}: A sorted list of bin edges for the x axis.\ny_edges::Vector{<:Number}: A sorted list of bin edges for the y axis.\n\nReturns\n\nA matrix with the counts.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.hvcatImages-Tuple{Int64, Vector{String}}","page":"General utilities","title":"GalaxyInspector.hvcatImages","text":"hvcatImages(\n    blocks_per_row::Int,\n    paths::Vector{String};\n    <keyword arguments>\n)::Nothing\n\nJoin several images vertically and horizontally\n\nThe elements will fill the rows and columns starting at the top left, going from left to right and from top to bottom.\n\nArguments\n\nblocks_per_row::Int: Number of columns.\npaths::Vector{String}: Paths to the images.\noutput_path::String=\"./joined_image.png\": Path to the output image.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.isPositive-Tuple{Number}","page":"General utilities","title":"GalaxyInspector.isPositive","text":"Test for strict positivity.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.pointData-Tuple{Makie.Axis}","page":"General utilities","title":"GalaxyInspector.pointData","text":"Extract all the data points in a Makie plot, axis, or figure. In the case of a figure, it will only take the data from the current axis object. It only works for scatter, line and scatterline plots.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.rangeCut!-Tuple{Vector{<:Number}, Tuple{Number, Number}}","page":"General utilities","title":"GalaxyInspector.rangeCut!","text":"rangeCut!(\n    data::Vector{<:Number},\n    range::Tuple{<:Number,<:Number};\n    <keyword arguments>\n)::Bool\n\nDelete every element in data that is outside the given range.\n\nArguments\n\ndata::Vector{<:Number}: Dataset that will be pruned.\nrange::Tuple{<:Number,<:Number}: The range in question.\nkeep_edges::Bool=true: If the edges of the range will be kept.\nmin_left::Int=0: Minimum number of values that need to be left after pruning to proceed with the transformation.\n\nReturns\n\nIf a transformation was performed.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.rangeCut!-Tuple{Vector{<:Number}, Vector, Tuple{Number, Number}}","page":"General utilities","title":"GalaxyInspector.rangeCut!","text":"rangeCut!(\n    m_data::Vector{<:Number},\n    s_data::Vector,\n    range::Tuple{<:Number,<:Number};\n    <keyword arguments>\n)::Bool\n\nDelete every element in m_data that is outside the given range.\n\nEvery corresponding element in s_data (i.e. with the same index) will be deleted too.\n\nArguments\n\nm_data::Vector{<:Number}: Master dataset that will be pruned.\ns_data::Vector: Slave dataset that will be pruned according to which values of m_data are outside range.\nrange::Tuple{<:Number,<:Number}: The range in question.\nkeep_edges::Bool=true: If the edges of the range will be kept.\nmin_left::Int=0: Minimum number of values that need to be left in the master dataset after pruning to proceed with the transformation.\n\nReturns\n\nIf a transformation was performed.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.ring-Tuple{Vector, Integer}","page":"General utilities","title":"GalaxyInspector.ring","text":"ring(vec::Vector, index::Integer)\n\nMake the indexing operation vec[index] work using modular arithmetic for the indices.\n\nArguments\n\nvec::Vector: Vector.\nindex::Integer: Index.\n\nReturns\n\nvec[mod1(index, length(vec))]\n\nExamples\n\njulia> ring([1, 2, 3], 11)\n2\n\njulia> ring([1, 2, 3], 3)\n3\n\njulia> ring([1, 2, 3], -5)\n1\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.safeSelect-Tuple{Vector, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"General utilities","title":"GalaxyInspector.safeSelect","text":"safeSelect(vec::Vector, index::IndexType; warnings::Bool=true)\n\nMake the indexing operation vec[index] ignore indices that are out of bounds.\n\nArguments\n\nvec::Vector: Vector.\nindex::IndexType: Indices. It can be an integer (a single element), a vector of integers (several elements), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (every element).\nwarnings::Bool=true: If a warning will be given when index has out of bounds indices.\n\nReturns\n\nvec[index (minus out of bounds indices)]\n\nExamples\n\njulia> safeSelect([1, 2, 3], 11; warnings=false)\nInt[]\n\njulia> safeSelect([1, 2, 3], 1:5; warnings=false)\n3-element Vector{Int}:\n 1\n 2\n 3\n\njulia> safeSelect([1, 2, 3], 1:3:10; warnings=false)\n1\n\njulia> safeSelect([1, 2, 3], [1, 2, 5, 9]; warnings=false)\n2-element Vector{Int}:\n 1\n 2\n\njulia> safeSelect([1, 2, 3], (:); warnings=false)\n3-element Vector{Int}:\n 1\n 2\n 3\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.sanitizeData!-Tuple{Vector{<:Number}, Vector{<:Number}}","page":"General utilities","title":"GalaxyInspector.sanitizeData!","text":"sanitizeData!(\n    x_data::Vector{<:Number},\n    y_data::Vector{<:Number};\n    <keyword arguments>\n)::NTuple{4,Bool}\n\nDo the following transformations over x_data and y_data, in order:\n\nTrim them to fit within the domain of the functions func_domain[1] and func_domain[2], respectively.\nTrim them to fit within range[1] and range[2], respectively.\nScale them down by a factor 10^exp_factor[1] and 10^exp_factor[2], respectively.\n\nBy default, no transformation is done.\n\nnote: Note\nThe datasets must have the same length, and any operation that deletes an element, will delete the corresponding element (i.e. with the same index) in the other dataset, so that the dataset will remain of equal length.\n\nArguments\n\nx_data::Vector{<:Number}: First dataset to be sanitized.\ny_data::Vector{<:Number}: Second dataset to be sanitized.\nfunc_domain::NTuple{2,Function}=(identity, identity): x_data will be trimmed to fit within the domain of the function func_domain[1], and y_data will be trimmed to fit within the domain of the function func_domain[2]. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nrange::Tuple{Tuple{<:Number,<:Number},Tuple{<:Number,<:Number}}=((-Inf, Inf), (-Inf, Inf)): Every element in x_data that falls outside of range[1] will be deleted, and every element in y_data that falls outside of range[2] will be deleted.\nkeep_edges::NTuple{2,Bool}=(true, true): If the edges of each corresponding range will be kept.\nmin_left::Int=0: Minimum number of values that need to be left in each dataset after any of the transformations to procced with them.\nexp_factor::NTuple{2,Int}=(0, 0): Every element in x_data will be divided by 10^exp_factor[1], and every element in y_data will be divided by 10^exp_factor[2].\nwarnings::Bool=true: If a warning will be given when any of the datasets is a vector of Integers, which may cause wrong results when dividing by 10^exp_factor.\n\nReturns\n\nA tuple with four flags:\nIf x_data was successfully modified to fit within the domain of func_domain[1].\nIf y_data was successfully modified to fit within the domain of func_domain[2].\nIf x_data was successfully modified to fit within range[1].\nIf y_data was successfully modified to fit within range[2].\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.sanitizeData!-Tuple{Vector{<:Number}}","page":"General utilities","title":"GalaxyInspector.sanitizeData!","text":"sanitizeData!(\n    data::Vector{<:Number};\n    <keyword arguments>\n)::NTuple{2,Bool}\n\nDo the following transformations over data, in order:\n\nTrim it to fit within the domain of the function func_domain.\nTrim it to fit within range.\nScale it down by a factor of 10^exp_factor.\n\nBy default, no transformation is done.\n\nArguments\n\ndata::Vector{<:Number}: Dataset to be sanitized.\nfunc_domain::Function=identity: data will be trimmed to fit within the domain of the function func_domain. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nrange::Tuple{<:Number,<:Number}=(-Inf, Inf): Every element in data that falls outside of range will be deleted.\nkeep_edges::Bool=true: If the edges of range will be kept.\nmin_left::Int=0: Minimum number of values that need to be left after each transformation to procced with it.\nexp_factor::Int=0: Every element in data will be divided by 10^exp_factor.\nwarnings::Bool=true: If a warning will be given when data is a vector of Integers, which may cause wrong results when dividing by 10^exp_factor.\n\nReturns\n\nA tuple with two flags:\nIf data was mutated to fit within the domain of func_domain.\nIf data was mutated to fit within range.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.scaledBins-Tuple{Vector{<:Number}, Int64}","page":"General utilities","title":"GalaxyInspector.scaledBins","text":"scaledBins(\n    values::Vector{<:Number},\n    n_bins::Int;\n    <keyword arguments>\n)::Vector{Float64}\n\nCompute a set of bin edges, for a given list values.\n\nArguments\n\nvalues::Vector{<:Number}: Values to be binned.\nn_bins::Int: Number of bins.\nscaling::Function=identity: Scaling function. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nlimits::Tuple{<:Number,<:Number}=(-Inf, Inf): Set it to a value different than Inf if you want to fix the limits of the binning.\n\nReturns\n\nA sorted list of bin edges.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.setPositive-Tuple{VecOrMat{<:Number}}","page":"General utilities","title":"GalaxyInspector.setPositive","text":"Create a copy of list with every negative value set to 0.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.smoothWindow-Tuple{Vector{<:Number}, Vector{<:Number}, Int64}","page":"General utilities","title":"GalaxyInspector.smoothWindow","text":"smoothWindow(\n    x_data::Vector{<:Number},\n    y_data::Vector{<:Number},\n    n_bins::Int;\n    <keyword arguments>\n)::NTuple{2,Vector{<:Number}}\n\nSeparate the values of x_data in n_bins bins and compute the mean value of x_data and y_data within each one.\n\nArguments\n\nx_data::Vector{<:Number}: x-axis data.\ny_data::Vector{<:Number}: y-axis data.\nn_bins::Int: Number of bins.\nscaling::Function=identity: Scaling function for the x axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity. All the values of x_data must be in the domain of scaling.\n\nReturns\n\nA tuple with two vectors, containing the smoothed-out x and y values.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.volume-Tuple{Number}","page":"General utilities","title":"GalaxyInspector.volume","text":"Volume of a sphere with radius r.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.xlimits!-Tuple{Makie.Axis}","page":"General utilities","title":"GalaxyInspector.xlimits!","text":"Extract the limits of the x axis, from a Makie plot, axis, or figure. In the case of a figure, it will take the limits from the current axis object.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.xscale-Tuple{Makie.Axis}","page":"General utilities","title":"GalaxyInspector.xscale","text":"Extract the scale function of the x axis, from a Makie plot, axis, or figure. In the case of a figure, it will take the scale from the current axis object.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.ylimits!-Tuple{Makie.Axis}","page":"General utilities","title":"GalaxyInspector.ylimits!","text":"Extract the limits of the y axis, from a Makie plot, axis, or figure. In the case of a figure, it will take the limits from the current axis object.\n\n\n\n\n\n","category":"method"},{"location":"api/general_utilities/#GalaxyInspector.yscale-Tuple{Makie.Axis}","page":"General utilities","title":"GalaxyInspector.yscale","text":"Extract the scale function of the y axis, from a Makie plot, axis, or figure. In the case of a figure, it will take the scale from the current axis object.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#Convenience-functions","page":"Convenience functions","title":"Convenience functions","text":"","category":"section"},{"location":"api/convenience/","page":"Convenience functions","title":"Convenience functions","text":"These functions are pre-made recipes for specific plot types.","category":"page"},{"location":"api/convenience/","page":"Convenience functions","title":"Convenience functions","text":"They are also examples of how to use the more configurable, but much more complicated, pipeline functions.","category":"page"},{"location":"api/convenience/","page":"Convenience functions","title":"Convenience functions","text":"All these functions are exported.","category":"page"},{"location":"api/convenience/","page":"Convenience functions","title":"Convenience functions","text":"","category":"page"},{"location":"api/convenience/","page":"Convenience functions","title":"Convenience functions","text":"Modules = [GalaxyInspector]\nPages   = [\"convenience.jl\"]","category":"page"},{"location":"api/convenience/#GalaxyInspector.atomicMolecularTransitionHeatmap-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Vector{<:Tuple{var\"#s982\", var\"#s981\"} where {var\"#s982\"<:Real, var\"#s981\"<:Real}}}","page":"Convenience functions","title":"GalaxyInspector.atomicMolecularTransitionHeatmap","text":"atomicMolecularTransitionHeatmap(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    ranges::Vector{<:Tuple{<:Real,<:Real}};\n    <keyword arguments>\n)::Nothing\n\nPlot the atomic gas to molecular gas transition as a heatmap, for a set of metallicity ranges.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nranges::Vector{<:Tuple{<:Real,<:Real}}: Metallicity ranges. On figure per range will be produced.\nhalo_idx::Int: Index of the target halo (FoF group). Starts at 1.\nsubhalo_rel_idx::Int: Index of the target subhalo (subfind), relative the target halo. Starts at 1. If set to 0, all subhalos of the target halo are included.\noutput_path::String=\"./\": Path to the output folder.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.atomicMolecularTransitionScatter-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Vector{<:Tuple{var\"#s983\", var\"#s982\"} where {var\"#s983\"<:Real, var\"#s982\"<:Real}}}","page":"Convenience functions","title":"GalaxyInspector.atomicMolecularTransitionScatter","text":"atomicMolecularTransitionScatter(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    ranges::Vector{<:Tuple{<:Real,<:Real}};\n    <keyword arguments>\n)::Nothing\n\nPlot the atomic gas to molecular gas transition as a scatter plot, for a set of metallicity ranges.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nranges::Vector{<:Tuple{<:Real,<:Real}}: Metallicity ranges.\nhalo_idx::Int: Index of the target halo (FoF group). Starts at 1.\nsubhalo_rel_idx::Int: Index of the target subhalo (subfind), relative the target halo. Starts at 1. If set to 0, all subhalos of the target halo are included.\noutput_path::String=\"./\": Path to the output folder.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.compareFeldmann2020-Tuple{Vector{String}, Symbol, Symbol}","page":"Convenience functions","title":"GalaxyInspector.compareFeldmann2020","text":"compareFeldmann2020(\n    simulation_paths::Vector{String},\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot a time series plus the corresponding experimental results from Feldmann (2020).\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nx_quantity::Symbol: Quantity for the x axis. The possibilities are:\n:stellar_mass   -> Stellar mass.\n:molecular_mass -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass    -> Atomic hydrogen (mathrmHI) mass.\n:sfr            -> The star formation rate of the last AGE_RESOLUTION.\ny_quantity::Symbol: Quantity for the y axis. The possibilities are:\n:stellar_mass   -> Stellar mass.\n:molecular_mass -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass    -> Atomic hydrogen (mathrmHI) mass.\n:sfr            -> The star formation rate of the last AGE_RESOLUTION.\nslice::IndexType=(:): Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nscatter::Bool=false: If the data will be presented as a line plot with error bands (default), or alternatively, a scatter plot.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nsim_labels::Union{Vector{String},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\n\nReferences\n\nR. Feldmann (2020). The link between star formation and gas in nearby galaxies. Communications Physics 3(226). doi:10.1038/s42005-020-00493-0\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.compareKennicuttBigielIntegrated-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.compareKennicuttBigielIntegrated","text":"compareKennicuttBigielIntegrated(\n    simulation_paths::Vector{String},\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot the integrated Kennicutt-Schmidt relation plus the results of Kennicutt (1998) or Bigiel et al. (2008), depending on the chosen quantity. This method plots the KS relation for the whole galaxy at different points in time.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantity::Symbol=:molecular_area_density: Quantity for the x axis. The possibilities are:\n:gas_area_density       -> Gas area mass density, for a radius of FILTER_R. This one will be plotted with the results of Kennicutt (1998).\n:molecular_area_density -> Molecular hydrogen area mass density, for a radius of FILTER_R. This one will be plotted with the results of Bigiel et al. (2008).\n:neutral_area_density   -> Neutral hydrogen area mass density, for a radius of FILTER_R. This one will be plotted with the results of Bigiel et al. (2008).\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nsim_labels::Union{Vector{String},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\n\nReferences\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\nF. Bigiel et al. (2008). THE STAR FORMATION LAW IN NEARBY GALAXIES ON SUB-KPC SCALES. The Astrophysical Journal, 136(6), 2846. doi:10.1088/0004-6256/136/6/2846\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.compareKennicuttBigielResolved-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.compareKennicuttBigielResolved","text":"compareKennicuttBigielResolved(\n    simulation_paths::Vector{String},\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot the resolved Kennicutt-Schmidt relation plus the results of Kennicutt (1998) or Bigiel et al. (2008), depending on the chosen quantity. This method plots the KS relation using cylindrical bins at a fix moment in time.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantity::Symbol=:molecular_area_density: Quantity for the x axis. The possibilities are:\n:gas_area_density       -> Gas area mass density, for a radius of FILTER_R. This one will be plotted with the results of Kennicutt (1998).\n:molecular_area_density -> Molecular hydrogen area mass density, for a radius of FILTER_R. This one will be plotted with the results of Bigiel et al. (2008).\n:neutral_area_density   -> Neutral hydrogen area mass density, for a radius of FILTER_R. This one will be plotted with the results of Bigiel et al. (2008).\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nsim_labels::Union{Vector{String},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\n\nReferences\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\nF. Bigiel et al. (2008). THE STAR FORMATION LAW IN NEARBY GALAXIES ON SUB-KPC SCALES. The Astrophysical Journal, 136(6), 2846. doi:10.1088/0004-6256/136/6/2846\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.compareMolla2015-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol}","page":"Convenience functions","title":"GalaxyInspector.compareMolla2015","text":"compareMolla2015(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot a Milky Way profile plus the corresponding experimental results from Mollá et al. (2015).\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantity::Symbol: Quantity for the y axis. The options are:\n:stellar_area_density   -> Stellar area mass density.\n:molecular_area_density -> Molecular hydrogen area mass density.\n:atomic_area_density    -> Atomic hydrogen area mass density.\n:sfr_area_density       -> Star formation rate area density, for the last AGE_RESOLUTION_ρ.\n:O_stellar_abundance    -> Stellar abundance of oxygen, as 12 + log_10(mathrmO    H).\n:N_stellar_abundance    -> Stellar abundance of nitrogen, as 12 + log_10(mathrmN    H).\n:C_stellar_abundance    -> Stellar abundance of carbon, as 12 + log_10(mathrmC    H).\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nsim_labels::Union{Vector{String},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\n\nReferences\n\nM. Mollá et al. (2015). Galactic chemical evolution: stellar yields and the initial mass function. Monthly Notices of the Royal Astronomical Society 451(4), 3693–3708. doi:10.1093/mnras/stv1102\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.cpuTXT-Tuple{Vector{String}, String, Symbol, Symbol}","page":"Convenience functions","title":"GalaxyInspector.cpuTXT","text":"cpuTXT(\n    simulation_paths::Vector{String},\n    target::String,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot a time series of the data in the cpu.txt file.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\ntarget::String: Target process.\nx_quantity::Symbol: Quantity for the x axis. The possibilities are:\n:time_step              -> Time step.\n:physical_time          -> Physical time since the Big Bang.\n:clock_time_s           -> Clock time duration of the time step in seconds.\n:clock_time_percent     -> Clock time duration of the time step as a percentage.\n:tot_clock_time_s       -> Total clock time in seconds.\n:tot_clock_time_percent -> Total clock time as a percentage.\ny_quantity::Symbol: Quantity for the y axis. The possibilities are:\n:time_step              -> Time step.\n:physical_time          -> Physical time since the Big Bang.\n:clock_time_s           -> Clock time duration of the time step in seconds.\n:clock_time_percent     -> Clock time duration of the time step as a percentage.\n:tot_clock_time_s       -> Total clock time in seconds.\n:tot_clock_time_percent -> Total clock time as a percentage.\nsmooth::Int=0: The result will be smooth out using smooth bins. Set it to 0 if you want no smoothing.\nyscale::Function=identity: Scaling function for the y axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nx_trim::NTuple{2,<:Real}=(-Inf, Inf): The data will be trim down so the x coordinates fit within x_trim.\ny_trim::NTuple{2,<:Real}=(-Inf, Inf): The data will be trim down so the y coordinates fit within y_trim. This option does not affect histograms.\noutput_path::String=\"./\": Path to the output folder.\nsim_labels::Union{Vector{String},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.densityMap-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.densityMap","text":"densityMap(\n    simulation_paths::Vector{String},\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot a 2D histogram of the density.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored. If set to 0, an animation using every snapshots will be made.\nquantities::Vector{Symbol}=[:gas_mass]: Quantities for which the density will be calculated. The options are:\n:stellar_mass   -> Stellar mass.\n:gas_mass       -> Gas mass.\n:dm_mass        -> Dark matter mass.\n:bh_mass        -> Black hole mass.\n:molecular_mass -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass    -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass   -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass   -> Neutral hydrogen (mathrmHI + H_2) mass.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nprojection_planes::Vector{Symbol}=[:xy]: Projection planes. The options are :xy, :xz and :yz.\nbox_size::Unitful.Length=100u\"kpc\": Physical side length of the plot window.\npixel_length::Unitful.Length=0.1u\"kpc\": Pixel (bin of the 2D histogram) side length.\nsmooth::Bool=false: If the results will be smooth out using the kernel function cubicSplineKernel.\nsmoothing_length::Union{Unitful.Length,Nothing}=nothing: Smoothing length. If set to nothing, the mean value of the \"SOFT\" block will be used. If the \"SOFT\" block is no available, the mean of the cell characteristic size will be used.\nprint_range::Bool=false: Print an info block detailing the logarithmic density range.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\nsize::NTuple{2,Int}=(880, 640): Size of the figure in points. For PDFs and SVGs, 1 point = 0.1 mm. For PNGs, when strech assuming 1 point = 0.1 mm, one will get a dpi of 600 (23.622 px/mm).\ntitle::Union{Symbol,<:AbstractString}=\"\": Title for the figure. If left empty, no title is printed. It can also be set to one of the following options:\n:physical_time -> Physical time since the Big Bang.\n:lookback_time -> Physical time left to reach the last snapshot.\n:scale_factor  -> Scale factor (only relevant for cosmological simulations).\n:redshift      -> Redshift (only relevant for cosmological simulations).\nannotation::String=\"\": Text to be added into the top left corner of the plot. If left empty, nothing is printed.\ncolorrange::Union{Nothing,Tuple{<:Real,<:Real}}=nothing: Sets the start and end points of the colormap. Use nothing to use the extrema of the values to be plotted.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.densityMapVelField-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.densityMapVelField","text":"densityMapVelField(\n    simulation_paths::Vector{String},\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot a 2D histogram of the density, with the velocity field.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored. If set to 0, an animation using every snapshots will be made.\nquantities::Vector{Symbol}=[:gas_mass]: Quantities for which the density will be calculated. The options are:\n:stellar_mass   -> Stellar mass.\n:gas_mass       -> Gas mass.\n:dm_mass        -> Dark matter mass.\n:bh_mass        -> Black hole mass.\n:molecular_mass -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass    -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass   -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass   -> Neutral hydrogen (mathrmHI + H_2) mass.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nprojection_planes::Vector{Symbol}=[:xy]: Projection planes. The options are :xy, :xz and :yz.\nbox_size::Unitful.Length=100u\"kpc\": Physical side length of the plot window.\npixel_length::Unitful.Length=0.1u\"kpc\": Pixel (bin of the 2D histogram) side length.\nsmooth::Bool=false: If the results will be smooth out using the kernel function cubicSplineKernel.\nsmoothing_length::Union{Unitful.Length,Nothing}=nothing: Smoothing length. If set to nothing, the mean value of the \"SOFT\" block will be used. If the \"SOFT\" block is no available, the mean of the cell characteristic size will be used.\nprint_range::Bool=false: Print an info block detailing the logarithmic density range.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\nsize::NTuple{2,Int}=(880, 640): Size of the figure in points. For PDFs and SVGs, 1 point = 0.1 mm. For PNGs, when strech assuming 1 point = 0.1 mm, one will get a dpi of 600 (23.622 px/mm).\ntitle::Union{Symbol,<:AbstractString}=\"\": Title for the figure. If left empty, no title is printed. It can also be set to one of the following options:\n:physical_time -> Physical time since the Big Bang.\n:lookback_time -> Physical time left to reach the last snapshot.\n:scale_factor  -> Scale factor (only relevant for cosmological simulations).\n:redshift      -> Redshift (only relevant for cosmological simulations).\nannotation::String=\"\": Text to be added into the top left corner of the plot. If left empty, nothing is printed.\ncolorbar::Bool=false: If a colorbar will be added.\ncolorrange::Union{Nothing,Tuple{<:Real,<:Real}}=nothing: Sets the start and end points of the colormap. Use nothing to use the extrema of the values to be plotted.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.densityProfile-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol}","page":"Convenience functions","title":"GalaxyInspector.densityProfile","text":"densityProfile(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot a density profile.\n\nnote: Note\nThis method plots one quantity for several simulations in one figure.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantity::Symbol: Quantity for the y axis. The options are:\n:stellar_area_density    -> Stellar area mass density, up to a radius of FILTER_R.\n:gas_area_density        -> Gas area mass density, up to a radius of FILTER_R.\n:molecular_area_density  -> Molecular hydrogen area mass density, up to a radius of FILTER_R.\n:atomic_area_density     -> Atomic hydrogen area mass density, up to a radius of FILTER_R.\n:ionized_area_density    -> Ionized hydrogen area mass density, up to a radius of FILTER_R.\n:neutral_area_density    -> Neutral hydrogen area mass density, up to a radius of FILTER_R.\n:sfr_area_density        -> Star formation rate area density, up to the last AGE_RESOLUTION_ρ and a radius of FILTER_R.\ncumulative::Bool=false: If the profile will be accumulated or not.\nyscale::Function=identity: Scaling function for the y axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nradius::Unitful.Length=FILTER_R: Radius of the profile.\nn_bins::Int=100: Number of bins.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nsim_labels::Union{Vector{String},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.densityProfile-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Vector{Symbol}}","page":"Convenience functions","title":"GalaxyInspector.densityProfile","text":"densityProfile(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    quantities::Vector{Symbol};\n    <keyword arguments>\n)::Nothing\n\nPlot a density profile.\n\nnote: Note\nThis method plots several quantities for one simulations in one figure.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantities::Vector{Symbol}: Quantities for the y axis. The options are:\n:stellar_area_density    -> Stellar area mass density, up to a radius of FILTER_R.\n:gas_area_density        -> Gas area mass density, up to a radius of FILTER_R.\n:molecular_area_density  -> Molecular hydrogen area mass density, up to a radius of FILTER_R.\n:atomic_area_density     -> Atomic hydrogen area mass density, up to a radius of FILTER_R.\n:ionized_area_density    -> Ionized hydrogen area mass density, up to a radius of FILTER_R.\n:neutral_area_density    -> Neutral hydrogen area mass density, up to a radius of FILTER_R.\n:sfr_area_density        -> Star formation rate area density, up to the last AGE_RESOLUTION_ρ and a radius of FILTER_R.\ncumulative::Bool=false: If the profile will be accumulated or not.\nyscale::Function=identity: Scaling function for the y axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nradius::Unitful.Length=FILTER_R: Radius of the profile.\nn_bins::Int=100: Number of bins.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nsim_labels::Union{Vector{String},Nothing}=string.(quantities): Labels for the plot legend, one per quantity. Set it to nothing if you don't want a legend.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.fitKennicuttBigielResolved-Tuple{String, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.fitKennicuttBigielResolved","text":"fitKennicuttBigielResolved(\n    simulation_path::String,\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot the resolved Kennicutt-Schmidt relation with its linear fit.\n\nArguments\n\nsimulation_path::String}: Path to the simulation directory, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantity::Symbol=:molecular_area_density: Quantity for the x axis. The possibilities are:\n:gas_area_density       -> Gas area mass density, for a radius of FILTER_R. This one will be plotted with the results of Kennicutt (1998).\n:molecular_area_density -> Molecular hydrogen area mass density, for a radius of FILTER_R. This one will be plotted with the results of Bigiel et al. (2008).\n:neutral_area_density   -> Neutral hydrogen area mass density, for a radius of FILTER_R. This one will be plotted with the results of Bigiel et al. (2008).\nx_range::NTuple{2,<:Real}=(-Inf, Inf): Only the data withing this range (for the x coordinates) will be fitted.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nsim_labels::Union{Vector{String},Nothing}=[\"Simulation\"]: Label for the scatter plot. Set it to nothing if you don't want a legend.\n\nReferences\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\nF. Bigiel et al. (2008). THE STAR FORMATION LAW IN NEARBY GALAXIES ON SUB-KPC SCALES. The Astrophysical Journal, 136(6), 2846. doi:10.1088/0004-6256/136/6/2846\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.gasEvolution-Tuple{Vector{String}}","page":"Convenience functions","title":"GalaxyInspector.gasEvolution","text":"gasEvolution(\n    simulation_paths::Vector{String};\n    <keyword arguments>\n)::Nothing\n\nPlot a time series of the gas components. Either their masses or their fractions.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nfractions::Bool=true: If the fractions (default), or the masses, will be plotted.\nslice::IndexType=(:): Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.rotationCurve-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.rotationCurve","text":"rotationCurve(\n    simulation_paths::Vector{String},\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot the galaxy rotation curve of a set of simulations.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nradius::Unitful.Length=FILTER_R: Maximum radial distance for the rotation curve.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nsim_labels::Union{Vector{String},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.scatterDensityMap-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol, Symbol}","page":"Convenience functions","title":"GalaxyInspector.scatterDensityMap","text":"scatterDensityMap(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot two quantities as a density scatter plot (2D histogram).\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nx_quantity::Symbol: Quantity for the x axis. The possibilities are:\n:stellar_mass               -> Stellar mass.\n:gas_mass                   -> Gas mass.\n:dm_mass                    -> Dark matter mass.\n:bh_mass                    -> Black hole mass.\n:molecular_mass             -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass                -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass               -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass               -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction         -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction            -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction           -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction           -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction -> Fraction of molecular hydrogen in the neutral gas.\n:gas_mass_density           -> Gas mass density.\n:gas_number_density         -> Gas number density.\n:molecular_number_density   -> Molecular hydrogen number density.\n:atomic_number_density      -> Atomic hydrogen number density.\n:ionized_number_density     -> Ionized hydrogen number density.\n:neutral_number_density     -> Neutral hydrogen number density.\n:gas_metallicity            -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity        -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance            -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance        -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance    -> Distance of every stellar particle to the origin.\n:gas_radial_distance        -> Distance of every gas cell to the origin.\n:dm_radial_distance         -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance        -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance            -> Projected distance of every gas cell to the origin.\n:dm_xy_distance             -> Projected distance of every dark matter particle to the origin.\n:stellar_circularity        -> Stellar circularity.\n:stellar_vcirc              -> Stellar circular velocity.\n:stellar_vradial            -> Stellar radial speed.\n:stellar_vtangential        -> Stellar tangential speed.\n:stellar_vzstar             -> Stellar speed in the z direction, computed as v_z  sign(z).\n:stellar_age                -> Stellar age.\n:sfr                        -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                       -> The specific star formation rate of the last AGE_RESOLUTION.\n:temperature                -> Gas temperature, as log_10(T    mathrmK).\ny_quantity::Symbol: Quantity for the y axis. The possibilities are:\n:stellar_mass               -> Stellar mass.\n:gas_mass                   -> Gas mass.\n:dm_mass                    -> Dark matter mass.\n:bh_mass                    -> Black hole mass.\n:molecular_mass             -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass                -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass               -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass               -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction         -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction            -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction           -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction           -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction -> Fraction of molecular hydrogen in the neutral gas.\n:gas_mass_density           -> Gas mass density.\n:gas_number_density         -> Gas number density.\n:molecular_number_density   -> Molecular hydrogen number density.\n:atomic_number_density      -> Atomic hydrogen number density.\n:ionized_number_density     -> Ionized hydrogen number density.\n:neutral_number_density     -> Neutral hydrogen number density.\n:gas_metallicity            -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity        -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance            -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance        -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance    -> Distance of every stellar particle to the origin.\n:gas_radial_distance        -> Distance of every gas cell to the origin.\n:dm_radial_distance         -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance        -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance            -> Projected distance of every gas cell to the origin.\n:dm_xy_distance             -> Projected distance of every dark matter particle to the origin.\n:stellar_circularity        -> Stellar circularity.\n:stellar_vcirc              -> Stellar circular velocity.\n:stellar_vradial            -> Stellar radial speed.\n:stellar_vtangential        -> Stellar tangential speed.\n:stellar_vzstar             -> Stellar speed in the z direction, computed as v_z  sign(z).\n:stellar_age                -> Stellar age.\n:sfr                        -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                       -> The specific star formation rate of the last AGE_RESOLUTION.\n:temperature                -> Gas temperature, as log_10(T    mathrmK).\nx_range::Union{NTuple{2,<:Number},Nothing}=nothing: x axis range. If set to nothing, the extrema of the values will be used.\ny_range::Union{NTuple{2,<:Number},Nothing}=nothing: y axis range. If set to nothing, the extrema of the values will be used.\nn_bins::Int=100: Number of bins per side of the square grid.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.scatterPlot-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol, Symbol}","page":"Convenience functions","title":"GalaxyInspector.scatterPlot","text":"scatterPlot(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot two quantities as a scatter plot, one marker for every cell/particle.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nx_quantity::Symbol: Quantity for the x axis. The possibilities are:\n:stellar_mass               -> Stellar mass.\n:gas_mass                   -> Gas mass.\n:dm_mass                    -> Dark matter mass.\n:bh_mass                    -> Black hole mass.\n:molecular_mass             -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass                -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass               -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass               -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction         -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction            -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction           -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction           -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction -> Fraction of molecular hydrogen in the neutral gas.\n:gas_mass_density           -> Gas mass density.\n:gas_number_density         -> Gas number density.\n:molecular_number_density   -> Molecular hydrogen number density.\n:atomic_number_density      -> Atomic hydrogen number density.\n:ionized_number_density     -> Ionized hydrogen number density.\n:neutral_number_density     -> Neutral hydrogen number density.\n:gas_metallicity            -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity        -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance            -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance        -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance    -> Distance of every stellar particle to the origin.\n:gas_radial_distance        -> Distance of every gas cell to the origin.\n:dm_radial_distance         -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance        -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance            -> Projected distance of every gas cell to the origin.\n:dm_xy_distance             -> Projected distance of every dark matter particle to the origin.\n:stellar_circularity        -> Stellar circularity.\n:stellar_vcirc              -> Stellar circular velocity.\n:stellar_vradial            -> Stellar radial speed.\n:stellar_vtangential        -> Stellar tangential speed.\n:stellar_vzstar             -> Stellar speed in the z direction, computed as v_z  sign(z).\n:stellar_age                -> Stellar age.\n:sfr                        -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                       -> The specific star formation rate of the last AGE_RESOLUTION.\n:temperature                -> Gas temperature, as log_10(T    mathrmK).\ny_quantity::Symbol: Quantity for the y axis. The possibilities are:\n:stellar_mass               -> Stellar mass.\n:gas_mass                   -> Gas mass.\n:dm_mass                    -> Dark matter mass.\n:bh_mass                    -> Black hole mass.\n:molecular_mass             -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass                -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass               -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass               -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction         -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction            -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction           -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction           -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction -> Fraction of molecular hydrogen in the neutral gas.\n:gas_mass_density           -> Gas mass density.\n:gas_number_density         -> Gas number density.\n:molecular_number_density   -> Molecular hydrogen number density.\n:atomic_number_density      -> Atomic hydrogen number density.\n:ionized_number_density     -> Ionized hydrogen number density.\n:neutral_number_density     -> Neutral hydrogen number density.\n:gas_metallicity            -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity        -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance            -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance        -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance    -> Distance of every stellar particle to the origin.\n:gas_radial_distance        -> Distance of every gas cell to the origin.\n:dm_radial_distance         -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance        -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance            -> Projected distance of every gas cell to the origin.\n:dm_xy_distance             -> Projected distance of every dark matter particle to the origin.\n:stellar_circularity        -> Stellar circularity.\n:stellar_vcirc              -> Stellar circular velocity.\n:stellar_vradial            -> Stellar radial speed.\n:stellar_vtangential        -> Stellar tangential speed.\n:stellar_vzstar             -> Stellar speed in the z direction, computed as v_z  sign(z).\n:stellar_age                -> Stellar age.\n:sfr                        -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                       -> The specific star formation rate of the last AGE_RESOLUTION.\n:temperature                -> Gas temperature, as log_10(T    mathrmK).\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.sfrTXT-Tuple{Vector{String}, Symbol, Symbol}","page":"Convenience functions","title":"GalaxyInspector.sfrTXT","text":"sfrTXT(\n    simulation_paths::Vector{String},\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot a time series of the data in the sfr.txt file.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nx_quantity::Symbol: Quantity for the x axis. The possibilities are:\n:physical_time -> Physical time since the Big Bang.\n:lookback_time -> Physical time left to reach the last snapshot.\n:scale_factor  -> Scale factor.\n:redshift      -> Redshift.\ny_quantity::Symbol: Quantity for the y axis. The possibilities are:\n:stellar_mass -> Stellar mass.\n:sfr          -> The star formation rate.\nsmooth::Int=0: The result will be smooth out using smooth bins. Set it to 0 if you want no smoothing.\noutput_path::String=\"./\": Path to the output folder.\nsim_labels::Union{Vector{String},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.simulationReport-Tuple{Vector{String}}","page":"Convenience functions","title":"GalaxyInspector.simulationReport","text":"simulationReport(\n    simulation_paths::Vector{String};\n    <keyword arguments>\n)::Nothing\n\nWrite a text file with information about a given simulation\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir. One text file will be printed for each simulation.\noutput_path::String=\"./\": Path to the output folder.\nwarnings::Bool=true: If a warning will be given when there is missing files.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.snapshotReport-Tuple{Vector{String}, Int64}","page":"Convenience functions","title":"GalaxyInspector.snapshotReport","text":"snapshotReport(\n    simulation_paths::Vector{String},\n    slice_n::Int;\n    <keyword arguments>\n)::Nothing\n\nWrite a text file with information about a given snapshot.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir. One text file will be printed for each simulation.\nslice_n::Int: Selects which snapshot to plot, starts at 1 and is independent of the number in the file name. If every snapshot is present, slice_n = filename_number + 1.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be considered in the \"filtered\" section of the report. The options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nhalo_idx::Int=1: Index of the target halo (FoF group). Starts at 1.\nsubhalo_rel_idx::Int=1: Index of the target subhalo (subfind), relative the target halo. Starts at 1.\nwarnings::Bool=true: If a warning will be given when there is missing files.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.stellarCircularity-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.stellarCircularity","text":"stellarCircularity(\n    simulation_paths::Vector{String},\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot a histogram of the stellar circularity.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nrange::NTuple{2,<:Number}=(-2.0, 2.0): Circularity range.\nn_bins::Int=60: Number of bins.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nsim_labels::Union{Vector{String},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.stellarHistory-Tuple{String, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol}","page":"Convenience functions","title":"GalaxyInspector.stellarHistory","text":"stellarHistory(\n    simulation_path::String,\n    slice::IndexType,\n    quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot the evolution of a given stellar quantity using the stellar ages at a given instant in time.\n\nnote: Note\nThis method plots one quantity for several morphological components of the same simulation in one figure.\n\nArguments\n\nsimulation_path::String: Path to the simulation directory, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantity::Symbol: Quantity for the y axis. The options are:\n:sfr          -> The star formation rate.\n:ssfr         -> The specific star formation rate.\n:stellar_mass -> Stellar mass.\ncomponents::Vector{Symbol}=[:disk, :bulge]: Target morphological components.\nn_bins::Int=20: Number of bins (time intervals).\nhalo_idx::Int: Index of the target halo (FoF group). Starts at 1.\nsubhalo_rel_idx::Int: Index of the target subhalo (subfind), relative the target halo. Starts at 1. If set to 0, all subhalos of the target halo are included.\noutput_path::String=\"./\": Path to the output folder.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.stellarHistory-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol}","page":"Convenience functions","title":"GalaxyInspector.stellarHistory","text":"stellarHistory(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot the evolution of a given stellar quantity using the stellar ages at a given instant in time.\n\nnote: Note\nThis method plots one quantity for several simulations in one figure.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantity::Symbol: Quantity for the y axis. The options are:\n:sfr          -> The star formation rate.\n:ssfr         -> The specific star formation rate.\n:stellar_mass -> Stellar mass.\nn_bins::Int=20: Number of bins (time intervals).\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nsim_labels::Union{Vector{String},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.timeSeries-Tuple{Vector{String}, Symbol, Symbol}","page":"Convenience functions","title":"GalaxyInspector.timeSeries","text":"timeSeries(\n    simulation_paths::Vector{String},\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot a time series.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nx_quantity::Symbol: Quantity for the x axis. The possibilities are:\n:stellar_mass           -> Stellar mass.\n:gas_mass               -> Gas mass.\n:dm_mass                -> Dark matter mass.\n:bh_mass                -> Black hole mass.\n:stellar_number         -> Number of stellar particles.\n:gas_number             -> Number of gas cells.\n:dm_number              -> Number of dark matter particles.\n:bh_number              -> Number of black hole particles.\n:molecular_mass         -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass            -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass           -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass           -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction     -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction        -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction       -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction       -> Gas mass fraction of neutral hydrogen.\n:stellar_area_density   -> Stellar area mass density, for a radius of FILTER_R.\n:gas_area_density       -> Gas area mass density, for a radius of FILTER_R.\n:molecular_area_density -> Molecular hydrogen area mass density, for a radius of FILTER_R.\n:atomic_area_density    -> Atomic hydrogen area mass density, for a radius of FILTER_R.\n:ionized_area_density   -> Ionized hydrogen area mass density, for a radius of FILTER_R.\n:neutral_area_density   -> Neutral hydrogen area mass density, for a radius of FILTER_R.\n:sfr_area_density       -> Star formation rate area density, for the last AGE_RESOLUTION_ρ and a radius of FILTER_R.\n:gas_metallicity        -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity    -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance        -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance    -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_specific_am    -> Norm of the stellar specific angular momentum.\n:gas_specific_am        -> Norm of the gas specific angular momentum.\n:dm_specific_am         -> Norm of the dark matter specific angular momentum.\n:sfr                    -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                   -> The specific star formation rate of the last AGE_RESOLUTION.\n:scale_factor           -> Scale factor.\n:redshift               -> Redshift.\n:physical_time          -> Physical time since the Big Bang.\n:lookback_time          -> Physical time left to reach the last snapshot.\ny_quantity::Symbol: Quantity for the y axis. The possibilities are:\n:stellar_mass           -> Stellar mass.\n:gas_mass               -> Gas mass.\n:dm_mass                -> Dark matter mass.\n:bh_mass                -> Black hole mass.\n:stellar_number         -> Number of stellar particles.\n:gas_number             -> Number of gas cells.\n:dm_number              -> Number of dark matter particles.\n:bh_number              -> Number of black hole particles.\n:molecular_mass         -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass            -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass           -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass           -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction     -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction        -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction       -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction       -> Gas mass fraction of neutral hydrogen.\n:stellar_area_density   -> Stellar area mass density, for a radius of FILTER_R.\n:gas_area_density       -> Gas area mass density, for a radius of FILTER_R.\n:molecular_area_density -> Molecular hydrogen area mass density, for a radius of FILTER_R.\n:atomic_area_density    -> Atomic hydrogen area mass density, for a radius of FILTER_R.\n:ionized_area_density   -> Ionized hydrogen area mass density, for a radius of FILTER_R.\n:neutral_area_density   -> Neutral hydrogen area mass density, for a radius of FILTER_R.\n:sfr_area_density       -> Star formation rate area density, for the last AGE_RESOLUTION_ρ and a radius of FILTER_R.\n:gas_metallicity        -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity    -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance        -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance    -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_specific_am    -> Norm of the stellar specific angular momentum.\n:gas_specific_am        -> Norm of the gas specific angular momentum.\n:dm_specific_am         -> Norm of the dark matter specific angular momentum.\n:sfr                    -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                   -> The specific star formation rate of the last AGE_RESOLUTION.\n:scale_factor           -> Scale factor.\n:redshift               -> Redshift.\n:physical_time          -> Physical time since the Big Bang.\n:lookback_time          -> Physical time left to reach the last snapshot.\nslice::IndexType=(:): Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nsim_labels::Union{Vector{String},Nothing}=nothing: Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\n\n\n\n\n\n","category":"method"},{"location":"api/convenience/#GalaxyInspector.velocityProfile-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol}","page":"Convenience functions","title":"GalaxyInspector.velocityProfile","text":"velocityProfile(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot a density profile.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\ncomponent::Symbol: Which component will be calculated. The options are:\n:stellar_vradial     -> Stellar radial speed (v_r).\n:stellar_vtangential -> Stellar tangential speed (v_theta).\n:stellar_vzstar      -> Stellar speed in the z direction, computed as v_z  sign(z).\nyscale::Function=identity: Scaling function for the y axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nsim_labels::Union{Vector{String},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\n\n\n\n\n\n","category":"method"},{"location":"api/data_analysis/#Data-analysis-functions","page":"Data analysis functions","title":"Data analysis functions","text":"","category":"section"},{"location":"api/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"These functions read the data generated by the data acquisition functions, and produce the values that will be plotted.","category":"page"},{"location":"api/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"None of these functions are exported.","category":"page"},{"location":"api/data_analysis/#Signature-for-the-[snapshotPlot](@ref)-function.","page":"Data analysis functions","title":"Signature for the snapshotPlot function.","text":"","category":"section"},{"location":"api/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"A data analysis functions for snapshotPlot must take a dictionary with the following shape:","category":"page"},{"location":"api/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":":sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...","category":"page"},{"location":"api/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"and return one or more vectors or matrices with the processed data. It should return nothing if the input data has some problem that prevents computation (e.g. is empty).","category":"page"},{"location":"api/data_analysis/#Expected-signature:","page":"Data analysis functions","title":"Expected signature:","text":"","category":"section"},{"location":"api/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"  da_function(data_dict, args...; kwargs...) -> (processed_data, ...)","category":"page"},{"location":"api/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"where:","category":"page"},{"location":"api/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"data_dict::Dict\nprocessed_data::Union{VecOrMat{<:Number},Nothing}","category":"page"},{"location":"api/data_analysis/#Signature-for-the-[timeSeriesPlot](@ref)-function.","page":"Data analysis functions","title":"Signature for the timeSeriesPlot function.","text":"","category":"section"},{"location":"api/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"A data analysis functions for timeSeriesPlot must take a Simulation struct, and return two vectors. It should return nothing if the input data has some problem that prevents computation (e.g. is empty).","category":"page"},{"location":"api/data_analysis/#Expected-signature:-2","page":"Data analysis functions","title":"Expected signature:","text":"","category":"section"},{"location":"api/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"  da_function(sim_data, args...; kw_args...) -> (processed_data_x, processed_data_y)","category":"page"},{"location":"api/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"where:","category":"page"},{"location":"api/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"sim_data::Simulation, see Simulation\nprocessed_data_x::Vector{<:Number}\nprocessed_data_y::Vector{<:Number}","category":"page"},{"location":"api/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"","category":"page"},{"location":"api/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"Modules = [GalaxyInspector]\nPages   = [\"data_analysis.jl\"]","category":"page"},{"location":"api/data_analysis/#GalaxyInspector.daCPUtxt-Tuple{GalaxyInspector.Simulation, String, Symbol, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daCPUtxt","text":"daCPUtxt(\n    sim_data::Simulation,\n    target::String,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::NTuple{2,Vector{<:Number}}\n\nCompute the evolution of a measured quantity in the cpu.txt file, for a given target process.\n\nArguments\n\nsim_data::Simulation: Information about the simulation in a Simulation object.\ntarget::String: Target process.\nx_quantity::Symbol: Quantity for the x axis. The possibilities are:\n:time_step              -> Time step.\n:physical_time          -> Physical time since the Big Bang.\n:clock_time_s           -> Clock time duration of the time step in seconds.\n:clock_time_percent     -> Clock time duration of the time step as a percentage.\n:tot_clock_time_s       -> Total clock time in seconds.\n:tot_clock_time_percent -> Total clock time as a percentage.\ny_quantity::Symbol: Quantity for the y axis. The possibilities are:\n:time_step              -> Time step.\n:physical_time          -> Physical time since the Big Bang.\n:clock_time_s           -> Clock time duration of the time step in seconds.\n:clock_time_percent     -> Clock time duration of the time step as a percentage.\n:tot_clock_time_s       -> Total clock time in seconds.\n:tot_clock_time_percent -> Total clock time as a percentage.\nsmooth::Int=0: The result will be smooth out using smooth bins. Set it to 0 if you want no smoothing.\nwarnings::Bool=true: If a warning will be given when the target process is missing.\n\nReturns\n\nA Tuple with two elements:\nA Vector with the time series of x_quantity.\nA Vector with the time series of y_quantity.\n\n\n\n\n\n","category":"method"},{"location":"api/data_analysis/#GalaxyInspector.daCircularityHistogram-Tuple{Dict, GalaxyInspector.LinearGrid}","page":"Data analysis functions","title":"GalaxyInspector.daCircularityHistogram","text":"daCircularityHistogram(\n    data_dict::Dict,\n    grid::LinearGrid,\n)::Union{NTuple{2,Vector{Float64}},Nothing}\n\nCompute a histogram of the stellar circularity, normalized to the maximum number of counts.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::LinearGrid: Linear grid.\n\nReturns\n\nA tuple with two elements:\nA vector with the circularity of each bin.\nA vector with the counts, normalized to the maximum value.\n\n\n\n\n\n","category":"method"},{"location":"api/data_analysis/#GalaxyInspector.daDensity2DHistogram-Tuple{Dict, GalaxyInspector.SquareGrid, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daDensity2DHistogram","text":"daDensity2DHistogram(\n    data_dict::Dict,\n    grid::SquareGrid,\n    quantity::Symbol;\n    <keyword arguments>\n)::Tuple{Vector{<:Unitful.Length},Vector{<:Unitful.Length},Matrix{Float64}}\n\nCompute a 2D density histogram.\n\nnote: Note\nBy default, mathrmM_odot  kpc^-2 is used as unit of density, so the output will be log_10(rho    mathrmM_odot  kpc^-2).\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::SquareGrid: Square grid.\nquantity::Symbol: For which quantity the density will be calculated. The possibilities are:\n:stellar_mass   -> Stellar mass.\n:gas_mass       -> Gas mass.\n:dm_mass        -> Dark matter mass.\n:bh_mass        -> Black hole mass.\n:molecular_mass -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass    -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass   -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass   -> Neutral hydrogen (mathrmHI + H_2) mass.\nprojection_plane::Symbol=:xy: To which plane the cells/particles will be projected. The options are :xy, :xz, and :yz.\nsmooth::Bool=false: If the results will be smooth out using the cubicSplineKernel kernel.\nneighbors::Int=18: Number of neighbors for the 2D smoothing (only relevant if smooth = true). The default value comes form Price2010: N_2D = pi  (zeta  eta)^2, where we use zeta = 2 and eta = 12.\nsmoothing_length::Union{Unitful.Length,Nothing}=nothing: Smoothing length. If set to nothing, the mean value of the \"SOFT\" block will be used. If the \"SOFT\" block is no available, the mean of the cell characteristic size will be used.\nprint_range::Bool=false: Print an info block detailing the logarithmic density range.\n\nReturns\n\nA tuple with three elements:\nA vector with the x coordinates of the grid.\nA vector with the y coordinates of the grid.\nA matrix with the values of density in each bin.\n\n\n\n\n\n","category":"method"},{"location":"api/data_analysis/#GalaxyInspector.daEvolution-Tuple{GalaxyInspector.Simulation, Symbol, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daEvolution","text":"daEvolution(\n    sim_data::Simulation,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::NTuple{2,Vector{<:Number}}\n\nCompute the time series of two quantities.\n\nArguments\n\nsim_data::Simulation: Information about the simulation in a Simulation object.\nx_quantity::Symbol: Quantity for the x axis. The possibilities are:\n:stellar_mass           -> Stellar mass.\n:gas_mass               -> Gas mass.\n:dm_mass                -> Dark matter mass.\n:bh_mass                -> Black hole mass.\n:stellar_number         -> Number of stellar particles.\n:gas_number             -> Number of gas cells.\n:dm_number              -> Number of dark matter particles.\n:bh_number              -> Number of black hole particles.\n:molecular_mass         -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass            -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass           -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass           -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction     -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction        -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction       -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction       -> Gas mass fraction of neutral hydrogen.\n:stellar_area_density   -> Stellar area mass density, for a radius of FILTER_R.\n:gas_area_density       -> Gas area mass density, for a radius of FILTER_R.\n:molecular_area_density -> Molecular hydrogen area mass density, for a radius of FILTER_R.\n:atomic_area_density    -> Atomic hydrogen area mass density, for a radius of FILTER_R.\n:ionized_area_density   -> Ionized hydrogen area mass density, for a radius of FILTER_R.\n:neutral_area_density   -> Neutral hydrogen area mass density, for a radius of FILTER_R.\n:sfr_area_density       -> Star formation rate area density, for the last AGE_RESOLUTION_ρ and a radius of FILTER_R.\n:gas_metallicity        -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity    -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance        -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance    -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_specific_am    -> Norm of the stellar specific angular momentum.\n:gas_specific_am        -> Norm of the gas specific angular momentum.\n:dm_specific_am         -> Norm of the dark matter specific angular momentum.\n:sfr                    -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                   -> The specific star formation rate of the last AGE_RESOLUTION.\n:scale_factor           -> Scale factor.\n:redshift               -> Redshift.\n:physical_time          -> Physical time since the Big Bang.\n:lookback_time          -> Physical time left to reach the last snapshot.\ny_quantity::Symbol: Quantity for the y axis. The possibilities are:\n:stellar_mass           -> Stellar mass.\n:gas_mass               -> Gas mass.\n:dm_mass                -> Dark matter mass.\n:bh_mass                -> Black hole mass.\n:stellar_number         -> Number of stellar particles.\n:gas_number             -> Number of gas cells.\n:dm_number              -> Number of dark matter particles.\n:bh_number              -> Number of black hole particles.\n:molecular_mass         -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass            -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass           -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass           -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction     -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction        -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction       -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction       -> Gas mass fraction of neutral hydrogen.\n:stellar_area_density   -> Stellar area mass density, for a radius of FILTER_R.\n:gas_area_density       -> Gas area mass density, for a radius of FILTER_R.\n:molecular_area_density -> Molecular hydrogen area mass density, for a radius of FILTER_R.\n:atomic_area_density    -> Atomic hydrogen area mass density, for a radius of FILTER_R.\n:ionized_area_density   -> Ionized hydrogen area mass density, for a radius of FILTER_R.\n:neutral_area_density   -> Neutral hydrogen area mass density, for a radius of FILTER_R.\n:sfr_area_density       -> Star formation rate area density, for the last AGE_RESOLUTION_ρ and a radius of FILTER_R.\n:gas_metallicity        -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity    -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance        -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance    -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_specific_am    -> Norm of the stellar specific angular momentum.\n:gas_specific_am        -> Norm of the gas specific angular momentum.\n:dm_specific_am         -> Norm of the dark matter specific angular momentum.\n:sfr                    -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                   -> The specific star formation rate of the last AGE_RESOLUTION.\n:scale_factor           -> Scale factor.\n:redshift               -> Redshift.\n:physical_time          -> Physical time since the Big Bang.\n:lookback_time          -> Physical time left to reach the last snapshot.\nfilter_mode::Symbol=:all: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nsmooth::Int=0: The result of integrateQty will be smooth out using smooth bins. Set it to 0 if you want no smoothing.\nscaling::Function=identity: Function to scale the x-axis (only relevant if smooth != 0). The bins will be computed accordingly. The options are the scaling functions accepted by Makie.jl: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nwarnings::Bool=true: If a warning will be given when there is missing data.\n\nReturns\n\nA Tuple with two elements:\nA Vector with the time series of x_quantity.\nA Vector with the time series of y_quantity.\n\n\n\n\n\n","category":"method"},{"location":"api/data_analysis/#GalaxyInspector.daIntegrateGalaxy-Tuple{Dict, Symbol, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daIntegrateGalaxy","text":"daIntegrateGalaxy(\n    data_dict::Dict,\n    x_quantity::Symbol,\n    y_quantity::Symbol,\n)::NTuple{2,Vector{<:Number}}\n\nCompute two global quantities of the simulation.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nx_quantity::Symbol: Quantity for the x axis. The possibilities are:\n:stellar_mass           -> Stellar mass.\n:gas_mass               -> Gas mass.\n:dm_mass                -> Dark matter mass.\n:bh_mass                -> Black hole mass.\n:stellar_number         -> Number of stellar particles.\n:gas_number             -> Number of gas cells.\n:dm_number              -> Number of dark matter particles.\n:bh_number              -> Number of black hole particles.\n:molecular_mass         -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass            -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass           -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass           -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction     -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction        -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction       -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction       -> Gas mass fraction of neutral hydrogen.\n:stellar_area_density   -> Stellar area mass density, for a radius of FILTER_R.\n:gas_area_density       -> Gas area mass density, for a radius of FILTER_R.\n:molecular_area_density -> Molecular hydrogen area mass density, for a radius of FILTER_R.\n:atomic_area_density    -> Atomic hydrogen area mass density, for a radius of FILTER_R.\n:ionized_area_density   -> Ionized hydrogen area mass density, for a radius of FILTER_R.\n:neutral_area_density   -> Neutral hydrogen area mass density, for a radius of FILTER_R.\n:sfr_area_density       -> Star formation rate area density, for the last AGE_RESOLUTION_ρ and a radius of FILTER_R.\n:gas_metallicity        -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity    -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance        -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance    -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_specific_am    -> Norm of the stellar specific angular momentum.\n:gas_specific_am        -> Norm of the gas specific angular momentum.\n:dm_specific_am         -> Norm of the dark matter specific angular momentum.\n:sfr                    -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                   -> The specific star formation rate of the last AGE_RESOLUTION.\n:scale_factor           -> Scale factor.\n:redshift               -> Redshift.\n:physical_time          -> Physical time since the Big Bang.\n:lookback_time          -> Physical time left to reach the last snapshot.\ny_quantity::Symbol: Quantity for the y axis. The possibilities are:\n:stellar_mass           -> Stellar mass.\n:gas_mass               -> Gas mass.\n:dm_mass                -> Dark matter mass.\n:bh_mass                -> Black hole mass.\n:stellar_number         -> Number of stellar particles.\n:gas_number             -> Number of gas cells.\n:dm_number              -> Number of dark matter particles.\n:bh_number              -> Number of black hole particles.\n:molecular_mass         -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass            -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass           -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass           -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction     -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction        -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction       -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction       -> Gas mass fraction of neutral hydrogen.\n:stellar_area_density   -> Stellar area mass density, for a radius of FILTER_R.\n:gas_area_density       -> Gas area mass density, for a radius of FILTER_R.\n:molecular_area_density -> Molecular hydrogen area mass density, for a radius of FILTER_R.\n:atomic_area_density    -> Atomic hydrogen area mass density, for a radius of FILTER_R.\n:ionized_area_density   -> Ionized hydrogen area mass density, for a radius of FILTER_R.\n:neutral_area_density   -> Neutral hydrogen area mass density, for a radius of FILTER_R.\n:sfr_area_density       -> Star formation rate area density, for the last AGE_RESOLUTION_ρ and a radius of FILTER_R.\n:gas_metallicity        -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity    -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance        -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance    -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_specific_am    -> Norm of the stellar specific angular momentum.\n:gas_specific_am        -> Norm of the gas specific angular momentum.\n:dm_specific_am         -> Norm of the dark matter specific angular momentum.\n:sfr                    -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                   -> The specific star formation rate of the last AGE_RESOLUTION.\n:scale_factor           -> Scale factor.\n:redshift               -> Redshift.\n:physical_time          -> Physical time since the Big Bang.\n:lookback_time          -> Physical time left to reach the last snapshot.\n\nReturns\n\nA tuple with two elements:\nA single element vector with the value of x_quantity.\nA single element vector with the value of y_quantity.\n\n\n\n\n\n","category":"method"},{"location":"api/data_analysis/#GalaxyInspector.daKennicuttSchmidt-Tuple{Dict, GalaxyInspector.CircularGrid}","page":"Data analysis functions","title":"GalaxyInspector.daKennicuttSchmidt","text":"daKennicuttSchmidt(\n    data_dict::Dict,\n    grid::CircularGrid,\n)::Union{Tuple{Vector{<:SurfaceDensity},Vector{<:MassFlowDensity}},Nothing}\n\nCompute the gas mass and SFR surface densities, used in the Kennicutt-Schmidt law.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::CircularGrid: Circular grid.\n\nReturns\n\nA tuple with two elements:\nA vector with the gas mass surface density of each ring.\nA vector with the SFR surface density of each ring.\nIt returns nothing if any of the necessary quantities are missing.\n\nReferences\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\n\n\n\n\n","category":"method"},{"location":"api/data_analysis/#GalaxyInspector.daKennicuttSchmidtLaw-Tuple{Dict, GalaxyInspector.CircularGrid, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daKennicuttSchmidtLaw","text":"function daKennicuttSchmidtLaw(\n    data_dict::Dict,\n    grid::CircularGrid,\n    quantity::Symbol,\n)::Union{Tuple{Vector{<:SurfaceDensity},Vector{<:MassFlowDensity}},Nothing}\n\nCompute the (molecular or neutral) gas mass and SFR surface densities, used in the Kennicutt-Schmidt law.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::CircularGrid: Circular grid.\nquantity::Symbol: Quantity for the x axis. The possibilities are:\n:molecular_area_density -> Molecular hydrogen area mass density.\n:neutral_area_density   -> Neutral hydrogen area mass density.\n\nReturns\n\nA tuple with two elements:\nA vector with the gas mass surface density of each ring.\nA vector with the SFR surface density of each ring.\nIt returns nothing if any of the necessary quantities are missing.\n\n\n\n\n\n","category":"method"},{"location":"api/data_analysis/#GalaxyInspector.daMolla2015-Tuple{Dict, GalaxyInspector.CircularGrid, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daMolla2015","text":"daMolla2015(\n    data_dict::Dict,\n    grid::CircularGrid,\n    quantity::Symbol,\n)::Union{\n    Tuple{\n        Vector{<:Unitful.Length},\n        <:Union{Vector{<:SurfaceDensity},Vector{<:MassFlowDensity},Vector{Float64}}\n    },\n    Nothing,\n}\n\nCompute a profile for the Milky Way, compatible with the experimental data in Mollá et al. (2015).\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::CircularGrid: Circular grid.\nquantity::Symbol: Quantity for the y axis. The options are:\n:stellar_area_density   -> Stellar area mass density.\n:molecular_area_density -> Molecular hydrogen area mass density.\n:atomic_area_density    -> Atomic hydrogen area mass density.\n:sfr_area_density       -> Star formation rate area density, for the last AGE_RESOLUTION_ρ.\n:O_stellar_abundance    -> Stellar abundance of oxygen, as 12 + log_10(mathrmO    H).\n:N_stellar_abundance    -> Stellar abundance of nitrogen, as 12 + log_10(mathrmN    H).\n:C_stellar_abundance    -> Stellar abundance of carbon, as 12 + log_10(mathrmC    H).\n\nReturns\n\nA tuple with two elements:\nA vector with the position of each ring.\nA vector with the quantity area density of each ring.\nIt returns nothing if any of the necessary quantities are missing.\n\nReferences\n\nM. Mollá et al. (2015). Galactic chemical evolution: stellar yields and the initial mass function. Monthly Notices of the Royal Astronomical Society 451(4), 3693–3708. doi:10.1093/mnras/stv1102\n\n\n\n\n\n","category":"method"},{"location":"api/data_analysis/#GalaxyInspector.daProfile-Tuple{Dict, GalaxyInspector.CircularGrid, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daProfile","text":"daProfile(\n    data_dict::Dict,\n    grid::CircularGrid,\n    quantity::Symbol;\n    <keyword arguments>\n)::Union{Tuple{Vector{<:Unitful.Length},Vector{<:Number}},Nothing}\n\nCompute a profile.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::CircularGrid: Circular grid.\nquantity::Symbol: Quantity for the y axis. The options are:\n:stellar_area_density   -> Stellar area mass density, for a radius of FILTER_R.\n:gas_area_density       -> Gas area mass density, for a radius of FILTER_R.\n:molecular_area_density -> Molecular hydrogen area mass density, for a radius of FILTER_R.\n:atomic_area_density    -> Atomic hydrogen area mass density, for a radius of FILTER_R.\n:ionized_area_density   -> Ionized hydrogen area mass density, for a radius of FILTER_R.\n:neutral_area_density   -> Neutral hydrogen area mass density, for a radius of FILTER_R.\n:sfr_area_density       -> Star formation rate area density, for the last AGE_RESOLUTION_ρ and a radius of FILTER_R.\n:stellar_vcirc          -> Stellar circular velocity, upto a radius of FILTER_R.\n:stellar_vradial        -> Stellar radial speed, upto a radius of FILTER_R.\n:stellar_vtangential    -> Stellar tangential speed, upto a radius of FILTER_R.\nflat::Bool=true: If the profile will be 2D, using rings, or 3D, using spherical shells.\ntotal::Bool=true: If the sum (default) or the mean of quantity will be computed for each bin.\ncumulative::Bool=false: If the profile will be accumulated or not.\ndensity::Bool=true: If the profile will be of the density of quantity.\n\nReturns\n\nA tuple with two elements:\nA vector with the position of each ring.\nA vector with the quantity area density of each ring.\nIt returns nothing if any of the necessary quantities are missing.\n\n\n\n\n\n","category":"method"},{"location":"api/data_analysis/#GalaxyInspector.daRotationCurve-Tuple{Dict, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}","page":"Data analysis functions","title":"GalaxyInspector.daRotationCurve","text":"daRotationCurve(\n    data_dict::Dict,\n    R::Unitful.Length,\n)::Tuple{Vector{<:Unitful.Length},Vector{<:Unitful.Velocity}}\n\nCompute a rotation curve.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nR::Unitful.Length: Radius for the profile.\n\nReturns\n\nA tuple with two elements:\nA vector with the distances to each star.\nA vector with the circular velocity of each star.\n\n\n\n\n\n","category":"method"},{"location":"api/data_analysis/#GalaxyInspector.daSFRtxt-Tuple{GalaxyInspector.Simulation, Symbol, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daSFRtxt","text":"daSFRtxt(\n    sim_data::Simulation,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::NTuple{2,Vector{<:Number}}\n\nCompute the stellar mass or SFR evolution using the data in the sfr.txt file.\n\nArguments\n\nsim_data::Simulation: Information about the simulation in a Simulation object.\nx_quantity::Symbol: Quantity for the x axis. The possibilities are:\n:scale_factor  -> Scale factor.\n:redshift      -> Redshift.\n:physical_time -> Physical time since the Big Bang.\n:lookback_time -> Physical time left to reach the last snapshot.\ny_quantity::Symbol: Quantity for the y axis. The possibilities are:\n:stellar_mass -> Stellar mass.\n:sfr          -> The star formation rate.\nsmooth::Int=0: The result will be smooth out using smooth bins. Set it to 0 if you want no smoothing.\nwarnings::Bool=true: If a warning will be given when trying to use the scale factor or the redshift in the x axis for a non-cosmological simulation.\n\nReturns\n\nA Tuple with two elements:\nA Vector with the time series of x_quantity.\nA Vector with the time series of y_quantity.\n\n\n\n\n\n","category":"method"},{"location":"api/data_analysis/#GalaxyInspector.daScatterDensity-Tuple{Dict, Symbol, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daScatterDensity","text":"daScatterDensity(\n    data_dict::Dict,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::Tuple{Vector{<:Number},Vector{<:Number},Matrix{Float64}}\n\nCompute a 2D histogram.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nx_quantity::Symbol: Quantity for the x axis. The possibilities are:\n:stellar_mass               -> Stellar mass.\n:gas_mass                   -> Gas mass.\n:dm_mass                    -> Dark matter mass.\n:bh_mass                    -> Black hole mass.\n:molecular_mass             -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass                -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass               -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass               -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction         -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction            -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction           -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction           -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction -> Fraction of molecular hydrogen in the neutral gas.\n:gas_mass_density           -> Gas mass density.\n:gas_number_density         -> Gas number density.\n:molecular_number_density   -> Molecular hydrogen number density.\n:atomic_number_density      -> Atomic hydrogen number density.\n:ionized_number_density     -> Ionized hydrogen number density.\n:neutral_number_density     -> Neutral hydrogen number density.\n:gas_metallicity            -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity        -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance            -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance        -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance    -> Distance of every stellar particle to the origin.\n:gas_radial_distance        -> Distance of every gas cell to the origin.\n:dm_radial_distance         -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance        -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance            -> Projected distance of every gas cell to the origin.\n:dm_xy_distance             -> Projected distance of every dark matter particle to the origin.\n:stellar_circularity        -> Stellar circularity.\n:stellar_vcirc              -> Stellar circular velocity.\n:stellar_vradial            -> Stellar radial speed.\n:stellar_vtangential        -> Stellar tangential speed.\n:stellar_vzstar             -> Stellar speed in the z direction, computed as v_z  sign(z).\n:stellar_age                -> Stellar age.\n:sfr                        -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                       -> The specific star formation rate of the last AGE_RESOLUTION.\n:temperature                -> Gas temperature, as log_10(T    mathrmK).\ny_quantity::Symbol: Quantity for the y axis. The possibilities are:\n:stellar_mass               -> Stellar mass.\n:gas_mass                   -> Gas mass.\n:dm_mass                    -> Dark matter mass.\n:bh_mass                    -> Black hole mass.\n:molecular_mass             -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass                -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass               -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass               -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction         -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction            -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction           -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction           -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction -> Fraction of molecular hydrogen in the neutral gas.\n:gas_mass_density           -> Gas mass density.\n:gas_number_density         -> Gas number density.\n:molecular_number_density   -> Molecular hydrogen number density.\n:atomic_number_density      -> Atomic hydrogen number density.\n:ionized_number_density     -> Ionized hydrogen number density.\n:neutral_number_density     -> Neutral hydrogen number density.\n:gas_metallicity            -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity        -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance            -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance        -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance    -> Distance of every stellar particle to the origin.\n:gas_radial_distance        -> Distance of every gas cell to the origin.\n:dm_radial_distance         -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance        -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance            -> Projected distance of every gas cell to the origin.\n:dm_xy_distance             -> Projected distance of every dark matter particle to the origin.\n:stellar_circularity        -> Stellar circularity.\n:stellar_vcirc              -> Stellar circular velocity.\n:stellar_vradial            -> Stellar radial speed.\n:stellar_vtangential        -> Stellar tangential speed.\n:stellar_vzstar             -> Stellar speed in the z direction, computed as v_z  sign(z).\n:stellar_age                -> Stellar age.\n:sfr                        -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                       -> The specific star formation rate of the last AGE_RESOLUTION.\n:temperature                -> Gas temperature, as log_10(T    mathrmK).\nx_range::Union{NTuple{2,<:Number},Nothing}=nothing: x axis range for the histogram grid. If set to nothing, the extrema of the values will be used.\ny_range::Union{NTuple{2,<:Number},Nothing}=nothing: y axis range for the histogram grid. If set to nothing, the extrema of the values will be used.\nx_log::Union{Unitful.Units,Nothing}=nothing: Set to the desired unit of x_quantity, if you want to use log10(x_quantity) for the x axis.\ny_log::Union{Unitful.Units,Nothing}=nothing: Set to the desired unit of y_quantity, if you want to use log10(y_quantity) for the y axis.\nn_bins::Int=100: Number of bins per side of the grid.\n\nReturns\n\nA tuple with three elements:\nA vector with the x coordinates of the grid.\nA vector with the y coordinates of the grid.\nA matrix with the counts.\n\n\n\n\n\n","category":"method"},{"location":"api/data_analysis/#GalaxyInspector.daScatterGalaxy-Tuple{Dict, Symbol, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daScatterGalaxy","text":"daScatterGalaxy(\n    data_dict::Dict,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::NTuple{2,Vector{<:Number}}\n\nCompute two quantities for every cell/particle in the simulation.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nx_quantity::Symbol: Quantity for the x axis. The possibilities are:\n:stellar_mass               -> Stellar mass.\n:gas_mass                   -> Gas mass.\n:dm_mass                    -> Dark matter mass.\n:bh_mass                    -> Black hole mass.\n:molecular_mass             -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass                -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass               -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass               -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction         -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction            -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction           -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction           -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction -> Fraction of molecular hydrogen in the neutral gas.\n:gas_mass_density           -> Gas mass density.\n:gas_number_density         -> Gas number density.\n:molecular_number_density   -> Molecular hydrogen number density.\n:atomic_number_density      -> Atomic hydrogen number density.\n:ionized_number_density     -> Ionized hydrogen number density.\n:neutral_number_density     -> Neutral hydrogen number density.\n:gas_metallicity            -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity        -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance            -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance        -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance    -> Distance of every stellar particle to the origin.\n:gas_radial_distance        -> Distance of every gas cell to the origin.\n:dm_radial_distance         -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance        -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance            -> Projected distance of every gas cell to the origin.\n:dm_xy_distance             -> Projected distance of every dark matter particle to the origin.\n:stellar_circularity        -> Stellar circularity.\n:stellar_vcirc              -> Stellar circular velocity.\n:stellar_vradial            -> Stellar radial speed.\n:stellar_vtangential        -> Stellar tangential speed.\n:stellar_vzstar             -> Stellar speed in the z direction, computed as v_z  sign(z).\n:stellar_age                -> Stellar age.\n:sfr                        -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                       -> The specific star formation rate of the last AGE_RESOLUTION.\n:temperature                -> Gas temperature, as log_10(T    mathrmK).\ny_quantity::Symbol: Quantity for the y axis. The possibilities are:\n:stellar_mass               -> Stellar mass.\n:gas_mass                   -> Gas mass.\n:dm_mass                    -> Dark matter mass.\n:bh_mass                    -> Black hole mass.\n:molecular_mass             -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass                -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass               -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass               -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction         -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction            -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction           -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction           -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction -> Fraction of molecular hydrogen in the neutral gas.\n:gas_mass_density           -> Gas mass density.\n:gas_number_density         -> Gas number density.\n:molecular_number_density   -> Molecular hydrogen number density.\n:atomic_number_density      -> Atomic hydrogen number density.\n:ionized_number_density     -> Ionized hydrogen number density.\n:neutral_number_density     -> Neutral hydrogen number density.\n:gas_metallicity            -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity        -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance            -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance        -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance    -> Distance of every stellar particle to the origin.\n:gas_radial_distance        -> Distance of every gas cell to the origin.\n:dm_radial_distance         -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance        -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance            -> Projected distance of every gas cell to the origin.\n:dm_xy_distance             -> Projected distance of every dark matter particle to the origin.\n:stellar_circularity        -> Stellar circularity.\n:stellar_vcirc              -> Stellar circular velocity.\n:stellar_vradial            -> Stellar radial speed.\n:stellar_vtangential        -> Stellar tangential speed.\n:stellar_vzstar             -> Stellar speed in the z direction, computed as v_z  sign(z).\n:stellar_age                -> Stellar age.\n:sfr                        -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                       -> The specific star formation rate of the last AGE_RESOLUTION.\n:temperature                -> Gas temperature, as log_10(T    mathrmK).\nfilter_function::Function=filterNothing: A functions with the signature:\nfilter_function(data_dict) -> indices\nwhere\n+ `data_dict::Dict`: A dictionary with the following shape:\n\n    * `:sim_data`          -> ::Simulation (see [`Simulation`](@ref)).\n    * `:snap_data`         -> ::Snapshot (see [`Snapshot`](@ref)).\n    * `:gc_data`           -> ::GroupCatalog (see [`GroupCatalog`](@ref)).\n    * `cell/particle type` -> (`block` -> data of `block`, `block` -> data of `block`, ...).\n    * `cell/particle type` -> (`block` -> data of `block`, `block` -> data of `block`, ...).\n    * `cell/particle type` -> (`block` -> data of `block`, `block` -> data of `block`, ...).\n    * ...\n    * `groupcat type`      -> (`block` -> data of `block`, `block` -> data of `block`, ...).\n    * `groupcat type`      -> (`block` -> data of `block`, `block` -> data of `block`, ...).\n    * `groupcat type`      -> (`block` -> data of `block`, `block` -> data of `block`, ...).\n    * ...\n\n+ `indices::Dict`: A dictionary with the following shape:\n\n    * `cell/particle type` -> idxs::IndexType\n    * `cell/particle type` -> idxs::IndexType\n    * `cell/particle type` -> idxs::IndexType\n    * ...\n\nReturns\n\nA tuple with two elements:\nA vector with the values of x_quantity.\nA vector with the values of y_quantity.\n\n\n\n\n\n","category":"method"},{"location":"api/data_analysis/#GalaxyInspector.daStellarHistory-Tuple{Dict}","page":"Data analysis functions","title":"GalaxyInspector.daStellarHistory","text":"daStellarHistory(\n    data_dict::Dict;\n    <keyword arguments>\n)::Union{Tuple{Vector{<:Unitful.Time},Vector{<:Number}},Nothing}\n\nCompute the evolution of a given stellar quantity using the stellar ages at a given instant in time.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nquantity::Symbol=:sfr: Which quantity will be calculated. The options are:\n:sfr          -> The star formation rate.\n:ssfr         -> The specific star formation rate.\n:stellar_mass -> Stellar mass.\nn_bins::Int=50: Number of bins (time intervals).\nfilter_function::Function=filterNothing: A functions with the signature:\nfilter_function(data_dict) -> indices\nwhere\n+ `data_dict::Dict`: A dictionary with the following shape:\n\n    * `:sim_data`          -> ::Simulation (see [`Simulation`](@ref)).\n    * `:snap_data`         -> ::Snapshot (see [`Snapshot`](@ref)).\n    * `:gc_data`           -> ::GroupCatalog (see [`GroupCatalog`](@ref)).\n    * `cell/particle type` -> (`block` -> data of `block`, `block` -> data of `block`, ...).\n    * `cell/particle type` -> (`block` -> data of `block`, `block` -> data of `block`, ...).\n    * `cell/particle type` -> (`block` -> data of `block`, `block` -> data of `block`, ...).\n    * ...\n    * `groupcat type`      -> (`block` -> data of `block`, `block` -> data of `block`, ...).\n    * `groupcat type`      -> (`block` -> data of `block`, `block` -> data of `block`, ...).\n    * `groupcat type`      -> (`block` -> data of `block`, `block` -> data of `block`, ...).\n    * ...\n\n+ `indices::Dict`: A dictionary with the following shape:\n\n    * `cell/particle type` -> idxs::IndexType\n    * `cell/particle type` -> idxs::IndexType\n    * `cell/particle type` -> idxs::IndexType\n    * ...\n\nReturns\n\nA tuple with two elements:\nA vector with the physical time of each bin.\nA vector with the values of quantity for each bin.\n\n\n\n\n\n","category":"method"},{"location":"api/data_analysis/#GalaxyInspector.daVelocityField-Tuple{Dict, GalaxyInspector.SquareGrid, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daVelocityField","text":"daVelocityField(\n    data_dict::Dict,\n    grid::SquareGrid,\n    type_symbol::Symbol;\n    <keyword arguments>\n)::Tuple{\n    Vector{<:Unitful.Length},\n    Vector{<:Unitful.Length},\n    Matrix{<:Number},\n    Matrix{<:Number},\n}\n\nCompute a 2D mean velocity field.\n\nnote: Note\nIf the stellar masses and velocities can be found in data_dict, the velocity field is boosted with respect to the stellar center of mass.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::SquareGrid: Square grid.\ntype_symbol::Symbol: For which cell/particle type the velocity field will be computed. The possibilities are the keys of PARTICLE_INDEX.\nprojection_plane::Symbol=:xy: To which plane the cells/particles will be projected. The options are :xy, :xz, and :yz.\nvelocity_units::Bool=false: If the velocity will be given as Unitful.Quantity or as Flot64 (in which case the underlying unit is km * s^-1).\n\nReturns\n\nA tuple with four elements:\nA vector with the x coordinates of the grid.\nA vector with the y coordinates of the grid.\nA matrix with the mean velocity in the x direction for each bin.\nA matrix with the mean velocity in the y direction for each bin.\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"","category":"page"},{"location":"api/arepo_utilities/#Arepo-utilities","page":"Arepo utilities","title":"Arepo utilities","text":"","category":"section"},{"location":"api/arepo_utilities/","page":"Arepo utilities","title":"Arepo utilities","text":"These functions are only used internally, and depend on the particulars of the Arepo code (e.g. units).","category":"page"},{"location":"api/arepo_utilities/","page":"Arepo utilities","title":"Arepo utilities","text":"Here you can find the lowest level functions that compute physical quantities (angular momentum, gas temperature, etc.).","category":"page"},{"location":"api/arepo_utilities/","page":"Arepo utilities","title":"Arepo utilities","text":"None of these functions are exported.","category":"page"},{"location":"api/arepo_utilities/","page":"Arepo utilities","title":"Arepo utilities","text":"","category":"page"},{"location":"api/arepo_utilities/","page":"Arepo utilities","title":"Arepo utilities","text":"Modules = [GalaxyInspector]\nPages   = [\"arepo_utilities.jl\"]","category":"page"},{"location":"api/arepo_utilities/#GalaxyInspector.addRequest-Tuple{Dict{Symbol, Vector{String}}, Dict{Symbol, Vector{String}}}","page":"Arepo utilities","title":"GalaxyInspector.addRequest","text":"addRequest(\n    request::Dict{Symbol,Vector{String}},\n    addition::Dict{Symbol,Vector{String}},\n)::Dict{Symbol,Vector{String}}\n\nAdd the blocks in addition to request, only for the types already present in request.\n\nArguments\n\nrequest::Dict{Symbol,Vector{String}}: The request dictionary for readSnapshot.\naddition::Dict{Symbol,Vector{String}}: Request dictionary with the blocks to be added, only for the types already present in request.\n\nReturns\n\nA new dictionary with all the requests.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeAMRotationMatrix-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Matrix{<:Union{Unitful.Quantity{T, 𝐋 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋 𝐓^-1, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Arepo utilities","title":"GalaxyInspector.computeAMRotationMatrix","text":"computeAMRotationMatrix(\n    positions::Matrix{<:Unitful.Length},\n    velocities::Matrix{<:Unitful.Velocity},\n    masses::Vector{<:Unitful.Mass},\n)::Union{Matrix{Float64},UniformScaling{Bool}}\n\nCompute the rotation matrix that will turn the total angular momentum into the z axis; when view as an active (alibi) trasformation.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nvelocities::Matrix{<:Unitful.Velocity}: Velocities of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Mass of every cell/particle.\n\nReturns\n\nThe rotation matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeAngularMomentum-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Matrix{<:Union{Unitful.Quantity{T, 𝐋 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋 𝐓^-1, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Arepo utilities","title":"GalaxyInspector.computeAngularMomentum","text":"computeAngularMomentum(\n    positions::Matrix{<:Unitful.Length},\n    velocities::Matrix{<:Unitful.Velocity},\n    masses::Vector{<:Unitful.Mass},\n)::Vector{Vector{<:AngularMomentum}}\n\nCompute the angular momentum of each cell/particle, with respect to the origin.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nvelocities::Matrix{<:Unitful.Velocity}: Velocities of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Mass of every cell/particle.\n\nReturns\n\nThe angular momentum of each cell/particle.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeAtomicMass-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.computeAtomicMass","text":"computeAtomicMass(data_dict::Dict)::Vector{<:Unitful.Mass}\n\nCompute the atomic hydrogen mass of every gas cell in data.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nThe mass of atomic hydrogen in every gas cell.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeCenter-Tuple{Dict, Symbol}","page":"Arepo utilities","title":"GalaxyInspector.computeCenter","text":"computeCenter(data_dict::Dict, cm_type::Symbol)::Vector{<:Unitful.Length}\n\nCompute a characteristic center of mass for the system.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ncm_type::Symbol: It can be:\n:global_cm  -> Center of mass of the whole system.\n:stellar_cm -> Stellar center of mass.\n\nReturns\n\nThe specified center of mass.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeCenter-Tuple{Dict, Tuple{Int64, Int64}}","page":"Arepo utilities","title":"GalaxyInspector.computeCenter","text":"computeCenter(data_dict::Dict, subfind_idx::NTuple{2,Int})::Vector{<:Unitful.Length}\n\nRead the position of the potencial minimum for a given halo or subhalo.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nsubfind_idx::NTuple{2,Int}: Tuple with two elements:\nIndex of the target halo (FoF group). Starts at 1.\nIndex of the target subhalo (subfind), relative the target halo. Starts at 1. If set to 0, the potencial minimum of the whole halo with index halo_idx is returned.\n\nReturns\n\nThe specified potencial minimum.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeCenterOfMass-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Arepo utilities","title":"GalaxyInspector.computeCenterOfMass","text":"computeCenterOfMass(\n    positions::Matrix{<:Unitful.Length},\n    mass::Vector{<:Unitful.Mass},\n)::Vector{<:Unitful.Length}\n\nCompute the center of mass of a group of cells/particles.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Masses of the cells/particles.\n\nReturns\n\nThe center of mass.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeDistance-Tuple{Matrix{<:Number}}","page":"Arepo utilities","title":"GalaxyInspector.computeDistance","text":"computeDistance(\n    positions::Matrix{<:Number};\n    <keyword arguments>\n)::Vector{<:Number}\n\nCompute the distance of a group of points to center.\n\nArguments\n\npositions::Matrix{<:Number}: Positions of the points. Each column is a point and each row a dimension.\ncenter::Union{Vector{<:Number},Nothing}=nothing: Origin used to compute the distances. If set to nothing, 0 is used.\n\nReturns\n\nThe distance of every point to center.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeElementMass-Tuple{Dict, Symbol, Symbol}","page":"Arepo utilities","title":"GalaxyInspector.computeElementMass","text":"computeElementMass(\n    data_dict::Dict,\n    type_symbol::Symbol,\n    element::Symbol,\n)::Vector{<:Unitful.Mass}\n\nCompute the total mass of element in each cell/particle.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ntype_symbol::Symbol: For which cell/particle type the element mass will be calculated. The possibilities are :stars and :gas.\nelement::Symbol: Target element. The possibilities are the keys of ELEMENT_INDEX.\n\nReturns\n\nThe total mass of element in each cell/particle.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeGlobalAMRotationMatrix-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.computeGlobalAMRotationMatrix","text":"computeGlobalAMRotationMatrix(data_dict::Dict)::Union{Matrix{Float64},UniformScaling{Bool}}\n\nCompute the rotation matrix that will turn the total angular momentum, of the whole system in data, into the z axis; when view as an active (alibi) trasformation.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nThe rotation matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeGlobalAbundance-Tuple{Dict, Symbol, Symbol}","page":"Arepo utilities","title":"GalaxyInspector.computeGlobalAbundance","text":"computeAbundance(\n    data_dict::Dict,\n    type_symbol::Symbol,\n    element::Symbol;\n    <keyword arguments>\n)::Float64\n\nCompute the total abundance of a given element, as n_X  n_H where n_X is the number of atoms of element mathrmX and n_H the number of hydrogen atoms.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ntype_symbol::Symbol: For which cell/particle type the abundance will be calculated. The possibilities are :stars and :gas.\nelement::Symbol: Target element. The possibilities are the keys of ELEMENT_INDEX.\nsolar::Bool=false: If the result will be normalized to the solar abundance or not.\n\nReturns\n\nThe total abundance of element.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeGlobalAngularMomentum-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.computeGlobalAngularMomentum","text":"computeGlobalAngularMomentum(data_dict::Dict; <keyword arguments>)::Vector{<:Number}\n\nCompute the total angular momentum with respect to the origin of the whole system in data.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nnormal::Bool=true: If the result will be normalized.\n\nReturns\n\nThe angular momentum.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeGlobalCenterOfMass-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.computeGlobalCenterOfMass","text":"computeGlobalCenterOfMass(data_dict::Dict)::Vector{<:Unitful.Length}\n\nCompute the center of mass of the whole system in data.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nThe center of mass.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeGlobalSpinParameter-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.computeGlobalSpinParameter","text":"computeGlobalSpinParameter(data_dict::Dict; <keyword arguments>)::Float64\n\nCompute the spin parameter of the whole system in data.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nR::Unitful.Length=FILTER_R: Radius.\n\nReturns\n\nThe spin parameter.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeInertiaTensor-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Arepo utilities","title":"GalaxyInspector.computeInertiaTensor","text":"computeInertiaTensor(\n    positions::Matrix{<:Unitful.Length},\n    masses::Vector{<:Unitful.Mass},\n)::Matrix{Float64}\n\nCompute the inertia tensor of a group of cells/particles.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Masses of the cells/particles.\n\nReturns\n\nThe inertia tensor.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeIonizedMass-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.computeIonizedMass","text":"computeIonizedMass(data_dict::Dict)::Vector{<:Unitful.Mass}\n\nCompute the ionized hydrogen mass of every gas cell in data.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nThe mass of ionized hydrogen in every gas cell.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeMassRadius-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Arepo utilities","title":"GalaxyInspector.computeMassRadius","text":"computeMassRadius(\n    positions::Matrix{<:Unitful.Length},\n    masses::Vector{<:Unitful.Mass};\n    <keyword arguments>\n)::Unitful.Length\n\nCompute the radius containing percet% of the total mass.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Masses of the cells/particles.\npercent::Float64=90.0: Target percentage of the total mass.\n\nReturns\n\nThe radius containing percet of the total mass.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeMetalMass-Tuple{Dict, Symbol}","page":"Arepo utilities","title":"GalaxyInspector.computeMetalMass","text":"computeMetalMass(data_dict::Dict, type_symbol::Symbol)::Vector{<:Unitful.Mass}\n\nCompute the total mass of metals (elements above helium) in each cell/particle.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ntype_symbol::Symbol: For which cell/particle type the metal mass will be calculated. The possibilities are :stars and :gas.\n\nReturns\n\nThe total metal mass in each cell/particle.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeMolecularMass-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.computeMolecularMass","text":"computeMolecularMass(data_dict::Dict)::Vector{<:Unitful.Mass}\n\nCompute the molecular hydrogen mass of every gas cell in data.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nThe mass of molecular hydrogen in every gas cell.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeNeutralMass-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.computeNeutralMass","text":"computeNeutralMass(data_dict::Dict)::Vector{<:Unitful.Mass}\n\nCompute the neutral hydrogen mass of every gas cell in data.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nThe mass of neutral hydrogen in every gas cell.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computePARotationMatrix-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Matrix{<:Union{Unitful.Quantity{T, 𝐋 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋 𝐓^-1, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Arepo utilities","title":"GalaxyInspector.computePARotationMatrix","text":"computePARotationMatrix(\n    positions::Matrix{<:Unitful.Length},\n    velocities::Matrix{<:Unitful.Velocity},\n    masses::Vector{<:Unitful.Mass},\n)::Union{Matrix{Float64},UniformScaling{Bool}}\n\nCompute the rotation matrix that will turn the pricipal axis into the new coordinate system; when view as an pasive (alias) trasformation.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nvelocities::Matrix{<:Unitful.Velocity}: Velocities of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Mass of every cell/particle.\n\nReturns\n\nThe rotation matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeProfile-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Vector{<:Number}, GalaxyInspector.CircularGrid}","page":"Arepo utilities","title":"GalaxyInspector.computeProfile","text":"computeProfile(\n    positions::Matrix{<:Unitful.Length},\n    quantity::Vector{<:Number},\n    grid::CircularGrid;\n    <keyword arguments>\n)::Vector{<:Number}\n\nCompute a profile.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nquantity::Vector{<:Number}: The profile will be of this quantity.\ngrid::CircularGrid: Circular grid.\nnorm_values::Vector{<:Number}=[]: Values to normalize quantity.\nflat::Bool=true: If the profile will be 2D, using rings, or 3D, using spherical shells.\ntotal::Bool=false: If the sum (default) or the mean of quantity will be computed for each bin.\ncumulative::Bool=false: If the profile will be accumulated or not.\ndensity::Bool=false: If the profile will be of the density of quantity.\n\nReturns\n\nVector with the values of the profile.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeSFR-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.computeSFR","text":"function computeSFR(\n    data_dict::Dict;\n    <keyword arguments>\n)::Vector{<:Unitful.MassFlow}\n\nCompute the star formation rate of each stellar particle in data.\n\nFor stellar particles younger that age_resol, the SFR is its mass divided by age_resol. It is defined as 0 for older particles.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nage_resol::Unitful.Time=AGE_RESOLUTION: Age resolution for the SFR.\n\nReturns\n\nThe star formation rate of each stellar particle.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeSpinParameter-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Matrix{<:Union{Unitful.Quantity{T, 𝐋 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋 𝐓^-1, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Arepo utilities","title":"GalaxyInspector.computeSpinParameter","text":"computeSpinParameter(\n    positions::Matrix{<:Unitful.Length},\n    masses::Vector{<:Unitful.Mass},\n    velocities::Matrix{<:Unitful.Velocity};\n    <keyword arguments>\n)::Float64\n\nCompute the spin parameter for a system of cells/particles, with respect to the origin.\n\nThe spin parameter was originally defined by Peebles (1969) as,\n\nlambda = fracJ  sqrtEG  M^52  \n\nwhere J is the norm of the total angular momentum, M the total mass, G the gravitational constant, and\n\nE = E_P + E_k  \n\nwhere E_P is the total potencial energy and E_k is the total kinetic energy (including thermal energy of the gas).\n\nDue to the computational complexity of calculating E_P for a large group of particles, Bullock et al. (2001) proposed an alternative definition of the spin parameter,\n\nlambda = fracJsqrt2  M  R  V  \n\nwhere J is the norm of the total angular momentum inside a sphere of radius R containing mass M, and\n\nV = sqrtfracG  MR  \n\nis the circular velocity.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nvelocities::Matrix{<:Unitful.Velocity}: Velocities of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Mass of every cell/particle.\nR::Unitful.Length=FILTER_R: Radius.\n\nReturns\n\nThe spin parameter.\n\nReferences\n\nP. J. E. Peebles (1969). Origin of the Angular Momentum of Galaxies. Astrophysical Journal, 155, 393. doi:10.1086/149876\n\nJ. S. Bullock et al. (2001). A Universal Angular Momentum Profile for Galactic Halos. The Astrophysical Journal, 555(1), 240. doi:10.1086/321477\n\nJ. Zjupa et al. (2017). Angular momentum properties of haloes and their baryon content in the Illustris simulation. Monthly Notices of the Royal Astronomical Society, 466(2), 1625–1647. doi:10.1093/mnras/stw2945\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeStellarAge-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.computeStellarAge","text":"computeStellarAge(data_dict::Dict)::Vector{<:Unitful.Time}\n\nCompute the age of the stars.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nThe stellar ages.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeStellarCircularity-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.computeStellarCircularity","text":"computeStellarCircularity(data_dict::Dict)::Vector{Float64}\n\nCompute the circularity of each stellar particle, with respect to the origin and the z direction [0, 0, 1].\n\nThe circularity of a star is,\n\nepsilon = j_z  j_mathrmcirc  \n\nwhere j_z is the z component of its specific angular momentum, and j_mathrmcirc is the specific angular momentum of a circular orbit,\n\nj_mathrmcirc = r  v_mathrmcirc = sqrtmathrmG  r  M(r)  \n\nwhere r is the radial distance of the star, and M(r) is the total mass within a sphere of radius r.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nThe circularity epsilon of each star.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeStellarVcirc-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.computeStellarVcirc","text":"computeStellarVcirc(\n    data_dict::Dict,\n)::Tuple{Vector{<:Unitful.Length},Vector{<:Unitful.Velocity}}\n\nCompute the circular velocity of each stellar particle, with respect to the origin.\n\nThe circular velocity of a star is,\n\nv_mathrmcirc = sqrtfracmathrmG  M(r)r  \n\nwhere r is the radial distance of the star, and M(r) is the total mass within a sphere of radius r.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nA tuple with two elements:\nA vector with the radial distance of each star to the origin.\nA vector with the circular velocity of each star.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeStellarVcm-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.computeStellarVcm","text":"computeStellarVcm(data_dict::Dict)::Vector{<:Unitful.Velocity}\n\nCompute the velocity of the stellar center of mass.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nThe velocity of the stellar center of mass.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeStellarVpolar-Tuple{Dict, Symbol}","page":"Arepo utilities","title":"GalaxyInspector.computeStellarVpolar","text":"computeStellarVpolar(data_dict::Dict, component::Symbol)::Vector{<:Unitful.Velocity}\n\nCompute the cylindrical components of the velocity, mathbfvecv = v_r  mathbfe_r + v_theta  mathbfe_theta + v_z  mathbfe_z.\n\nThe speed in the radial direction expressed in Cartesian coordinates is\n\nv_r = fracx  v_x + y  v_ysqrt(x^2 + y^2)  \n\nin the tangential direction is\n\nv_tau = fracx  v_y - y  v_xsqrt(x^2 + y^2)  \n\nand the speed in the z direction will be computes as\n\nv^*_z = v_z  sign(z)  \n\nin order to distinguish between inflows (v^*_z  0) and outflows (v^*_z  0).\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ncomponent::Symbol: Which component will be calculated. The options are:\n:radial     -> Stellar radial speed (v_r).\n:tangential -> Stellar tangential speed (v_theta).\n:zstar      -> Stellar speed in the z direction, computed as v_z  sign(z).\n\nReturns\n\nThe chosen cylindricall component of the velocity.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeTemperature-Tuple{Matrix{Float32}, Vector{<:Union{Unitful.Quantity{T, 𝐋^2 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐓^-2, U}} where {L, S}} where {T, U}}, Vector{Float32}}","page":"Arepo utilities","title":"GalaxyInspector.computeTemperature","text":"computeTemperature(\n    metals::Matrix{Float32},\n    internal_energy::Vector{<:SpecificEnergy},\n    electron_fraction::Vector{Float32},\n)::Vector{<:Unitful.Temperature}\n\nCompute the gas temperature of a group of gas cells.\n\nArguments\n\nmetals::Matrix{Float32}: Matrix with the mass content for every tracked element. Each row is an element, and each column a cell.\ninternal_energy::Vector{<:SpecificEnergy}: Specific internal energy of every gas cell.\nelectron_fraction::Vector{Float32}: Number fraction of electrons in every gas cell.\n\nReturns\n\nThe temperature of each gas cell.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeTime-Tuple{Real, GalaxyInspector.SnapshotHeader}","page":"Arepo utilities","title":"GalaxyInspector.computeTime","text":"computeTime(a::Real, header::SnapshotHeader; <keyword arguments>)::Unitful.Time\n\nCompute the physical time corresponding to the scale factor a.\n\nTo get the physical time t from the scale factor a, one does the integral:\n\nt = frac1H_0 int_0^a fracmathrmdaa  sqrtmathcalE(a)  \n\nwhere\n\nmathcalE(a) = Omega_Lambda + Omega_m  a^-3 + Omega_r  a^-4 + Omega_K  a^-2  \n\nArguments\n\na::Real: Scale factor.\nheader::SnapshotHeader: A header of the simulation, containing the cosmological parameters.\na0::Float64=0.0: Initial scale factor.\n\nReturns\n\nThe physical time.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeTime-Tuple{Vector{<:Real}, GalaxyInspector.SnapshotHeader}","page":"Arepo utilities","title":"GalaxyInspector.computeTime","text":"computeTime(\n    scale_factors::Vector{<:Real},\n    header::SnapshotHeader;\n    <keyword arguments>\n)::Vector{<:Unitful.Time}\n\nCompute the physical time corresponding to each of the scale_factors.\n\nTo get the physical time t from the scale factor a, one does the integral:\n\nt = frac1H_0 int_0^a fracmathrmdaa  sqrtmathcalE(a)  \n\nwhere\n\nmathcalE(a) = Omega_Lambda + Omega_m  a^-3 + Omega_r  a^-4 + Omega_K  a^-2  \n\nArguments\n\nscale_factors::Vector{<:Real}: Scale factors.\nheader::SnapshotHeader: A header of the simulation, containing the cosmological parameters.\na0::Float64=0.0: Initial scale factor.\n\nReturns\n\nA vector with the physical times.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeTimeTicks-Tuple{Vector{<:Union{Missing, String}}}","page":"Arepo utilities","title":"GalaxyInspector.computeTimeTicks","text":"computeTimeTicks(\n    paths::Vector{<:Union{Missing,String}},\n)::Tuple{Vector{Float64},Vector{Float64},Vector{<:Unitful.Time},Vector{<:Unitful.Time}}\n\nCompute the different times stamps associated with each snapshot in paths.\n\nArguments\n\npaths::Vector{<:Union{Missing,String}}: Paths to the snapshots.\n\nReturns\n\nA tuple with four elements:\nA vector with the scale factors.\nA vector with the redshifts.\nA vector with the physical times (physical time since the Big Bang).\nA vector with the lookback times (physical time left to reach the last snapshot).\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.computeTotalAngularMomentum-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Matrix{<:Union{Unitful.Quantity{T, 𝐋 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋 𝐓^-1, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Arepo utilities","title":"GalaxyInspector.computeTotalAngularMomentum","text":"computeTotalAngularMomentum(\n    positions::Matrix{<:Unitful.Length},\n    velocities::Matrix{<:Unitful.Velocity},\n    masses::Vector{<:Unitful.Mass};\n    <keyword arguments>\n)::Vector{<:Number}\n\nCompute the total angular momentum of a group of cells/particles, with respect to the origin.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nvelocities::Matrix{<:Unitful.Velocity}: Velocities of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Mass of every cell/particle.\nnormal::Bool=true: If the result will be normalized.\n\nReturns\n\nThe angular momentum.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.countStars-Tuple{String}","page":"Arepo utilities","title":"GalaxyInspector.countStars","text":"countStars(path::String)::Int\n\nCount the number of stars in a snapshot, excluding wind particles.\n\nArguments\n\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nThe number of stars.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.energyIntegrand-Tuple{Real, GalaxyInspector.SnapshotHeader}","page":"Arepo utilities","title":"GalaxyInspector.energyIntegrand","text":"energyIntegrand(a::Real, header::SnapshotHeader)::Float64\n\nThe integrand of the integral that converts the scale factor into physical time:\n\nfrac1HsqrtmathcalE  \n\nwhere\n\nmathcalE = Omega_Lambda + (1 - Omega_Lambda - Omega_m)  a^-2 + Omega_m  a^-3  \n\nH = H_0  a  \n\nArguments\n\na::Real: Scale factor.\nheader::SnapshotHeader: Header of the relevant snapshot file.\n\nReturns\n\nThe integrand evaluated at a, in mathrmGyr.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.filterCircularity-Tuple{Dict, Float64, Float64}","page":"Arepo utilities","title":"GalaxyInspector.filterCircularity","text":"filterCircularity(data_dict::Dict, l_ϵ::Float64, h_ϵ::Float64)::Dict{Symbol,IndexType}\n\nFilter out stellar particles with circularity outside the range [l_ϵ, h_ϵ].\n\nArguments\n\ndata::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nl_ϵ::Float64: Minimum circularity.\nh_ϵ::Float64: Maximum circularity.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.filterComponentinSubhalo-Tuple{Dict, Symbol}","page":"Arepo utilities","title":"GalaxyInspector.filterComponentinSubhalo","text":"filterComponentinSubhalo(\n    data_dict::Dict,\n    component::Symbol;\n    <keyword arguments>\n)::Dict{Symbol,IndexType}\n\nFilter out stellar particles that do not belong to the given morphological component, based on a circularity criteria.\n\nArguments\n\ndata::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ncomponent::Symbol: Target component. It can be:\n:disk  -> Stellar particles with a circularity larger than 0.7.\n:bulge -> Stellar particles with a circularity smaller than 0.7.\nhalo_idx::Int: Index of the target halo (FoF group). Starts at 1.\nsubhalo_rel_idx::Int: Index of the target subhalo (subfind), relative the target halo. Starts at 1. If set to 0, all subhalos of the target halo are included.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.filterData!-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.filterData!","text":"filterData!(data_dict::Dict; <keyword arguments>)::Nothing\n\nFilter data_dict using the indices provided by filter_function.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nfilter_function::Function=filterNothing: A functions with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.filterData-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.filterData","text":"filterData(data_dict::Dict; <keyword arguments>)::Dict\n\nReturna filtered copy of data_dict using the indices provided by filter_function.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nfilter_function::Function=filterNothing: A functions with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nThe filtered data.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.filterHotGas-Tuple{Dict, Union{Unitful.Quantity{T, 𝚯, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝚯, U}} where {L, S}} where {T, U}}","page":"Arepo utilities","title":"GalaxyInspector.filterHotGas","text":"filterHotGas(data_dict::Dict, max_temp::Unitful.Temperature)::Dict{Symbol,IndexType}\n\nFilter out gas cells hotter than max_temp.\n\nArguments\n\ndata::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nmax_temp::Unitful.Temperature: Maximum gas temperature.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.filterMetallicity-Tuple{Dict, Float64, Float64}","page":"Arepo utilities","title":"GalaxyInspector.filterMetallicity","text":"filterMetallicity(data_dict::Dict, l_Z::Float64, h_Z::Float64)::Dict{Symbol,IndexType}\n\nFilter out gas cells and stellar particles with metallicity outside the range [l_Z, h_Z].\n\nArguments\n\ndata::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nl_Z::Float64: Minimum metallicity.\nh_Z::Float64: Maximum metallicity.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.filterNothing-Tuple","page":"Arepo utilities","title":"GalaxyInspector.filterNothing","text":"Default filter function that does not filter any cells/particles.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.filterSubhalo-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.filterSubhalo","text":"filterSubhalo(\n    data_dict::Dict;\n    <keyword arguments>\n)::Dict{Symbol,IndexType}\n\nFilter out cells/particles that do not belong to a given halo and subhalo.\n\nArguments\n\ndata::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nhalo_idx::Int: Index of the target halo (FoF group). Starts at 1.\nsubhalo_rel_idx::Int: Index of the target subhalo (subfind), relative the target halo. Starts at 1. If set to 0, all subhalos of the target halo are included.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.filterWithin-Tuple{Dict, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Vararg{Any}}","page":"Arepo utilities","title":"GalaxyInspector.filterWithin","text":"filterWithin(data_dict::Dict, r::Unitful.Length, origin...)::Dict{Symbol,IndexType}\n\nFilter out the cell/particles outside a sphere of radius r.\n\nArguments\n\ndata::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nr::Unitful.Length: Radius of the sphere.\norigin: It can be any number and type of argument compatible with the second to last arguments of a computeCenter method.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.filterZinSubhalo-Tuple{Dict, Float64, Float64}","page":"Arepo utilities","title":"GalaxyInspector.filterZinSubhalo","text":"filterZinSubhalo(\n    data_dict::Dict,\n    l_Z::Float64,\n    h_Z::Float64;\n    <keyword arguments>\n)::Dict{Symbol,IndexType}\n\nFilter out gas cells and stellar particles with metallicity outside the range [l_Z, h_Z], and every cell/particle that does not belong to a given halo and subhalo.\n\nArguments\n\ndata::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nl_Z::Float64: Minimum metallicity.\nh_Z::Float64: Maximum metallicity.\nhalo_idx::Int: Index of the target halo (FoF group). Starts at 1.\nsubhalo_rel_idx::Int: Index of the target subhalo (subfind), relative the target halo. Starts at 1. If set to 0, all subhalos of the target halo are included.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.findQtyExtrema-Tuple{String, Int64, Symbol, String}","page":"Arepo utilities","title":"GalaxyInspector.findQtyExtrema","text":"findQtyExtrema(\n    simulation_path::String,\n    slice_n::Int,\n    type_symbol::Symbol,\n    block::String;\n    <keyword arguments>\n)::NTuple{2,<:Number}\n\nCompute the minimum and maximum values of block.\n\nArguments\n\nsimulation_path::String: Path to the simulation directory, set in the code variable OutputDir.\nslice_n::Int: Selects which snapshot to plot, starts at 1 and is independent of the number in the file name. If every snapshot is present, slice_n = filename_number + 1. If set to a negative number, the values in the whole simulation will be compared.\ntype_symbol::Symbol: Cell/particle type. The possibilities are the keys of PARTICLE_INDEX.\nblock::String: Target block. The possibilities are the keys of QUANTITIES.\nf::Function=identity: A functions with the signature:\nf(data) -> values\nwhere\ndata::VecOrMat{<:Number}: Data returned by getBlock.\nvalues::Vector{<:Number}: A vector with the values to be compared.\nwarnings::Bool=true: If a warning will be given when there is missing data.\n\nReturns\n\nTuple with the minimum and maximum values.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.findRealStars-Tuple{String}","page":"Arepo utilities","title":"GalaxyInspector.findRealStars","text":"findRealStars(path::String)::Vector{Int}\n\nFind the indices of the stars in a snapshot, excluding wind particles.\n\nArguments\n\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nA vector with the indices of the stars.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.formatError-Tuple{Number, Number}","page":"Arepo utilities","title":"GalaxyInspector.formatError","text":"formatError(q_mean::Number, q_error::Number)::NTuple{2,<:Number}\n\nNicely format a magnitude with uncertainty.\n\nIt follows the traditional rules for error presentation: the error has only one significant digit, unless such digit is a one, in which case two significant digits are used. The mean will have as many digits as to match the last significant position of the error. An error equal to 0 will leave the mean unchanged.\n\nArguments\n\nq_mean::Number: Mean value.\nq_error::Number: Error value. It must be positive.\n\nReturns\n\nA tuple with the formatted mean and error values.\n\nExamples\n\njulia> formatError(69.42069, 0.038796)\n(69.42, 0.04)\n\njulia> formatError(69.42069, 0.018796)\n(69.421, 0.019)\n\njulia> formatError(15.42, 0.00004)\n(15.42, 4.0e-5)\n\njulia> formatError(69.42069, 0.0)\n(69.42069, 0.0)\n\njulia> formatError(69.42069, 93.4)\n(70.0, 90.0)\n\njulia> formatError(69.42069, 123.4)\n(70.0, 120.0)\n\njulia> formatError(15.42069, 16.4)\n(15.0, 16.0)\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.getLabel-Tuple{AbstractString, Int64, Unitful.Units}","page":"Arepo utilities","title":"GalaxyInspector.getLabel","text":"getLabel(\n    label::AbstractString,\n    factor::Int,\n    unit::Unitful.Units;\n    <keyword arguments>\n)::AbstractString\n\nConstruct an axis label.\n\nArguments\n\nlabel::AbstractString: Variable name.\nfactor::Int: Exponential factor to scale down the units. If different from 0, a term of the form 10^factor will be added to the label.\nunit::Unitful.Units: Unit of the axis.\nlatex::Bool=true: If the output will be a LaTeXString, or a plain String.\n\nReturns\n\nThe LaTeXString or String: \"label [10^factor unit]\". If label is \"\", an empty string is returned. The factor term only appears if factor != 0, the unit term only appears if unit != Unitful.NoUnits, and the brackets only appears if there are a factor and/or a unit term.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.getUnitLabel-Tuple{Int64, Unitful.Units}","page":"Arepo utilities","title":"GalaxyInspector.getUnitLabel","text":"getUnitLabel(factor::Int, unit::Unitful.Units; <keyword arguments>)::AbstractString\n\nConstruct the unit part of an axis label.\n\nArguments\n\nfactor::Int: Exponential factor to scale down the units. If different from 0, a term of the form 10^factor will be added to the label.\nunit::Unitful.Units: Unit of the axis.\nlatex::Bool=true: If the output will be a LaTeXString, or a plain String.\n\nReturns\n\nThe LaTeXString or String: \"10^factor unit\". The factor term only appears if factor != 0, the unit term only appears if unit != Unitful.NoUnits.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.groupcatTypes-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.groupcatTypes","text":"groupcatTypes(data::Dict)::Vector{Symbol}\n\nFind which group catalog data types are part of the keys of data.\n\nArguments\n\ndata::Dict: A dictionary.\n\nReturns\n\nA vector with the group catalog data types.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.integrateQty-Tuple{Dict, Symbol}","page":"Arepo utilities","title":"GalaxyInspector.integrateQty","text":"integrateQty(data::Dict, quantity::Symbol)::Number\n\nCompute an integrated quantity for the whole system in data.\n\nArguments\n\ndata::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nquantity::Symbol: The possibilities are:\n:stellar_mass           -> Stellar mass.\n:gas_mass               -> Gas mass.\n:dm_mass                -> Dark matter mass.\n:bh_mass                -> Black hole mass.\n:stellar_number         -> Number of stellar particles.\n:gas_number             -> Number of gas cells.\n:dm_number              -> Number of dark matter particles.\n:bh_number              -> Number of black hole particles.\n:molecular_mass         -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass            -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass           -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass           -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction     -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction        -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction       -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction       -> Gas mass fraction of neutral hydrogen.\n:stellar_area_density   -> Stellar area mass density, for a radius of FILTER_R.\n:gas_area_density       -> Gas area mass density, for a radius of FILTER_R.\n:molecular_area_density -> Molecular hydrogen area mass density, for a radius of FILTER_R.\n:atomic_area_density    -> Atomic hydrogen area mass density, for a radius of FILTER_R.\n:ionized_area_density   -> Ionized hydrogen area mass density, for a radius of FILTER_R.\n:neutral_area_density   -> Neutral hydrogen area mass density, for a radius of FILTER_R.\n:sfr_area_density       -> Star formation rate area density, for the last AGE_RESOLUTION_ρ and a radius of FILTER_R.\n:gas_metallicity        -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity    -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance        -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance    -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_specific_am    -> Norm of the stellar specific angular momentum.\n:gas_specific_am        -> Norm of the gas specific angular momentum.\n:dm_specific_am         -> Norm of the dark matter specific angular momentum.\n:sfr                    -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                   -> The specific star formation rate of the last AGE_RESOLUTION.\n:scale_factor           -> Scale factor.\n:redshift               -> Redshift.\n:physical_time          -> Physical time since the Big Bang.\n:lookback_time          -> Physical time left to reach the last snapshot.\n\nReturns\n\nThe velue of quantity for the whole system in data.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.internalUnits-Tuple{String, String}","page":"Arepo utilities","title":"GalaxyInspector.internalUnits","text":"internalUnits(quantity::String, path::String)::Union{Unitful.Quantity,Unitful.Units}\n\nGet the factor to convert a plain number into a Unitful quantity, using the correct internal code units.\n\nArguments\n\nquantity::String: Target quantity. The options are the keys of QUANTITIES.\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nA Unitful quantity or unit.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.isCosmological-Tuple{String}","page":"Arepo utilities","title":"GalaxyInspector.isCosmological","text":"isCosmological(path::String)::Bool\n\nCheck if the snapshot in path comes from a cosmological simulation.\n\nnote: Note\nIf each snapshot is made of multiple files, I'll read the first chunck to check if the simulation is cosmological.\n\nArguments\n\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nIf the simulation is cosmological\nfalse -> Newtonian simulation    (ComovingIntegrationOn = 0, Redshift = 0.0).\ntrue  -> Cosmological simulation (ComovingIntegrationOn = 1, Redshift != 0.0).\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.isSubfindActive-Tuple{String}","page":"Arepo utilities","title":"GalaxyInspector.isSubfindActive","text":"isSubfindActive(path::String)::Bool\n\nCheck if there is information about the halos and subhalos in the group catalog file.\n\nArguments\n\npath::String: Path to the group catalog file or folder.\n\nReturns\n\nIf there are halo and subhalo information in the group catalog file.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.mergeRequests-Tuple{Vararg{Dict{Symbol, Vector{String}}}}","page":"Arepo utilities","title":"GalaxyInspector.mergeRequests","text":"mergeRequests(requests::Dict{Symbol,Vector{String}}...)::Dict{Symbol,Vector{String}}\n\nMerge several request dictionaries, ignoring duplicates.\n\nArguments\n\nrequests: The request dictionaries for readSnapshot.\n\nReturns\n\nA new dictionary with all the requests.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.plotParams-Tuple{Symbol}","page":"Arepo utilities","title":"GalaxyInspector.plotParams","text":"function plotParams(quantity::Symbol)::PlotParams\n\nSelect the plotting parameters for a given quantity.\n\nArguments\n\nquantity::Symbol: The options are:\n:stellar_mass               -> Stellar mass.\n:gas_mass                   -> Gas mass.\n:dm_mass                    -> Dark matter mass.\n:bh_mass                    -> Black hole mass.\n:generic_mass               -> Parameters for plots with several diferent masses.\n:stellar_number             -> Number of stellar particles.\n:gas_number                 -> Number of gas cells.\n:dm_number                  -> Number of dark matter particles.\n:bh_number                  -> Number of black hole particles.\n:molecular_mass             -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass                -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass               -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass               -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction         -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction            -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction           -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction           -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction -> Fraction of molecular hydrogen in the neutral gas.\n:generic_fraction           -> Parameters for plots with several diferent fraction.\n:gas_mass_density           -> Gas mass density.\n:gas_number_density         -> Gas number density.\n:molecular_number_density   -> Molecular hydrogen number density.\n:atomic_number_density      -> Atomic hydrogen number density.\n:ionized_number_density     -> Ionized hydrogen number density.\n:neutral_number_density     -> Neutral hydrogen number density.\n:stellar_area_density       -> Stellar area mass density, for a radius of FILTER_R.\n:gas_area_density           -> Gas area mass density, for a radius of FILTER_R.\n:molecular_area_density     -> Molecular hydrogen area mass density, for a radius of FILTER_R.\n:atomic_area_density        -> Atomic hydrogen area mass density, for a radius of FILTER_R.\n:ionized_area_density       -> Ionized hydrogen area mass density, for a radius of FILTER_R.\n:neutral_area_density       -> Neutral hydrogen area mass density, for a radius of FILTER_R.\n:sfr_area_density           -> Star formation rate area density, for the last AGE_RESOLUTION_ρ and a radius of FILTER_R.\n:generic_area_density       -> Parameters for plots with several diferent area densities.\n:gas_metallicity            -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity        -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance            -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance        -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance    -> Distance of every stellar particle to the origin.\n:gas_radial_distance        -> Distance of every gas cell to the origin.\n:dm_radial_distance         -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance        -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance            -> Projected distance of every gas cell to the origin.\n:dm_xy_distance             -> Projected distance of every dark matter particle to the origin.\n:stellar_specific_am        -> Norm of the stellar specific angular momentum.\n:gas_specific_am            -> Norm of the gas specific angular momentum.\n:dm_specific_am             -> Norm of the dark matter specific angular momentum.\n:stellar_circularity        -> Stellar circularity.\n:stellar_vcirc              -> Stellar circular velocity.\n:stellar_vradial            -> Stellar radial speed.\n:stellar_vtangential        -> Stellar tangential speed.\n:stellar_vzstar             -> Stellar speed in the z direction, computed as v_z  sign(z).\n:stellar_age                -> Stellar age.\n:sfr                        -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                       -> The specific star formation rate of the last AGE_RESOLUTION.\n:temperature                -> Gas temperature, as log_10(T    mathrmK).\n:scale_factor               -> Scale factor.\n:redshift                   -> Redshift.\n:physical_time              -> Physical time since the Big Bang.\n:lookback_time              -> Physical time left to reach the last snapshot.\n\nReturns\n\nA PlotParams object, with entries:\nrequest::Dict{Symbol,Vector{String}} -> Data request for readSnapshot.\nvar_name::AbstractString             -> Name of the quantity for the plot axis.\nexp_factor::Int                      -> Numerical exponent to scale down the axis.\nunit::Unitful.Units                  -> Target unit for the axis.\naxis_label::AbstractString           -> Label for the axis.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.rotateData!-Tuple{Dict, Symbol}","page":"Arepo utilities","title":"GalaxyInspector.rotateData!","text":"rotateData!(data_dict::Dict, axis_type::Symbol)::Nothing\n\nRotate the positions and velocities of the cells/particles in data_dict.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nrotation::Symbol: Type of rotation. The options are:\n:zero               -> No rotation is appplied.\n:global_am          -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am         -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa         -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.scatterQty-Tuple{Dict, Symbol}","page":"Arepo utilities","title":"GalaxyInspector.scatterQty","text":"scatterQty(data_dict::Dict, quantity::Symbol)::Vector{<:Number}\n\nCompute a quantity for each cell/particle in data_dict.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nquantity::Symbol: The possibilities are:\n:stellar_mass               -> Stellar mass.\n:gas_mass                   -> Gas mass.\n:dm_mass                    -> Dark matter mass.\n:bh_mass                    -> Black hole mass.\n:molecular_mass             -> Molecular hydrogen (mathrmH_2) mass.\n:atomic_mass                -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass               -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass               -> Neutral hydrogen (mathrmHI + H_2) mass.\n:molecular_fraction         -> Gas mass fraction of molecular hydrogen.\n:atomic_fraction            -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction           -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction           -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction -> Fraction of molecular hydrogen in the neutral gas.\n:gas_mass_density           -> Gas mass density.\n:gas_number_density         -> Gas number density.\n:molecular_number_density   -> Molecular hydrogen number density.\n:atomic_number_density      -> Atomic hydrogen number density.\n:ionized_number_density     -> Ionized hydrogen number density.\n:neutral_number_density     -> Neutral hydrogen number density.\n:gas_metallicity            -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity        -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance            -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance        -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance    -> Distance of every stellar particle to the origin.\n:gas_radial_distance        -> Distance of every gas cell to the origin.\n:dm_radial_distance         -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance        -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance            -> Projected distance of every gas cell to the origin.\n:dm_xy_distance             -> Projected distance of every dark matter particle to the origin.\n:stellar_circularity        -> Stellar circularity.\n:stellar_vcirc              -> Stellar circular velocity.\n:stellar_vradial            -> Stellar radial speed.\n:stellar_vtangential        -> Stellar tangential speed.\n:stellar_vzstar             -> Stellar speed in the z direction, computed as v_z  sign(z).\n:stellar_age                -> Stellar age.\n:sfr                        -> The star formation rate of the last AGE_RESOLUTION.\n:ssfr                       -> The specific star formation rate of the last AGE_RESOLUTION.\n:temperature                -> Gas temperature, as log_10(T    mathrmK).\n\nReturns\n\nThe values of quantity for every cell/particle.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.selectFilter-Tuple{Symbol, Dict{Symbol, Vector{String}}}","page":"Arepo utilities","title":"GalaxyInspector.selectFilter","text":"selectFilter(\n    filter_mode::Symbol,\n    request::Dict{Symbol,Vector{String}},\n)::Tuple{Function,Union{Symbol,NTuple{2,Int}},Symbol,Dict{Symbol,Vector{String}}}\n\nSelect a filter function, and the corresponding translation and rotation for the simulation box.\n\nCreates a request dictionary, using request as a base, adding what is necessary for the filter function and corresponding transformations.\n\nArguments\n\nfilter_mode::Symbol: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius FILTER_R (see ./src/constants.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nrequest::Dict{Symbol,Vector{String}}: Base request dictionary, nothing will be deleted from it.\n\nReturns\n\nA Tuple with four elements:\nThe filter function.\nTranslation for the simulation box. The posibilities are:\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:stellar_cm                 -> Selects the stellar center of mass as the new origin.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new origin.\n(halo_idx, 0)               -> Selects the center of mass of the halo_idx::Int halo, as the new origin.\nRotation for the simulation box. The posibilities are:\n:global_am          -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am         -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa         -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\nNew request dictionary.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.snapshotTypes-Tuple{Dict}","page":"Arepo utilities","title":"GalaxyInspector.snapshotTypes","text":"snapshotTypes(data::Dict)::Vector{Symbol}\n\nFind which cell/particle types are part of the keys of data.\n\nArguments\n\ndata::Dict: A dictionary.\n\nReturns\n\nA vector with the cell/particle types.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.translateData!-Tuple{Dict, Union{Tuple{Int64, Int64}, Symbol}}","page":"Arepo utilities","title":"GalaxyInspector.translateData!","text":"translateData!(data_dict::Dict, translation::Union{Symbol,NTuple{2,Int}})::Nothing\n\nTranslate the positions of the cells/particles in data_dict.\n\nnote: Note\nThe velocities will be boosted to the stellar center of mass of the system. If there are no stars, no transformation in applied to the velocities.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ntranslation::Union{Symbol,NTuple{2,Int}}=:zero: Type of translation. The options are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Sets the center of mass of the whole system as the new origin.\n:stellar_cm                 -> Sets the stellar center of mass as the new origin.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo, as the new origin.\n\n\n\n\n\n","category":"method"},{"location":"api/arepo_utilities/#GalaxyInspector.translatePoints-Tuple{Matrix{<:Number}, Vector{<:Number}}","page":"Arepo utilities","title":"GalaxyInspector.translatePoints","text":"translatePoints(\n    positions::Matrix{<:Number},\n    new_origin::Vector{<:Number},\n)::Matrix{<:Number}\n\nTranslate a system of points, moving new_origin to the origin.\n\nArguments\n\npositions::Matrix{<:Number}: Points to be translated. Each column is a point and each row a dimension.\nnew_origin::Vector{<:Number}: Target origin.\n\nReturns\n\nMatrix with the translated points.\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#Data-acquisition-functions","page":"Data acquisition functions","title":"Data acquisition functions","text":"","category":"section"},{"location":"api/data_acquisition/","page":"Data acquisition functions","title":"Data acquisition functions","text":"These function read the different output files from the simulation (snapshots, FoF catalogs, sfr.txt, etc.), and load the data into memory as dictionaries.","category":"page"},{"location":"api/data_acquisition/","page":"Data acquisition functions","title":"Data acquisition functions","text":"Some of these functions are exported.","category":"page"},{"location":"api/data_acquisition/","page":"Data acquisition functions","title":"Data acquisition functions","text":"","category":"page"},{"location":"api/data_acquisition/","page":"Data acquisition functions","title":"Data acquisition functions","text":"Modules = [GalaxyInspector]\nPages   = [\"data_acquisition.jl\"]","category":"page"},{"location":"api/data_acquisition/#GalaxyInspector.blockPresent-Tuple{String, HDF5.Group}","page":"Data acquisition functions","title":"GalaxyInspector.blockPresent","text":"blockPresent(block::String, group::HDF5.Group)::Bool\n\nChecks if a given data block exist in a HDF5 group.\n\nArguments\n\nblock::String: Target block. The possibilities are the keys of QUANTITIES.\ngroup::HDF5.Group: HDF5 group.\n\nReturns\n\nIf block exist in group.\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#GalaxyInspector.blockPresent-Tuple{Symbol, String, String}","page":"Data acquisition functions","title":"GalaxyInspector.blockPresent","text":"blockPresent(type_symbol::Symbol, block::String, path::String)::Bool\n\nChecks if a given block exist in a snapshot.\n\nnote: Note\nIf each snapshot is made of multiple files, I'll check only in the first chunck.\n\nArguments\n\ntype_symbol::Symbol: The cell/particle type of the target block. The possibilities are the keys of PARTICLE_INDEX.\nblock::String: Target block. The possibilities are the keys of QUANTITIES.\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nIf block exist in the snapshot.\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#GalaxyInspector.getBlock-Tuple{String, Symbol, String}","page":"Data acquisition functions","title":"GalaxyInspector.getBlock","text":"getBlock(path::String, type_symbol::Symbol, block::String)::VecOrMat{<:Number}\n\nConvenience function to directly get the data associated with one block.\n\nArguments\n\npath::String: Path to the snapshot file or folder.\ntype_symbol::Symbol: Type of cell/particle. The possibilities are the keys of PARTICLE_INDEX.\nblock::String: Target block. The possibilities are the keys of QUANTITIES.\n\nReturns\n\nThe data for block.\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#GalaxyInspector.getGroupCatPaths-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.getGroupCatPaths","text":"getGroupCatPaths(simulation_path::String; <keyword arguments>)::Dict{Symbol,Vector{String}}\n\nFind the path and number of every group catalog in simulation_path.\n\nnote: Note\nIf each group catalog is made of multiple files, the :paths field will have paths to folders, each one containing the sub-files of the corresponding group catalog.\n\nArguments\n\nsimulation_path::String: Path to the simulation directory, set in the code variable OutputDir.\nwarnings::Bool=true: If a warning will be raised when no group catalog file or folders are found.\n\nReturns\n\nA dictionary with the following shape:\n:numbers -> The number that characterize each group catalog.\n:paths   -> The full path to each group catalog.\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#GalaxyInspector.getSnapshotPaths-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.getSnapshotPaths","text":"getSnapshotPaths(simulation_path::String; <keyword arguments>)::Dict{Symbol,Vector{String}}\n\nFind the path and number of every snapshot in simulation_path.\n\nnote: Note\nIf each snapshot is made of multiple files, the :paths field will have paths to folders, each one containing the sub-files of the corresponding snapshot.\n\nArguments\n\nsimulation_path::String: Path to the simulation directory, set in the code variable OutputDir.\nwarnings::Bool=true: If a warning will be raised when no snapshot files or folders are found.\n\nReturns\n\nA dictionary with the following shape:\n:numbers -> The number that characterize each snapshot.\n:paths   -> The full path to each snapshot.\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#GalaxyInspector.makeSimulationTable-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.makeSimulationTable","text":"makeSimulationTable(simulation_path::String; <keyword arguments>)::DataFrame\n\nConstruct a dataframe with the path, time stamps and number of each snapshot and group catalog file in simulation_path.\n\nArguments\n\nsimulation_path::String: Path to the simulation directory, set in the code variable OutputDir.\nwarnings::Bool=true: If a warning will be raised when there are missing files.\n\nReturns\n\nA dataframe with 8 colums:\n:ids            -> Dataframe index of each snapshot, i.e. if there are 10 snapshots in total it runs from 1 to 10.\n:numbers        -> Number in the file name of each snapshot.\n:scale_factors  -> Scale factor of each snapshot.\n:redshifts      -> Redshift of each snapshot.\n:physical_times -> Physical time since the Big Bang of each snapshot.\n:lookback_times -> Physical time left to reach the last snapshot.\n:snapshot_paths -> Full path to the snapshots.\n:groupcat_paths -> Full path to the group catalog files.\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#GalaxyInspector.readCpuFile-Tuple{String, Vector{String}}","page":"Data acquisition functions","title":"GalaxyInspector.readCpuFile","text":"readCpuFile(\n    file_path::String,\n    targets::Vector{String};\n    <keyword arguments>\n)::Dict{String,Matrix{Float64}}\n\nRead the cpu.txt file.\n\nFor each process in targets a matrix with all the CPU usage data is returned.\n\nArguments\n\nfile_path::String: Path to the cpu.txt file.\ntargets::Vector{String}: Target processes.\nstep::Int=1: Step used to traverse the rows.\nwarnings::Bool=true: If a warning will be given when there are missing targets.\n\nReturns\n\nA dictionary with the following shape:\ntarget process -> matrix with columns:\nTime step.\nSimulation time (scale factor for cosmological simulations and physical time for non cosmological simulations).\nClock time in seconds.\nClock time as a percentage.\nTotal clock time in seconds.\nTotal clock time as a percentage.\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#GalaxyInspector.readGoupCatBlocks-Tuple{String, String, Dict{Symbol, Vector{String}}}","page":"Data acquisition functions","title":"GalaxyInspector.readGoupCatBlocks","text":"readGoupCatBlocks(\n    file_path::String,\n    snapshot_path::String,\n    request::Dict{Symbol,Vector{String}};\n    <keyword arguments>\n)::Dict{Symbol,Dict{String,VecOrMat{<:Number}}}\n\nRead the specified blocks from a group catalog file.\n\nArguments\n\nfile_path::String: Path to the group catalog file.\nsnapshot_path::String: Path to the corresponding snapshot file or folder. This is needed for unit conversion.\nrequest::Dict{Symbol,Vector{String}}: The blocks to be read. It must have the shape group type -> [block, block, block].\nwarnings::Bool=true: If a warning will be given when there are missing blocks.\n\nReturns\n\nA dictionary with the following shape: group type -> (block -> data of block).\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#GalaxyInspector.readGroupCatHeader-Tuple{Union{Missing, String}}","page":"Data acquisition functions","title":"GalaxyInspector.readGroupCatHeader","text":"readGroupCatHeader(path::Union{String,Missing}; <keyword arguments>)::GroupCatHeader\n\nRead the header of a group catalog in the HDF5 format.\n\nnote: Note\nIf each group catalog is made of multiple files, I'll read the header on the first one.\n\nArguments\n\npath::Union{String,Missing}: Path to the group catalog file or folder.\nwarnings::Bool=true: If a warning will be given when path is missing.\n\nReturns\n\nA GroupCatHeader.\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#GalaxyInspector.readGroupCatalog-Tuple{Union{Missing, String}, String, Dict{Symbol, Vector{String}}}","page":"Data acquisition functions","title":"GalaxyInspector.readGroupCatalog","text":"readGroupCatalog(\n    path::Union{String,Missing},\n    snapshot_path::String,\n    request::Dict{Symbol,Vector{String}};\n    <keyword arguments>\n)::Dict{Symbol,Dict{String,VecOrMat{<:Number}}}\n\nRead the specified blocks from a group catalog file or folder.\n\nArguments\n\npath::Union{String,Missing}: Path to the group catalog file or folder.\nsnapshot_path::String: Path to the corresponding snapshot file or folder. This is needed for unit conversion.\nrequest::Dict{Symbol,Vector{String}}: Which blocks will be read. It must have the shape group type -> [block, block, block].\nwarnings::Bool=true: If a warning will be given when there are missing blocks.\n\nReturns\n\nA dictionary with the following shape: group type -> (block -> data of block).\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#GalaxyInspector.readSfrFile-Tuple{String, String}","page":"Data acquisition functions","title":"GalaxyInspector.readSfrFile","text":"readSfrFile(\n    file_path::String,\n    snap_path::String;\n    <keyword arguments>\n)::Dict{Int32,VecOrMat{<:Number}}\n\nRead the sfr.txt file.\n\nArguments\n\nfile_path::String: Path to the sfr.txt file.\nsnapshot_path::String: Path to one snapshot file or folder of the simulation. This is needed for unit conversion.\nwarnings::Bool=true: If a warning will be given when the sfr.txt file does not have the expected structure.\n\nReturns\n\nA dictionary with the following shape:\n1 -> Time or scale factor (internal units).\n2 -> Total stellar mass to be formed prior to stochastic sampling (internal units).\n3 -> Instantaneous star formation rate of all cells (mathrmM_odot  yr^-1).\n4 -> Instantaneous star formation rate of active cells (mathrmM_odot  yr^-1).\n5 -> Total mass in stars formed after stochastic sampling (internal units).\n6 -> Cumulative stellar mass formed (internal units).\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#GalaxyInspector.readSnapBlocks-Tuple{String, Dict{Symbol, Vector{String}}}","page":"Data acquisition functions","title":"GalaxyInspector.readSnapBlocks","text":"readSnapBlocks(\n    file_path::String,\n    request::Dict{Symbol,Vector{String}};\n    <keyword arguments>\n)::Dict{Symbol,Dict{String,VecOrMat{<:Number}}}\n\nRead the specified blocks from a snapshot file.\n\nArguments\n\nfile_path::String: Path to the snapshot file.\nrequest::Dict{Symbol,Vector{String}}: The blocks to be read. It must have the shape cell/particle type -> [block, block, block].\nwarnings::Bool=true: If a warning will be given when there are missing blocks.\n\nReturns\n\nA dictionary with the following shape: cell/particle type -> (block -> data of block).\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#GalaxyInspector.readSnapHeader-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.readSnapHeader","text":"readSnapHeader(path::String)::SnapshotHeader\n\nRead the header of a snapshot in the HDF5 format.\n\nnote: Note\nIf each snapshot is made of multiple files, I'll read the header on the first chunck.\n\nArguments\n\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nA SnapshotHeader structure.\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#GalaxyInspector.readSnapshot-Tuple{Union{Missing, String}, Dict{Symbol, Vector{String}}}","page":"Data acquisition functions","title":"GalaxyInspector.readSnapshot","text":"readSnapshot(\n    path::Union{String,Missing},\n    request::Dict{Symbol,Vector{String}};\n    <keyword arguments>\n)::Dict{Symbol,Dict{String,VecOrMat{<:Number}}}\n\nRead the specified blocks from a snapshot file or folder.\n\nArguments\n\npath::Union{String,Missing}: Path to the snapshot file or folder.\nrequest::Dict{Symbol,Vector{String}}: Which blocks will be read. It must have the shape cell/particle type -> [block, block, block].\nwarnings::Bool=true: If a warning will be given when some/all the data is missing.\n\nReturns\n\nA dictionary with the following shape: cell/particle type -> (block -> data of block).\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#GalaxyInspector.readTemperature-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.readTemperature","text":"readTemperature(file_path::String)::Vector{<:Unitful.Temperature}\n\nCompute the temperature of the gas cells in a snapshot.\n\nArguments\n\nfile_path::String: Path to the snapshot file.\n\nReturns\n\nThe temperature of the gas cells.\n\n\n\n\n\n","category":"method"},{"location":"api/data_acquisition/#GalaxyInspector.readTime-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.readTime","text":"readTime(path::String)::Float64\n\nRead the \"Time\" field in the header of a snapshot file.\n\nnote: Note\nIf each snapshot is made of multiple files, I'll read the header on the first chunck.\n\nArguments\n\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nThe \"Time\" field in the header (for cosmological simulations is the scale factor).\n\n\n\n\n\n","category":"method"}]
}
