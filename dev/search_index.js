var documenterSearchIndex = {"docs":
[{"location":"api/analysis/compute_quantities/other/#Computation-of-derived-quantities","page":"Computation of derived quantities","title":"Computation of derived quantities","text":"","category":"section"},{"location":"api/analysis/compute_quantities/other/","page":"Computation of derived quantities","title":"Computation of derived quantities","text":"These functions are used internally and none are exported. ","category":"page"},{"location":"api/analysis/compute_quantities/other/","page":"Computation of derived quantities","title":"Computation of derived quantities","text":"These functions depend on the particulars of the simulation code (e.g. units).","category":"page"},{"location":"api/analysis/compute_quantities/other/","page":"Computation of derived quantities","title":"Computation of derived quantities","text":"","category":"page"},{"location":"api/analysis/compute_quantities/other/","page":"Computation of derived quantities","title":"Computation of derived quantities","text":"Modules = [GalaxyInspector]\nPages   = [\"analysis/compute_quantities/other.jl\"]","category":"page"},{"location":"api/analysis/compute_quantities/other/#GalaxyInspector.computeClumpingFactor-Tuple{Vector{<:Number}}","page":"Computation of derived quantities","title":"GalaxyInspector.computeClumpingFactor","text":"computeClumpingFactor(density::Vector{<:Number})::Float64\n\nCompute the clumping factor,\n\nC_rho = fraclangle rho^2 ranglelangle rho rangle^2  \n\nArguments\n\ndensity::Vector{<:Number}: The density of the cells/particles.\n\nReturns\n\nThe clumping factor.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/other/#GalaxyInspector.computeDepletionTime-Tuple{Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌 𝐓^-1, U}} where {L, S}} where {T, U}}}","page":"Computation of derived quantities","title":"GalaxyInspector.computeDepletionTime","text":"computeDepletionTime(\n    mass::Vector{<:Unitful.Mass},\n    sfr::Vector{<:Unitful.MassFlow},\n)::Vector{<:Unitful.Time}\n\nCompute the depletion time,\n\nt_mathrmff = fracM_mathrmgasdotM_star  \n\nArguments\n\nmass::Vector{<:Unitful.Mass}: The gas mass of the cells/particles.\nsfr::Vector{<:Unitful.MassFlow}: The SFR associated to each cell/particle.\n\nReturns\n\nThe depletion time.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/other/#GalaxyInspector.computeEfficiencyFF-Tuple{Vector{<:Union{Unitful.Quantity{T, 𝐌 𝐋^-3, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌 𝐋^-3, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌 𝐓^-1, U}} where {L, S}} where {T, U}}}","page":"Computation of derived quantities","title":"GalaxyInspector.computeEfficiencyFF","text":"computeEfficiencyFF(\n    density::Vector{<:Unitful.Density},\n    mass::Vector{<:Unitful.Mass},\n    sfr::Vector{<:Unitful.MassFlow},\n)::Vector{Float64}\n\nCompute the star formation efficiency per free-fall time, according to the definition in equation 1 of Krumholz (2012),\n\nepsilon_mathrmff = fract_mathrmfft_mathrmdep  \n\nwhere\n\nt_mathrmff = sqrtfrac3  pi32  G  rho  \n\nis the free-fall time, and\n\nt_mathrmff = fracM_mathrmH_2dotM_star  \n\nis the depletion time.\n\nArguments\n\ndensity::Vector{<:Unitful.Density}: The molecular hydrogen (mathrmH_2) density of the cells/particles.\nmass::Vector{<:Unitful.Mass}: The gas mass of the cells/particles.\nsfr::Vector{<:Unitful.MassFlow}: The SFR associated to each cell/particle.\n\nReturns\n\nThe star formation efficiency per free-fall time.\n\nReferences\n\nM. R. Krumholz et al. (2011). A UNIVERSAL, LOCAL STAR FORMATION LAW IN GALACTIC CLOUDS, NEARBY GALAXIES, HIGH-REDSHIFT DISKS, AND STARBURSTS. The Astrophysical Journal, 745(1), 69. doi:10.1088/0004-637X/745/1/69\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/other/#GalaxyInspector.computeEqQuotient-Tuple{Dict, Symbol}","page":"Computation of derived quantities","title":"GalaxyInspector.computeEqQuotient","text":"computeEqQuotient(data_dict::Dict, type::Symbol)::Vector{Float64}\n\nCompute the equilibrium quotient for the molecular or ionized equations of the SF model.\n\nMolecular equation\n\nFrom\n\n\t0 = fracf_atau_mathrmcond - eta_mathrmdiss  psi - psi  \n\nand using\n\n    tau_mathrmcond = fracC_mathrmcond(Z + Z_mathrmeff)  rho_mathrmcell  (1 - f_s)  \n\nand\n\n\tpsi = fracf_mtau_mathrmstar  \n\nWe get\n\n\t(eta_mathrmdiss + 1)  fracf_m^0tau_mathrmstar = fracf_a^0C_mathrmcond  (Z + Z_mathrmeff)  rho_mathrmcell  (1 - f_s^0)  \n\nWhich can be rewritten as\n\n\tfracf_a^0f_m^0  (1 - f_s^0) = fraceta_mathrmdiss + 1tau_mathrmstar  fracC_mathrmcond(Z + Z_mathrmeff)  rho_mathrmcell  \n\nwhere we use the notation f_X^0 to indicate equilibrium fractions.\n\nThis last expression shows the value of f_a^0, f_m^0, and f_s^0 (as a function of the parameters of the model) that make the molecular equation have a 0 derivative (equilibrium point for that particular equation).\n\nIonized equation\n\nFrom\n\n\t0 = - fracf_itau_mathrmrec + eta_mathrmion  psi + R  psi  \n\nand using\n\n    tau_mathrmrec = fracC_mathrmrecf_i  rho_mathrmcell  \n\nand\n\n\tpsi = fracf_mtau_mathrmstar  \n\nWe get\n\n\t0 = - fracf_i^2  rho_mathrmcellC_mathrmrec + (eta_mathrmion + R)  fracf_mtau_mathrmstar  \n\nWhich can be rewritten as\n\n\tfrac(f_i^0)^2f_m^0 = fraceta_mathrmion + Rtau_mathrmstar  fracC_mathrmrecrho_mathrmcell  \n\nAs before, this last expression shows the value of f_i^0 and f_m^0 (as a function of the parameters of the model) that make the ionized equation have a 0 derivative (equilibrium point for that particular equation).\n\nArguments\n\ndata_dict::Dict: Scale factors.\ntype::Symbol: If the :molecular or the :ionized equation will be used.\n\nReturns\n\nA vector with the equilibrium quotient for the molecular or ionized equations.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/other/#GalaxyInspector.computeSFR-Tuple{Dict}","page":"Computation of derived quantities","title":"GalaxyInspector.computeSFR","text":"computeSFR(\n    data_dict::Dict;\n    <keyword arguments>\n)::Vector{<:Unitful.MassFlow}\n\nCompute the star formation rate of each stellar particle.\n\nFor stellar particles younger that age_resol, the SFR is its mass divided by age_resol. It is defined as 0 for older particles.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nage_resol::Unitful.Time=AGE_RESOLUTION: Age resolution for the SFR.\n\nReturns\n\nThe star formation rate of each stellar particle.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/other/#GalaxyInspector.computeStellarAge-Tuple{Dict}","page":"Computation of derived quantities","title":"GalaxyInspector.computeStellarAge","text":"computeStellarAge(data_dict::Dict)::Vector{<:Unitful.Time}\n\nCompute the age of the stars.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nThe stellar ages.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/other/#GalaxyInspector.computeTemperature-Tuple{Vector{<:Union{Unitful.Quantity{T, 𝐋^2 𝐓^-2, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋^2 𝐓^-2, U}} where {L, S}} where {T, U}}, Vector{Float32}}","page":"Computation of derived quantities","title":"GalaxyInspector.computeTemperature","text":"computeTemperature(\n    internal_energy::Vector{<:SpecificEnergy},\n    electron_fraction::Vector{Float32},\n)::Vector{<:Unitful.Temperature}\n\nCompute the gas temperature.\n\nArguments\n\ninternal_energy::Vector{<:SpecificEnergy}: Specific internal energy of every gas cell/particle.\nelectron_fraction::Vector{Float32}: Number fraction of electrons in every gas cell/particle.\n\nReturns\n\nThe temperature of each gas cell/particle.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/other/#GalaxyInspector.computeTime-Tuple{Real, GalaxyInspector.SnapshotHeader}","page":"Computation of derived quantities","title":"GalaxyInspector.computeTime","text":"computeTime(a::Real, header::SnapshotHeader; <keyword arguments>)::Unitful.Time\n\nCompute the physical time corresponding to the scale factor a.\n\nTo get the physical time t from the scale factor a, one does the integral:\n\nt = frac1H_0 int_0^a fracmathrmdaa  sqrtmathcalE(a)  \n\nwhere\n\nmathcalE(a) = Omega_Lambda + Omega_m  a^-3 + Omega_r  a^-4 + Omega_K  a^-2  \n\nArguments\n\na::Real: Scale factor.\nheader::SnapshotHeader: A header of the simulation, containing the cosmological parameters.\na0::Float64=0.0: Initial scale factor.\n\nReturns\n\nThe physical time.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/other/#GalaxyInspector.computeTime-Tuple{Vector{<:Real}, GalaxyInspector.SnapshotHeader}","page":"Computation of derived quantities","title":"GalaxyInspector.computeTime","text":"computeTime(\n    scale_factors::Vector{<:Real},\n    header::SnapshotHeader;\n    <keyword arguments>\n)::Vector{<:Unitful.Time}\n\nCompute the physical time corresponding to each of the scale_factors.\n\nTo get the physical time t from the scale factor a, one does the integral:\n\nt = frac1H_0 int_0^a fracmathrmdaa  sqrtmathcalE(a)  \n\nwhere\n\nmathcalE(a) = Omega_Lambda + Omega_m  a^-3 + Omega_r  a^-4 + Omega_K  a^-2  \n\nArguments\n\nscale_factors::Vector{<:Real}: Scale factors.\nheader::SnapshotHeader: A header of the simulation, containing the cosmological parameters.\na0::Float64=0.0: Initial scale factor.\n\nReturns\n\nA vector with the physical times.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/other/#GalaxyInspector.computeTimeTicks-Tuple{Vector{<:Union{Missing, String}}}","page":"Computation of derived quantities","title":"GalaxyInspector.computeTimeTicks","text":"computeTimeTicks(\n    paths::Vector{<:Union{Missing,String}},\n)::Tuple{Vector{Float64},Vector{Float64},Vector{<:Unitful.Time},Vector{<:Unitful.Time}}\n\nCompute the different times stamps associated with each snapshot in paths.\n\nArguments\n\npaths::Vector{<:Union{Missing,String}}: Paths to the snapshots.\n\nReturns\n\nA tuple with four elements:\nA vector with the scale factors.\nA vector with the redshifts.\nA vector with the physical times (physical time since the Big Bang).\nA vector with the lookback times (physical time left to reach the last snapshot).\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/other/#GalaxyInspector.integrateQty-Tuple{Dict, Symbol}","page":"Computation of derived quantities","title":"GalaxyInspector.integrateQty","text":"integrateQty(data_dict::Dict, quantity::Symbol)::Number\n\nCompute an integrated quantity for the whole system in data_dict.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nquantity::Symbol: The possibilities are:\n:stellar_mass              -> Stellar mass.\n:gas_mass                  -> Gas mass.\n:hydrogen_mass             -> Hydrogen mass.\n:dm_mass                   -> Dark matter mass.\n:bh_mass                   -> Black hole mass.\n:molecular_mass            -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass         -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass               -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass              -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass              -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass          -> Stellar gas mass (according to out SF model).\n:stellar_number            -> Number of stellar particles.\n:gas_number                -> Number of gas cells.\n:dm_number                 -> Number of dark matter particles.\n:bh_number                 -> Number of black hole particles.\n:molecular_fraction        -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction     -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction           -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction          -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction          -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction-> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction      -> Stellar gas fraction (according to out SF model).\n:stellar_area_density      -> Stellar area mass density, for a radius of DISK_R.\n:gas_area_density          -> Gas mass surface density, for a radius of DISK_R.\n:molecular_area_density    -> Molecular mass surface density, for a radius of DISK_R.\n:br_molecular_area_density -> Molecular mass surface density, for a radius of DISK_R, computed using the pressure relation in Blitz et al. (2006).\n:atomic_area_density       -> Atomic hydrogen area mass density, for a radius of DISK_R.\n:ionized_area_density      -> Ionized hydrogen area mass density, for a radius of DISK_R.\n:neutral_area_density      -> Neutral mass surface density, for a radius of DISK_R.\n:sfr_area_density          -> Star formation rate area density, for the last AGE_RESOLUTION and a radius of DISK_R.\n:gas_td                    -> The mean total gas depletion time.\n:molecular_td              -> The mean molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td           -> The mean molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                 -> The mean atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                -> The mean ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                -> The mean neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity           -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity       -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance           -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance       -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_specific_am       -> Norm of the stellar specific angular momentum.\n:gas_specific_am           -> Norm of the gas specific angular momentum.\n:dm_specific_am            -> Norm of the dark matter specific angular momentum.\n:sfr                       -> The star formation rate.\n:ssfr                      -> The specific star formation rate.\n:observational_sfr         -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr        -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff               -> The mean star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                   -> The mean star formation efficiency per free-fall time for the gas.\n:molecular_eff             -> The mean star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff          -> The mean star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                -> The mean star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff               -> The mean star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff               -> The mean star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:scale_factor              -> Scale factor.\n:redshift                  -> Redshift.\n:physical_time             -> Physical time since the Big Bang.\n:lookback_time             -> Physical time left to reach the last snapshot.\n:ode_gas_it                -> Integration time.\n:ode_gas_accu_it           -> Accumulated integration time.\n:ode_gas_tau_s             -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d             -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i             -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                 -> Mass recycling parameter, R.\n:ode_gas_cold_mf           -> Cold gas mass fraction.\n:ode_stellar_it            -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it       -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s         -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d         -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i         -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r             -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf       -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho       -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z         -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass      -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr       -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P         -> Gas pressure, for the gas that form the stars.\n\nReturns\n\nThe velue of quantity for the whole system in data_dict.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/other/#GalaxyInspector.scatterQty-Tuple{Dict, Symbol}","page":"Computation of derived quantities","title":"GalaxyInspector.scatterQty","text":"scatterQty(data_dict::Dict, quantity::Symbol)::Vector{<:Number}\n\nCompute a quantity for each cell/particle in data_dict.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nquantity::Symbol: The possibilities are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\n\nReturns\n\nThe values of quantity for every cell/particle.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/pipelines/#Pipeline-functions","page":"Pipeline functions","title":"Pipeline functions","text":"","category":"section"},{"location":"api/plotting/pipelines/","page":"Pipeline functions","title":"Pipeline functions","text":"These functions are a full plotting pipeline, from reading the data to generating figures and animations.","category":"page"},{"location":"api/plotting/pipelines/","page":"Pipeline functions","title":"Pipeline functions","text":"They have many optional arguments allowing to configure most aspects of the plots.","category":"page"},{"location":"api/plotting/pipelines/","page":"Pipeline functions","title":"Pipeline functions","text":"All these functions are exported.","category":"page"},{"location":"api/plotting/pipelines/","page":"Pipeline functions","title":"Pipeline functions","text":"","category":"page"},{"location":"api/plotting/pipelines/","page":"Pipeline functions","title":"Pipeline functions","text":"Modules = [GalaxyInspector]\nPages   = [\"plotting/pipelines.jl\"]","category":"page"},{"location":"api/plotting/pipelines/#GalaxyInspector.plotSnapshot-Tuple{Vector{String}, Dict{Symbol, Vector{String}}, Vector{<:Function}}","page":"Pipeline functions","title":"GalaxyInspector.plotSnapshot","text":"plotSnapshot(\n    simulation_paths::Vector{String},\n    request::Dict{Symbol,Vector{String}},\n    plot_functions::Vector{<:Function};\n    <keyword arguments>\n)::Nothing\n\nGenerate one figure per snapshot, for one or more simulations.\n\nSome of the features are:\n\nIt can produce scatter plots, line plots, histograms, and heatmaps.\nIt can generate an animation of the results.\nIt transparently manages units; you only have to indicate the final unit of each axis.\n\nnote: Note\nThe snapshots of different simulations are grouped by the number in the file names, regardless of the \"Time\" parameter in the header. The data from the longest running simulation is used for the time stamp in the automatic title.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nrequest::Dict{Symbol,Vector{String}}: Dictionary with the shape cell/particle type -> [block, block, ...], where the possible types are the keys of PARTICLE_INDEX, and the possible quantities are the keys of QUANTITIES. Which data blocks are needed depends on the provided functions da_functions.\nplot_functions::Vector{<:Function}: Vector of plotting functions from Makie. This sets the type of plot for each simulation. The supported functions are:\nscatter!      -> Scatter plot.\nlines!        -> Line plot.\nscatterlines! -> Scatter plot with lines between the markers.\nhist!         -> Histogram.\nheatmap!      -> Heatmap.\narrows!       -> Vector field.\nbarplot!      -> Bar plots.\nband!         -> Band plots.\nerrorbars!    -> Error bars.\npf_kwargs::Vector{<:NamedTuple}=[(;)]: Vector of keyword arguments for the functions in plot_functions.\n\nplotSnapshot configuration\n\noutput_path::String=\"./plots\": Path to the output folder.\nbase_filename::String=\"snapshot\": Every file will be named base_filename-XXXoutput_format where XXX is the snapshot number.\noutput_format::String=\".png\": File format for the figure. All formats supported by Makie can be used, namely .pdf, .svg and .png.\nshow_progress::Bool=true: If a progress bar will be shown.\n\nData manipulation options\n\nslice::IndexType=(:): Slice of the simulation, i.e. which snapshots will be read. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). It works over the longest possible list of snapshots among the simulations (grouped by the number in the file names). Out of bounds indices are ignored.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\nda_functions::Vector{<:Function}=[getNothing]: Vector of data analysis functions. See the required signature and examples in ./src/analysis/data_analysis.jl.\nda_args::Vector{<:Tuple}=[()]: Vector of positional arguments for the data analysis functions.\nda_kwargs::Vector{<:NamedTuple}=[(;)]: Vector of keyword arguments for the data analysis functions.\npost_processing::Function=getNothing: Post processing function. See the required signature and examples in ./src/plotting/post_processing.jl.\npp_args::Tuple=(): Positional arguments for the post processing function.\npp_kwargs::NamedTuple=(;): Keyword arguments for the post processing function.\ntransform_box::Bool=false: If a translation and rotation (in that order) will be applied to the simulation box, affecting the positions and velocities of all the cells and particles. If active, it is applied AFTER the filter_function.\ntranslation::Union{Symbol,NTuple{2,Int},Int}=:zero: Type of translation (only relevant if transform_box = true). The options are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Sets the center of mass of the whole system (after filtering) as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo, as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\nrotation::Union{Symbol,NTuple{2,Int},Int}=:zero: Type of rotation (only relevant if transform_box = true). The options are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nsmooth::Int=0: The result of da_functions will be smooth out using smooth bins. Set it to 0 if you want no smoothing. Only valid for scatter!, lines!, and scatterlines! plots.\nx_unit::Unitful.Units=Unitful.NoUnits: Target unit for the x axis. The values will be converted accordingly. Use the default value of Unitful.NoUnits for dimensionless quantities.\ny_unit::Unitful.Units=Unitful.NoUnits: Target unit for the y axis. The values will be converted accordingly. Use the default value of Unitful.NoUnits for dimensionless quantities.\nx_exp_factor::Int=0: Numerical exponent to scale down the x axis, e.g. if x_exp_factor = 10 the values will be divided by 10^10. The default is no scaling.\ny_exp_factor::Int=0: Numerical exponent to scale down the y axis, e.g. if y_exp_factor = 10 the values will be divided by 10^10. The default is no scaling.\nx_trim::NTuple{2,<:Real}=(-Inf, Inf): The data will be trim down so the x coordinates fit within x_trim, in the units given by x_unit.\ny_trim::NTuple{2,<:Real}=(-Inf, Inf): The data will be trim down so the y coordinates fit within y_trim, in the units given by y_unit. This option does not affect histograms.\nx_edges::Bool=false: Set it to true if you want to keep the borders of x_trim.\ny_edges::Bool=false: Set it to true if you want to keep the borders of y_trim.\nx_func::Function=identity: Function to be applied to the values of the x axis. It must be a pure function with the signature x_func(x_values::Vector{Float64})::Vector{Float64}. The output must have the same length as the input. This function will be applied regardless of units and possible domain problems (use x_trim to solve incompatibilities), and that it will not be reflected in the automatic labeling.\ny_func::Function=identity: Function to be applied to the values of the y axis. It must be a pure function with the signature y_func(y_values::Vector{Float64})::Vector{Float64}. The output must have the same length as the input. This function will be applied regardless of units and possible domain problems (use y_trim to solve incompatibilities), and that it will not be reflected in the automatic labeling.\n\nAxes options\n\nxaxis_label::AbstractString=\"auto_label\": Label for the x axis. It can contain the string auto_label, which will be replaced by: xaxis_var_name [10^x_exp_factor x_unit]. If a LaTeXString with auto_label inside is used, it is recommended that each section around auto_label is delimited with a $ $ pair.\nyaxis_label::AbstractString=\"auto_label\": Label for the y axis. It can contain the string auto_label, which will be replaced by: yaxis_var_name [10^y_exp_factor y_unit]. If a LaTeXString with auto_label inside is used, it is recommended that each section around auto_label is delimited with a $ $ pair.\nxaxis_var_name::AbstractString=\"x\": Name of the variable for the x axis.\nyaxis_var_name::AbstractString=\"y\": Name of the variable for the y axis.\nxaxis_scale_func::Function=identity: Scaling function for the x axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nyaxis_scale_func::Function=identity: Scaling function for the y axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\n\nPlotting options\n\nsave_figures::Bool=true: If every figure will be saved as an image.\nbackup_results::Bool=false: If the values to be plotted will be backup in a JLD2 file.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\nsim_labels::Union{Vector{<:Union{AbstractString,Nothing}},Nothing}=nothing: Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntitle::Union{Symbol,<:AbstractString}=\"\": Title for the figure. If left empty, no title is printed. It can also be set to one of the following options:\n:physical_time -> Physical time since the Big Bang.\n:lookback_time -> Physical time left to reach the last snapshot.\n:scale_factor  -> Scale factor (only relevant for cosmological simulations).\n:redshift      -> Redshift (only relevant for cosmological simulations).\ncolorbar::Bool=false: If a colorbar will be added to heatmaps. Only relevant for when plot_functions is heatmap!.\n\nAnimation options\n\nanimation::Bool=false: If an animation will be created.\nanimation_filename::String=\"animation.mp4\": Filename for the animation, including its extension. All formats supported by Makie can be used, namely .mkv, .mp4, .webm and .gif.\nframerate::Int=15: Frame rate of the animation.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/pipelines/#GalaxyInspector.plotTimeSeries-Tuple{Vector{String}, Vector{<:Function}}","page":"Pipeline functions","title":"GalaxyInspector.plotTimeSeries","text":"plotTimeSeries(\n    simulation_paths::Vector{String},\n    plot_functions::Vector{<:Function};\n    <keyword arguments>\n)::Tuple{Makie.Axis,Figure}\n\nGenerate one figure per simulation.\n\nSome of the features are:\n\nIt can produce scatter and line plots.\nIt transparently manages units; you only have to indicate the final unit of each axis.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nplot_functions::Vector{<:Function}: Vector of plotting functions from Makie. This sets the type of plot for each simulation. The supported functions are:\nscatter!      -> Scatter plot.\nlines!        -> Line plot.\nscatterlines! -> Scatter plot with lines between the markers.\npf_kwargs::Vector{<:NamedTuple}=[(;)]: Vector of keyword arguments for the functions in plot_functions.\n\nplotTimeSeries configuration\n\noutput_path::String=\"./plots\": Path to the output folder.\nfilename::String=\"time_series\": Filename for the figure, without the extension.\noutput_format::String=\".png\": File format for the figure. All formats supported by Makie can be used, namely .pdf, .svg and .png.\nshow_progress::Bool=true: If a progress bar will be shown.\n\nData manipulation options\n\nslice::IndexType=(:): Slice of the simulation, i.e. which snapshots will be read. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). It works over the longest possible list of snapshots among the simulations (grouped by the number in the file names). Out of bounds indices are ignored.\nda_functions::Vector{<:Function}=[getNothing]: Vector of data analysis functions. See the required signature and examples in ./src/analysis/data_analysis.jl.\nda_args::Vector{<:Tuple}=[()]: Vector of positional arguments for the data analysis functions.\nda_kwargs::Vector{<:NamedTuple}=[(;)]: Vector of keyword arguments for the data analysis functions.\npost_processing::Function=getNothing: Post processing function. See the required signature and examples in ./src/plotting/post_processing.jl.\npp_args::Tuple=(): Positional arguments for the post processing function.\npp_kwargs::NamedTuple=(;): Keyword arguments for the post processing function.\nx_unit::Unitful.Units=Unitful.NoUnits: Target unit for the x axis. The values will be converted accordingly. Use the default value of Unitful.NoUnits for dimensionless quantities.\ny_unit::Unitful.Units=Unitful.NoUnits: Target unit for the y axis. The values will be converted accordingly. Use the default value of Unitful.NoUnits for dimensionless quantities.\nx_exp_factor::Int=0: Numerical exponent to scale down the x axis, e.g. if x_exp_factor = 10 the values will be divided by 10^10. The default is no scaling.\ny_exp_factor::Int=0: Numerical exponent to scale down the y axis, e.g. if y_exp_factor = 10 the values will be divided by 10^10. The default is no scaling.\nx_trim::NTuple{2,<:Real}=(-Inf, Inf): The data will be trim down so the x coordinates fit within x_trim, in the units given by x_unit.\ny_trim::NTuple{2,<:Real}=(-Inf, Inf): The data will be trim down so the y coordinates fit within y_trim, in the units given by y_unit.\nx_edges::Bool=false: Set it to true if you want to keep the borders of x_trim.\ny_edges::Bool=false: Set it to true if you want to keep the borders of y_trim.\nx_func::Function=identity: Function to be applied to the values of the x axis. It must be a pure function with the signature x_func(x_values::Vector{Float64})::Vector{Float64}. The output must have the same length as the input. This function will be applied regardless of units and possible domain problems (use x_trim to solve incompatibilities), and that it will not be reflected in the automatic labeling.\ny_func::Function=identity: Function to be applied to the values of the y axis. It must be a pure function with the signature y_func(y_values::Vector{Float64})::Vector{Float64}. The output must have the same length as the input. This function will be applied regardless of units and possible domain problems (use y_trim to solve incompatibilities), and that it will not be reflected in the automatic labeling.\n\nAxes options\n\nxaxis_label::AbstractString=\"auto_label\": Label for the x axis. It can contain the string auto_label, which will be replaced by: xaxis_var_name [10^x_exp_factor x_unit]. If a LaTeXString with auto_label inside is used, it is recommended that each section arround auto_label is delimited with a $ $ pair.\nyaxis_label::AbstractString=\"auto_label\": Label for the y axis. It can contain the string auto_label, which will be replaced by: yaxis_var_name [10^y_exp_factor y_unit]. If a LaTeXString with auto_label inside is used, it is recommended that each section arround auto_label is delimited with a $ $ pair.\nxaxis_var_name::AbstractString=\"x\": Name of the variable for the x axis.\nyaxis_var_name::AbstractString=\"y\": Name of the variable for the y axis.\nxaxis_scale_func::Function=identity: Scaling function for the x axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nyaxis_scale_func::Function=identity: Scaling function for the y axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\n\nPlotting options\n\nsave_figures::Bool=true: If the plot will be saved as an image.\nbackup_results::Bool=false: If the values to be plotted will be backup in a JLD2 file.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\nsim_labels::Union{Vector{<:Union{AbstractString,Nothing}},Nothing}=nothing: Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntitle::AbstractString=\"\": Title for the figure. If left empty, no title will be printed.\n\nReturns\n\nThe Axis and Figure objects.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/velocities/#Computation-of-characteristic-velocities-and-momentums","page":"Computation of characteristic velocities and momentums","title":"Computation of characteristic velocities and momentums","text":"","category":"section"},{"location":"api/analysis/compute_quantities/velocities/","page":"Computation of characteristic velocities and momentums","title":"Computation of characteristic velocities and momentums","text":"These functions are used internally and none are exported. ","category":"page"},{"location":"api/analysis/compute_quantities/velocities/","page":"Computation of characteristic velocities and momentums","title":"Computation of characteristic velocities and momentums","text":"These functions depend on the particulars of the simulation code (e.g. units).","category":"page"},{"location":"api/analysis/compute_quantities/velocities/","page":"Computation of characteristic velocities and momentums","title":"Computation of characteristic velocities and momentums","text":"","category":"page"},{"location":"api/analysis/compute_quantities/velocities/","page":"Computation of characteristic velocities and momentums","title":"Computation of characteristic velocities and momentums","text":"Modules = [GalaxyInspector]\nPages   = [\"analysis/compute_quantities/velocities.jl\"]","category":"page"},{"location":"api/analysis/compute_quantities/velocities/#GalaxyInspector.computeAngularMomentum-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Matrix{<:Union{Unitful.Quantity{T, 𝐋 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋 𝐓^-1, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Computation of characteristic velocities and momentums","title":"GalaxyInspector.computeAngularMomentum","text":"computeAngularMomentum(\n    positions::Matrix{<:Unitful.Length},\n    velocities::Matrix{<:Unitful.Velocity},\n    masses::Vector{<:Unitful.Mass},\n)::Vector{Vector{<:AngularMomentum}}\n\nCompute the angular momentum of each cell/particle, with respect to the origin.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nvelocities::Matrix{<:Unitful.Velocity}: Velocities of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Mass of every cell/particle.\n\nReturns\n\nThe angular momentum of each cell/particle.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/velocities/#GalaxyInspector.computeCircularity-Tuple{Dict}","page":"Computation of characteristic velocities and momentums","title":"GalaxyInspector.computeCircularity","text":"computeCircularity(data_dict::Dict; <keyword arguments>)::Vector{Float64}\n\nCompute the circularity of each particle of the given type, with respect to the origin and the z direction [0, 0, 1].\n\nThe circularity of a particle is,\n\nepsilon = j_z  j_mathrmcirc  \n\nwhere j_z is the z component of its specific angular momentum, and j_mathrmcirc is the specific angular momentum of a circular orbit,\n\nj_mathrmcirc = r  v_mathrmcirc = sqrtmathrmG  r  M(r)  \n\nwhere r is the radial distance of the particle, and M(r) is the total mass within a sphere of radius r.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ntype::Symbol=:stars: Target component.\n\nReturns\n\nThe circularity epsilon of each particle.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/velocities/#GalaxyInspector.computeComponentVcm-Tuple{Dict, Symbol}","page":"Computation of characteristic velocities and momentums","title":"GalaxyInspector.computeComponentVcm","text":"computeComponentVcm(data_dict::Dict, component::Symbol)::Vector{<:Unitful.Velocity}\n\nCompute the velocity of the given component center of mass.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ncomponent::Symbol: Target component, it can be any of the keys of PARTICLE_INDEX.\n\nReturns\n\nThe velocity of the center of mass.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/velocities/#GalaxyInspector.computeGlobalAngularMomentum-Tuple{Dict}","page":"Computation of characteristic velocities and momentums","title":"GalaxyInspector.computeGlobalAngularMomentum","text":"computeGlobalAngularMomentum(data_dict::Dict; <keyword arguments>)::Vector{<:Number}\n\nCompute the total angular momentum with respect to the origin of the whole system.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nnormal::Bool=true: If the result will be normalized.\n\nReturns\n\nThe angular momentum.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/velocities/#GalaxyInspector.computeGlobalSpinParameter-Tuple{Dict}","page":"Computation of characteristic velocities and momentums","title":"GalaxyInspector.computeGlobalSpinParameter","text":"computeGlobalSpinParameter(data_dict::Dict; <keyword arguments>)::Float64\n\nCompute the spin parameter of the whole system.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nR::Unitful.Length=DISK_R: Radius.\n\nReturns\n\nThe spin parameter.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/velocities/#GalaxyInspector.computeGlobalVcm-Tuple{Dict}","page":"Computation of characteristic velocities and momentums","title":"GalaxyInspector.computeGlobalVcm","text":"computeGlobalVcm(data_dict::Dict)::Vector{<:Unitful.Velocity}\n\nCompute the velocity of the global center of mass.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nThe velocity of the global center of mass.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/velocities/#GalaxyInspector.computeSpinParameter-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Matrix{<:Union{Unitful.Quantity{T, 𝐋 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋 𝐓^-1, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Computation of characteristic velocities and momentums","title":"GalaxyInspector.computeSpinParameter","text":"computeSpinParameter(\n    positions::Matrix{<:Unitful.Length},\n    masses::Vector{<:Unitful.Mass},\n    velocities::Matrix{<:Unitful.Velocity};\n    <keyword arguments>\n)::Float64\n\nCompute the spin parameter for a system of cells/particles, with respect to the origin.\n\nThe spin parameter was originally defined by Peebles (1969) as,\n\nlambda = fracJ  sqrtEG  M^52  \n\nwhere J is the norm of the total angular momentum, M the total mass, G the gravitational constant, and\n\nE = E_P + E_k  \n\nwhere E_P is the total potencial energy and E_k is the total kinetic energy (including thermal energy of the gas).\n\nDue to the computational complexity of calculating E_P for a large group of particles, Bullock et al. (2001) proposed an alternative definition of the spin parameter,\n\nlambda = fracJsqrt2  M  R  V  \n\nwhere J is the norm of the total angular momentum inside a sphere of radius R containing mass M, and\n\nV = sqrtfracG  MR  \n\nis the circular velocity.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nvelocities::Matrix{<:Unitful.Velocity}: Velocities of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Mass of every cell/particle.\nR::Unitful.Length=DISK_R: Radius.\n\nReturns\n\nThe spin parameter.\n\nReferences\n\nP. J. E. Peebles (1969). Origin of the Angular Momentum of Galaxies. Astrophysical Journal, 155, 393. doi:10.1086/149876\n\nJ. S. Bullock et al. (2001). A Universal Angular Momentum Profile for Galactic Halos. The Astrophysical Journal, 555(1), 240. doi:10.1086/321477\n\nJ. Zjupa et al. (2017). Angular momentum properties of haloes and their baryon content in the Illustris simulation. Monthly Notices of the Royal Astronomical Society, 466(2), 1625–1647. doi:10.1093/mnras/stw2945\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/velocities/#GalaxyInspector.computeTotalAngularMomentum-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Matrix{<:Union{Unitful.Quantity{T, 𝐋 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋 𝐓^-1, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Computation of characteristic velocities and momentums","title":"GalaxyInspector.computeTotalAngularMomentum","text":"computeTotalAngularMomentum(\n    positions::Matrix{<:Unitful.Length},\n    velocities::Matrix{<:Unitful.Velocity},\n    masses::Vector{<:Unitful.Mass};\n    <keyword arguments>\n)::Vector{<:Number}\n\nCompute the total angular momentum of a group of cells/particles, with respect to the origin.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nvelocities::Matrix{<:Unitful.Velocity}: Velocities of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Mass of every cell/particle.\nnormal::Bool=true: If the result will be normalized.\n\nReturns\n\nThe angular momentum.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/velocities/#GalaxyInspector.computeVcirc-Tuple{Dict}","page":"Computation of characteristic velocities and momentums","title":"GalaxyInspector.computeVcirc","text":"computeVcirc(\n    data_dict::Dict;\n    <keyword arguments>\n)::Tuple{Vector{<:Unitful.Length},Vector{<:Unitful.Velocity}}\n\nCompute the circular velocity of each particle of the given type, with respect to the origin.\n\nThe circular velocity of a particle is,\n\nv_mathrmcirc = sqrtfracmathrmG  M(r)r  \n\nwhere r is the radial distance of the particle, and M(r) is the total mass within a sphere of radius r.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ntype::Symbol=:stars: Target component.\n\nReturns\n\nA tuple with two elements:\nA vector with the radial distance of each particle to the origin.\nA vector with the circular velocity of each particle.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/velocities/#GalaxyInspector.computeVcm-Tuple{Dict, Int64}","page":"Computation of characteristic velocities and momentums","title":"GalaxyInspector.computeVcm","text":"computeVcm(data_dict::Dict, subhalo_abs_idx::Int)::Vector{<:Unitful.Velocity}\n\nRead the velocity of the center of mass of a given subhalo.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nsubhalo_abs_idx::Int: Absolute index of the target subhalo (subfind). Starts at 1.\n\nReturns\n\nThe specified velocity.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/velocities/#GalaxyInspector.computeVcm-Tuple{Dict, Symbol}","page":"Computation of characteristic velocities and momentums","title":"GalaxyInspector.computeVcm","text":"computeVcm(data_dict::Dict, cm_type::Symbol)::Vector{<:Unitful.Velocity}\n\nCompute the velocity of a characteristic center of the system.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ncm_type::Symbol: It can be:\n:global_cm   -> Center of mass of the whole system.\n:{component} -> Center of mass of the given component (e.g. :stars, :gas, :halo, etc). It can be any of the keys of PARTICLE_INDEX.\n:zero        -> Origin.\n\nReturns\n\nThe specified velocity.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/velocities/#GalaxyInspector.computeVcm-Tuple{Dict, Tuple{Int64, Int64}}","page":"Computation of characteristic velocities and momentums","title":"GalaxyInspector.computeVcm","text":"computeVcm(data_dict::Dict, subfind_idx::NTuple{2,Int})::Vector{<:Unitful.Velocity}\n\nRead the velocity of the center of mass of a given halo or subhalo.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nsubfind_idx::NTuple{2,Int}: Tuple with two elements:\nIndex of the target halo (FoF group). Starts at 1.\nIndex of the target subhalo (subfind), relative the target halo. Starts at 1. If it is set to 0, the potencial minimum of the halo with index halo_idx is returned.\n\nReturns\n\nThe specified velocity.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/velocities/#GalaxyInspector.computeVpolar-Tuple{Dict, Symbol}","page":"Computation of characteristic velocities and momentums","title":"GalaxyInspector.computeVpolar","text":"computeVpolar(\n    data_dict::Dict,\n    component::Symbol;\n    <keyword arguments>\n)::Vector{<:Unitful.Velocity}\n\nCompute the cylindrical components of the velocity, mathbfvecv = v_r  mathbfe_r + v_theta  mathbfe_theta + v_z  mathbfe_z.\n\nThe speed in the radial direction expressed in Cartesian coordinates is\n\nv_r = fracx  v_x + y  v_ysqrt(x^2 + y^2)  \n\nin the tangential direction is\n\nv_tau = fracx  v_y - y  v_xsqrt(x^2 + y^2)  \n\nand the speed in the z direction will be computes as\n\nv^*_z = v_z  mathrmsign(z)  \n\nin order to distinguish between inflows (v^*_z  0) and outflows (v^*_z  0).\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ncomponent::Symbol: Which component will be calculated. The options are:\n:radial     -> Stellar radial speed (v_r).\n:tangential -> Stellar tangential speed (v_theta).\n:zstar      -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\ntype::Symbol=:stars: Target cell/particle type.\n\nReturns\n\nThe chosen cylindricall component of the velocity.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#Data-acquisition-functions","page":"Data acquisition functions","title":"Data acquisition functions","text":"","category":"section"},{"location":"api/analysis/data_acquisition/","page":"Data acquisition functions","title":"Data acquisition functions","text":"These functions are used internally and none are exported. ","category":"page"},{"location":"api/analysis/data_acquisition/","page":"Data acquisition functions","title":"Data acquisition functions","text":"These functions depend on the particulars of the simulation code (e.g. units).","category":"page"},{"location":"api/analysis/data_acquisition/","page":"Data acquisition functions","title":"Data acquisition functions","text":"These function read the different output files from the simulation (snapshots, FoF catalogs, sfr.txt, etc.), and load the data into memory as dictionaries.","category":"page"},{"location":"api/analysis/data_acquisition/","page":"Data acquisition functions","title":"Data acquisition functions","text":"","category":"page"},{"location":"api/analysis/data_acquisition/","page":"Data acquisition functions","title":"Data acquisition functions","text":"Modules = [GalaxyInspector]\nPages   = [\"analysis/data_acquisition.jl\"]","category":"page"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.addRequest-Tuple{Dict{Symbol, Vector{String}}, Dict{Symbol, Vector{String}}}","page":"Data acquisition functions","title":"GalaxyInspector.addRequest","text":"addRequest(\n    request::Dict{Symbol,Vector{String}},\n    addition::Dict{Symbol,Vector{String}},\n)::Dict{Symbol,Vector{String}}\n\nAdd the blocks in addition to request, only for the types already present in request.\n\nArguments\n\nrequest::Dict{Symbol,Vector{String}}: The request dictionary for readSnapshot.\naddition::Dict{Symbol,Vector{String}}: Request dictionary with the blocks to be added, only for the types already present in request.\n\nReturns\n\nA new dictionary with all the requests.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.countSnapshot-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.countSnapshot","text":"countSnapshot(simulation_path::String)::Int\n\nCount the number of snapshots in simulation_path.\n\nnote: Note\nThis function count the number of snapshots, no the number of snapshot files. So if each snapshot is made of more than one files, the count will not change.\n\nArguments\n\nsimulation_path::String: Path to the simulation directory, set in the code variable OutputDir.\n\nReturns\n\nThe number of snapshots.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.countStars-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.countStars","text":"countStars(path::String)::Int\n\nCount the number of stars in a snapshot, excluding wind particles.\n\nArguments\n\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nThe number of stars.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.findQtyExtrema-Tuple{String, Int64, Symbol, String}","page":"Data acquisition functions","title":"GalaxyInspector.findQtyExtrema","text":"findQtyExtrema(\n    simulation_path::String,\n    slice_n::Int,\n    component::Symbol,\n    block::String;\n    <keyword arguments>\n)::NTuple{2,<:Number}\n\nCompute the minimum and maximum values of block.\n\nArguments\n\nsimulation_path::String: Path to the simulation directory, set in the code variable OutputDir.\nslice_n::Int: Selects which snapshot to plot, starts at 1 and is independent of the number in the file name. If every snapshot is present, the relation is slice_n = filename_number + 1. If set to a negative number, the values in the whole simulation will be compared.\ncomponent::Symbol: Cell/particle type. The possibilities are the keys of PARTICLE_INDEX.\nblock::String: Target block. The possibilities are the keys of QUANTITIES.\nf::Function=identity: A function with the signature:\nf(data) -> values\nwhere\ndata::VecOrMat{<:Number}: Data returned by getBlock.\nvalues::Vector{<:Number}: A vector with the values to be compared.\n\nReturns\n\nTuple with the minimum and maximum values.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.findRealStars-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.findRealStars","text":"findRealStars(path::String)::Vector{Bool}\n\nFind which stellar particles are real stars and not wind particles.\n\nArguments\n\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nA boolean vector with true for stars and false for wind particles.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.getBlock-Tuple{String, Symbol, String}","page":"Data acquisition functions","title":"GalaxyInspector.getBlock","text":"getBlock(path::String, component::Symbol, block::String)::VecOrMat{<:Number}\n\nConvenience function to directly get the data associated with one block.\n\nArguments\n\npath::String: Path to the snapshot file or folder.\ncomponent::Symbol: Type of cell/particle. The possibilities are the keys of PARTICLE_INDEX.\nblock::String: Target block. The possibilities are the keys of QUANTITIES.\n\nReturns\n\nThe data for block.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.getGroupCatPaths-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.getGroupCatPaths","text":"getGroupCatPaths(simulation_path::String)::Dict{Symbol,Vector{String}}\n\nFind the path and number of every group catalog in simulation_path.\n\nnote: Note\nIf each group catalog is made of multiple files, the :paths field will have paths to folders, each one containing the sub-files of the corresponding group catalog.\n\nArguments\n\nsimulation_path::String: Path to the simulation directory, set in the code variable OutputDir.\n\nReturns\n\nA dictionary with the following shape:\n:numbers -> The number that characterize each group catalog.\n:paths   -> The full path to each group catalog.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.getSnapshotPaths-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.getSnapshotPaths","text":"getSnapshotPaths(simulation_path::String)::Dict{Symbol,Vector{String}}\n\nFind the path and number of every snapshot in simulation_path.\n\nnote: Note\nIf each snapshot is made of multiple files, the :paths field will have paths to folders, each one containing the sub-files of the corresponding snapshot.\n\nArguments\n\nsimulation_path::String: Path to the simulation directory, set in the code variable OutputDir.\n\nReturns\n\nA dictionary with the following shape:\n:numbers -> The number that characterize each snapshot.\n:paths   -> The full path to each snapshot.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.groupcatTypes-Tuple{Dict}","page":"Data acquisition functions","title":"GalaxyInspector.groupcatTypes","text":"groupcatTypes(data_dict::Dict)::Vector{Symbol}\n\nFind which group catalog data types are part of the keys of data_dict.\n\nArguments\n\ndata_dict::Dict: A dictionary.\n\nReturns\n\nA vector with the group catalog data types.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.groupcatTypes-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.groupcatTypes","text":"groupcatTypes(path::String)::Vector{Symbol}\n\nFind which group catalog data types are part of the snapshot in path.\n\nnote: Note\nIf each snapshot is made of multiple files, I'll check the first chunk.\n\nArguments\n\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nA vector with the group catalog data types.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.internalUnits-Tuple{String, String}","page":"Data acquisition functions","title":"GalaxyInspector.internalUnits","text":"internalUnits(quantity::String, path::String)::Union{Unitful.Quantity,Unitful.Units}\n\nGet the factor to convert a plain number into a Unitful quantity, using the correct internal code units.\n\nArguments\n\nquantity::String: Target quantity. The options are the keys of QUANTITIES.\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nA Unitful quantity or unit.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.isBlockPresent-Tuple{String, HDF5.Group}","page":"Data acquisition functions","title":"GalaxyInspector.isBlockPresent","text":"isBlockPresent(block::String, group::HDF5.Group)::Bool\n\nChecks if a given data block exist in a HDF5 group.\n\nArguments\n\nblock::String: Target block. The possibilities are the keys of QUANTITIES.\ngroup::HDF5.Group: HDF5 group.\n\nReturns\n\nIf block exist in group.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.isBlockPresent-Tuple{Symbol, String, String}","page":"Data acquisition functions","title":"GalaxyInspector.isBlockPresent","text":"isBlockPresent(component::Symbol, block::String, path::String)::Bool\n\nChecks if a given block exist in a snapshot.\n\nnote: Note\nIf each snapshot is made of multiple files, I'll check only in the first chunk.\n\nArguments\n\ncomponent::Symbol: The cell/particle type of the target block. The possibilities are the keys of PARTICLE_INDEX.\nblock::String: Target block. The possibilities are the keys of QUANTITIES.\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nIf block exist in the snapshot.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.isCosmological-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.isCosmological","text":"isCosmological(path::String)::Bool\n\nCheck if the snapshot in path comes from a cosmological simulation.\n\nnote: Note\nIf each snapshot is made of multiple files, I'll read the first chunk to check if the simulation is cosmological.\n\nArguments\n\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nIf the simulation is cosmological\nfalse -> Newtonian simulation    (ComovingIntegrationOn = 0, Redshift = 0.0).\ntrue  -> Cosmological simulation (ComovingIntegrationOn = 1, Redshift != 0.0).\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.isSubfindActive-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.isSubfindActive","text":"isSubfindActive(path::String)::Bool\n\nCheck if there is information about the halos and subhalos in the group catalog file.\n\nArguments\n\npath::String: Path to the group catalog file or folder.\n\nReturns\n\nIf there are halo and subhalo information in the group catalog file.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.makeDataDict-Tuple{String, Int64, Dict{Symbol, Vector{String}}}","page":"Data acquisition functions","title":"GalaxyInspector.makeDataDict","text":"makeDataDict(\n    simulation_path::String,\n    slice_n::Int,\n    request::Dict{Symbol,Vector{String}},\n)::Dict\n\nConstruct a data dictionary for a single snapshot.\n\nArguments\n\nsimulation_path::String: Path to the simulation directory, set in the code variable OutputDir.\nslice_n::Int: Selects the target snapshot. Starts at 1 and is independent of the number in the file name. If every snapshot is present, the relation is slice_n = filename_number + 1.\nrequest::Dict{Symbol,Vector{String}}: Dictionary with the shape cell/particle type -> [block, block, ...], where the possible types are the keys of PARTICLE_INDEX, and the possible quantities are the keys of QUANTITIES.\n\nReturns\n\nA dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.makeSimulationTable-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.makeSimulationTable","text":"makeSimulationTable(simulation_path::String)::DataFrame\n\nConstruct a dataframe with the path, time stamps and number of each snapshot and group catalog file in simulation_path.\n\nArguments\n\nsimulation_path::String: Path to the simulation directory, set in the code variable OutputDir.\n\nReturns\n\nA dataframe with 8 columns:\n:ids            -> Dataframe index of each snapshot, i.e. if there are 10 snapshots in total it runs from 1 to 10.\n:numbers        -> Number in the file name of each snapshot.\n:scale_factors  -> Scale factor of each snapshot.\n:redshifts      -> Redshift of each snapshot.\n:physical_times -> Physical time since the Big Bang of each snapshot.\n:lookback_times -> Physical time left to reach the last snapshot.\n:snapshot_paths -> Full path to the snapshots.\n:groupcat_paths -> Full path to the group catalog files.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.mergeRequests-Tuple{Vararg{Dict{Symbol, Vector{String}}}}","page":"Data acquisition functions","title":"GalaxyInspector.mergeRequests","text":"mergeRequests(requests::Dict{Symbol,Vector{String}}...)::Dict{Symbol,Vector{String}}\n\nMerge several request dictionaries, ignoring duplicates.\n\nArguments\n\nrequests: The request dictionaries for readSnapshot.\n\nReturns\n\nA new dictionary with all the requests.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.readCpuFile-Tuple{String, Vector{String}}","page":"Data acquisition functions","title":"GalaxyInspector.readCpuFile","text":"readCpuFile(\n    file_path::String,\n    targets::Vector{String};\n    <keyword arguments>\n)::Dict{String,Matrix{Float64}}\n\nRead the cpu.txt file.\n\nFor each process in targets a matrix with all the CPU usage data is returned.\n\nArguments\n\nfile_path::String: Path to the cpu.txt file.\ntargets::Vector{String}: Target processes.\nstep::Int=1: Step used to traverse the rows.\n\nReturns\n\nA dictionary with the following shape:\ntarget process -> matrix with columns:\nTime step.\nSimulation time (scale factor for cosmological simulations and physical time for non-cosmological simulations).\nClock time in seconds.\nClock time as a percentage.\nTotal clock time in seconds.\nTotal clock time as a percentage.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.readGoupCatBlocks-Tuple{String, String, Dict{Symbol, Vector{String}}}","page":"Data acquisition functions","title":"GalaxyInspector.readGoupCatBlocks","text":"readGoupCatBlocks(\n    file_path::String,\n    snapshot_path::String,\n    request::Dict{Symbol,Vector{String}},\n)::Dict{Symbol,Dict{String,VecOrMat{<:Number}}}\n\nRead the specified blocks from a group catalog file.\n\nArguments\n\nfile_path::String: Path to the group catalog file.\nsnapshot_path::String: Path to the corresponding snapshot file or folder. This is needed for unit conversion.\nrequest::Dict{Symbol,Vector{String}}: The blocks to be read. It must have the shape group type -> [block, block, block].\n\nReturns\n\nA dictionary with the following shape: group type -> (block -> data of block).\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.readGroupCatHeader-Tuple{Union{Missing, String}}","page":"Data acquisition functions","title":"GalaxyInspector.readGroupCatHeader","text":"readGroupCatHeader(path::Union{String,Missing})::GroupCatHeader\n\nRead the header of a group catalog in the HDF5 format.\n\nnote: Note\nIf each group catalog is made of multiple files, I'll read the header on the first one.\n\nArguments\n\npath::Union{String,Missing}: Path to the group catalog file or folder.\n\nReturns\n\nA GroupCatHeader.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.readGroupCatalog-Tuple{Union{Missing, String}, String, Dict{Symbol, Vector{String}}}","page":"Data acquisition functions","title":"GalaxyInspector.readGroupCatalog","text":"readGroupCatalog(\n    path::Union{String,Missing},\n    snapshot_path::String,\n    request::Dict{Symbol,Vector{String}},\n)::Dict{Symbol,Dict{String,VecOrMat{<:Number}}}\n\nRead the specified blocks from a group catalog file or folder.\n\nArguments\n\npath::Union{String,Missing}: Path to the group catalog file or folder.\nsnapshot_path::String: Path to the corresponding snapshot file or folder. This is needed for unit conversion.\nrequest::Dict{Symbol,Vector{String}}: Which blocks will be read. It must have the shape group type -> [block, block, block].\n\nReturns\n\nA dictionary with the following shape: group type -> (block -> data of block).\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.readSfrFile-Tuple{String, String}","page":"Data acquisition functions","title":"GalaxyInspector.readSfrFile","text":"readSfrFile(\n    file_path::String,\n    snap_path::String,\n)::Dict{Int32,VecOrMat{<:Number}}\n\nRead the sfr.txt file.\n\nArguments\n\nfile_path::String: Path to the sfr.txt file.\nsnapshot_path::String: Path to one snapshot file or folder of the simulation. This is needed for unit conversion.\n\nReturns\n\nA dictionary with the following shape:\n1 -> Time or scale factor (internal units).\n2 -> Total stellar mass to be formed prior to stochastic sampling (internal units).\n3 -> Instantaneous star formation rate of all cells (mathrmM_odot  yr^-1).\n4 -> Instantaneous star formation rate of active cells (mathrmM_odot  yr^-1).\n5 -> Total mass in stars formed after stochastic sampling (internal units).\n6 -> Cumulative stellar mass formed (internal units).\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.readSnapBlocks-Tuple{String, Dict{Symbol, Vector{String}}}","page":"Data acquisition functions","title":"GalaxyInspector.readSnapBlocks","text":"readSnapBlocks(\n    file_path::String,\n    request::Dict{Symbol,Vector{String}},\n)::Dict{Symbol,Dict{String,VecOrMat{<:Number}}}\n\nRead the specified blocks from a snapshot file.\n\nArguments\n\nfile_path::String: Path to the snapshot file.\nrequest::Dict{Symbol,Vector{String}}: The blocks to be read. It must have the shape cell/particle type -> [block, block, block].\n\nReturns\n\nA dictionary with the following shape: cell/particle type -> (block -> data of block).\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.readSnapHeader-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.readSnapHeader","text":"readSnapHeader(path::String)::SnapshotHeader\n\nRead the header of a snapshot in the HDF5 format.\n\nnote: Note\nIf each snapshot is made of multiple files, I'll read the header on the first chunk.\n\nArguments\n\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nA SnapshotHeader structure.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.readSnapshot-Tuple{Union{Missing, String}, Dict{Symbol, Vector{String}}}","page":"Data acquisition functions","title":"GalaxyInspector.readSnapshot","text":"readSnapshot(\n    path::Union{String,Missing},\n    request::Dict{Symbol,Vector{String}},\n)::Dict{Symbol,Dict{String,VecOrMat{<:Number}}}\n\nRead the specified blocks from a snapshot file or folder.\n\nArguments\n\npath::Union{String,Missing}: Path to the snapshot file or folder.\nrequest::Dict{Symbol,Vector{String}}: Which blocks will be read. It must have the shape cell/particle type -> [block, block, block].\n\nReturns\n\nA dictionary with the following shape: cell/particle type -> (block -> data of block).\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.readTemperature-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.readTemperature","text":"readTemperature(file_path::String)::Vector{<:Unitful.Temperature}\n\nCompute the temperature of the gas cells in a snapshot.\n\nArguments\n\nfile_path::String: Path to the snapshot file.\n\nReturns\n\nThe temperature of the gas cells.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.readTime-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.readTime","text":"readTime(path::String)::Float64\n\nRead the \"Time\" field in the header of a snapshot file.\n\nnote: Note\nIf each snapshot is made of multiple files, I'll read the header on the first chunk.\n\nArguments\n\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nThe \"Time\" field in the header (for cosmological simulations is the scale factor).\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.snapshotTypes-Tuple{Dict}","page":"Data acquisition functions","title":"GalaxyInspector.snapshotTypes","text":"snapshotTypes(data_dict::Dict)::Vector{Symbol}\n\nFind which cell/particle types are part of the keys of data_dict.\n\nArguments\n\ndata_dict::Dict: A dictionary.\n\nReturns\n\nA vector with the cell/particle types.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_acquisition/#GalaxyInspector.snapshotTypes-Tuple{String}","page":"Data acquisition functions","title":"GalaxyInspector.snapshotTypes","text":"snapshotTypes(path::String)::Vector{Symbol}\n\nFind which cell/particle types are part of the snapshot in path.\n\nnote: Note\nIf each snapshot is made of multiple files, I'll check the first chunk.\n\nArguments\n\npath::String: Path to the snapshot file or folder.\n\nReturns\n\nA vector with the cell/particle types.\n\n\n\n\n\n","category":"method"},{"location":"api/constants/globals/#Global-constants","page":"Global constants","title":"Global constants","text":"","category":"section"},{"location":"api/constants/globals/","page":"Global constants","title":"Global constants","text":"This is a list of constant and types used in GalaxyInspector.","category":"page"},{"location":"api/constants/globals/","page":"Global constants","title":"Global constants","text":"None of these constants and types are exported.","category":"page"},{"location":"api/constants/globals/","page":"Global constants","title":"Global constants","text":"","category":"page"},{"location":"api/constants/globals/","page":"Global constants","title":"Global constants","text":"Modules = [GalaxyInspector]\nPages   = [\"constants/globals.jl\"]","category":"page"},{"location":"api/constants/globals/#GalaxyInspector.AGE_RESOLUTION","page":"Global constants","title":"GalaxyInspector.AGE_RESOLUTION","text":"Characteristic stellar age limit for the SFR and sSFR.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.ALPHA_BLITZ","page":"Global constants","title":"GalaxyInspector.ALPHA_BLITZ","text":"Reference exponent for the molecular fraction-pressure relation, taken from Blitz et al. (2006) (Table 2, \"Mean\" row, Second column).\n\nWe use -α here.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.ATOMIC_WEIGHTS","page":"Global constants","title":"GalaxyInspector.ATOMIC_WEIGHTS","text":"Standard atomic weights.\n\nReferences\n\nT. Prohaska et al. (2022). Standard atomic weights of the elements 2021 (IUPAC Technical Report). Pure and Applied Chemistry, 94(5), 573-600. doi:10.1515/pac-2019-0603\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.A_BIGIEL2008_BF_MOLECULAR","page":"Global constants","title":"GalaxyInspector.A_BIGIEL2008_BF_MOLECULAR","text":"Kennicutt-Schmidt law best-fit for molecular gas, from Bigiel et al. (2008) (Section 4.3, Equation 3).\n\nPower-law index, N, and A = log_10(a), where a is Sigma_mathrmSFR at the fiducial gas surface density of 10  mathrmM_odot  pc^-2 are given.\n\nSigma_mathrmSFR = a left( fracSigma_mathrmH_210  mathrmM_odot  pc^-2 right)^N  \n\nReferences\n\nF. Bigiel et al. (2008). THE STAR FORMATION LAW IN NEARBY GALAXIES ON SUB-KPC SCALES. The Astrophysical Journal, 136(6), 2846. doi:10.1088/0004-6256/136/6/2846\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.A_BIGIEL2008_MOLECULAR","page":"Global constants","title":"GalaxyInspector.A_BIGIEL2008_MOLECULAR","text":"Kennicutt-Schmidt law fits for molecular and neutral gas, from Bigiel et al. (2008) (Table 2, Average).\n\nPower-law index, N, and A = log_10(a), where a is Sigma_mathrmSFR at the fiducial gas surface density of 10  mathrmM_odot  pc^-2 are given.\n\nSigma_mathrmSFR = a left( fracSigma_mathrmHI H_2 gas10  mathrmM_odot  pc^-2 right)^N  \n\nReferences\n\nF. Bigiel et al. (2008). THE STAR FORMATION LAW IN NEARBY GALAXIES ON SUB-KPC SCALES. The Astrophysical Journal, 136(6), 2846. doi:10.1088/0004-6256/136/6/2846\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.BIGIEL2008_SFR_RANGE","page":"Global constants","title":"GalaxyInspector.BIGIEL2008_SFR_RANGE","text":"Range of values for\n\nSigma_mathrmSFR  mathrmM_odot  yr^-1  kpc^-2  \n\nin the seven spiral in Table 1 of Bigiel et al. (2008), with associated molecular data.\n\nThe actual values for the SFR density are taken from Table 2 in Bigiel et al. (2010), using only the ones with associated molecular data.\n\nReferences\n\nF. Bigiel et al. (2008). THE STAR FORMATION LAW IN NEARBY GALAXIES ON SUB-KPC SCALES. The Astrophysical Journal, 136(6), 2846. doi:10.1088/0004-6256/136/6/2846\n\nF. Bigiel et al. (2010). EXTREMELY INEFFICIENT STAR FORMATION IN THE OUTER DISKS OF NEARBY GALAXIES. The Astrophysical Journal, 140(5), 1194. doi:10.1088/0004-6256/140/5/1194\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.BIGIEL2010_TABLE_2","page":"Global constants","title":"GalaxyInspector.BIGIEL2010_TABLE_2","text":"Path to the file with Table 2 from Bigiel et al. (2010).\n\nReferences\n\nF. Bigiel et al. (2010). EXTREMELY INEFFICIENT STAR FORMATION IN THE OUTER DISKS OF NEARBY GALAXIES. The Astrophysical Journal, 140(5), 1194. doi:10.1088/0004-6256/140/5/1194\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.BIGIEL2010_TABLE_3","page":"Global constants","title":"GalaxyInspector.BIGIEL2010_TABLE_3","text":"Path to the file with Table 3 from Bigiel et al. (2010).\n\nReferences\n\nF. Bigiel et al. (2010). EXTREMELY INEFFICIENT STAR FORMATION IN THE OUTER DISKS OF NEARBY GALAXIES. The Astrophysical Journal, 140(5), 1194. doi:10.1088/0004-6256/140/5/1194\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.BIGIEL_PX_SIZE","page":"Global constants","title":"GalaxyInspector.BIGIEL_PX_SIZE","text":"Spatial resolution used in Bigiel et al. (2008).\n\nReferences\n\nF. Bigiel et al. (2008). THE STAR FORMATION LAW IN NEARBY GALAXIES ON SUB-KPC SCALES. The Astrophysical Journal, 136(6), 2846. doi:10.1088/0004-6256/136/6/2846\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.BOX_L","page":"Global constants","title":"GalaxyInspector.BOX_L","text":"Characteristic box size.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.COSMO_THRESHOLD_DENSITY","page":"Global constants","title":"GalaxyInspector.COSMO_THRESHOLD_DENSITY","text":"Cosmological threshold density above which the gas cells/particles can turn into stars.\n\nThis value corresponds to CritOverDensity = 577  mathrmcm^-3 in the param.txt file (used only in cosmological simulations). Which is converted to internal units within the code using OverDensThresh = CritOverDensity * OmegaBaryon * 3 * Hubble * Hubble / (8 * M_PI * G). Then, to go to physical units again one has to do:OverDensThresh*UnitDensityincgs*cf_a3inv*HubbleParam*HubbleParam`.\n\nUsing the unit factors,\n\nUnitLength_in_cm         = 3085678 times 10^24\n\nUnitMass_in_g            = 1989 times 10^43\n\nUnitVelocity_in_cm_per_s = 100000\n\nThe derived units,\n\nUnitTime_in_s      = UnitLength_in_cm * UnitVelocity_in_cm_per_s^-1 = 308568 times 10^19\n\nUnitDensity_in_cgs = UnitMass_in_g * UnitLength_in_cm^-3            = 676991 times 10^-31\n\nThe parameters,\n\nOmegaBaryon       = 0048\n\nHubbleParam       = 06777\n\nPROTONMASS        = 167262178 times 10^-24\n\nHYDROGEN_MASSFRAC = 076\n\nGRAVITY           = 66738 times 10^-8\n\nHUBBLE            = 32407789 times 10^-18\n\nAnd the derived parameters,\n\nHubble = HUBBLE * UnitTime_in_s                                              = 100\n\nG      = GRAVITY * UnitLength_in_cm^-3 * UnitMass_in_g * UnitTime_in_s^2 = 430187\n\nOne gets,\n\nOverDensThresh = 76.8495 [internal units of density]\n\nAnd, for a cosmological simulation at readshift 0 (cf_a3inv = 1), this result in a physical density threshold of 142857 times 10^-5  mathrmcm^-3, or adding the proton mass a value of:\n\nlog_10 rho  mathrmM_odot  kpc^-3 = 2548\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.CPU_REL_PATH","page":"Global constants","title":"GalaxyInspector.CPU_REL_PATH","text":"Relative path, within the simulation directory, of the cpu.txt file.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.ColorType","page":"Global constants","title":"GalaxyInspector.ColorType","text":"Color type.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/globals/#GalaxyInspector.DEFAULT_THEME","page":"Global constants","title":"GalaxyInspector.DEFAULT_THEME","text":"Default plot theme.\n\nRegarding the graphic units used, we know that 1  mathrmmm = 283466  mathrmpt and 1  mathrmin = 254  mathrmmm. Then, if we want 1  mathrmcodeunit = 01  mathrmmm in vector graphics, we have to use pt_per_unit = 0.283466.\n\nFor pixel images, we control the ppi with px_per_unit. A resonable high ppi is 600. So, using px_per_unit = 23622 we get 23622  mathrmpxmm sim 600  mathrmpxin (remember that 1  mathrmcodeunit = 01  mathrmmm).\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.DISK_R","page":"Global constants","title":"GalaxyInspector.DISK_R","text":"Characteristic radius.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.FELDMANN2020_DATA_PATH","page":"Global constants","title":"GalaxyInspector.FELDMANN2020_DATA_PATH","text":"Path to the file with the global galactic properties from Feldmann (2020).\n\nReferences\n\nR. Feldmann (2020). The link between star formation and gas in nearby galaxies. Communications Physics 3(226). doi:10.1038/s42005-020-00493-0\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.GAS_ABUNDANCE","page":"Global constants","title":"GalaxyInspector.GAS_ABUNDANCE","text":"Symbol list for the gas abundance quantities.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.HESTIA_SUBHALOS","page":"Global constants","title":"GalaxyInspector.HESTIA_SUBHALOS","text":"Subhalo numbers for the MW and M31 in Hestia simulations.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.HUBBLE_CONSTANT","page":"Global constants","title":"GalaxyInspector.HUBBLE_CONSTANT","text":"Hubble constant in mathrmGyr^-1.\n\nThis value corresponds to H_0 = 0102201  mathrmGyr^-1 = 100  mathrmkm  mathrms^-1  mathrmMpc^-1.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.ILLUSTRIS_L_UNIT","page":"Global constants","title":"GalaxyInspector.ILLUSTRIS_L_UNIT","text":"Internal unit of length used in IllustrisTNG, equivalent to 10   mathrmkpc. See the documentation here\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.ILLUSTRIS_M_UNIT","page":"Global constants","title":"GalaxyInspector.ILLUSTRIS_M_UNIT","text":"Internal unit of mass used in IllustrisTNG, equivalent to 10^10  mathrmM_odot. See the documentation here\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.ILLUSTRIS_V_UNIT","page":"Global constants","title":"GalaxyInspector.ILLUSTRIS_V_UNIT","text":"Internal unit of velocity used in IllustrisTNG, equivalent to 10  mathrmkm  s^-1. See the documentation here\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.INDEX_PARTICLE","page":"Global constants","title":"GalaxyInspector.INDEX_PARTICLE","text":"Type of cell/particle corresponding to each code index.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.ISOLATED_PARTICLE_NAMES","page":"Global constants","title":"GalaxyInspector.ISOLATED_PARTICLE_NAMES","text":"Human readable name for each type of cell/particle.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.IndexType","page":"Global constants","title":"GalaxyInspector.IndexType","text":"Index type.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/globals/#GalaxyInspector.KS98_SFR_RANGE","page":"Global constants","title":"GalaxyInspector.KS98_SFR_RANGE","text":"Range of values for\n\nSigma_mathrmSFR  mathrmM_odot  yr^-1  kpc^-2  \n\nfrom the combine data (Table 1 and 2) in Kennicutt (1998).\n\nReferences\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.LINE_STYLES","page":"Global constants","title":"GalaxyInspector.LINE_STYLES","text":"Default list of line styles.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.LONG_PARTICLE_INDEX","page":"Global constants","title":"GalaxyInspector.LONG_PARTICLE_INDEX","text":"Code index for each type of cell/particle.\n\nReferences\n\nSee for example Gadget2 User's Guide, or Gadget4 documentation.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.LONG_PARTICLE_NAMES","page":"Global constants","title":"GalaxyInspector.LONG_PARTICLE_NAMES","text":"Human readable name for each type of cell/particle.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.LineStyleType","page":"Global constants","title":"GalaxyInspector.LineStyleType","text":"Line style type.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/globals/#GalaxyInspector.MARKERS","page":"Global constants","title":"GalaxyInspector.MARKERS","text":"Default list of marker types.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.MOLLA2015_DATA_PATH","page":"Global constants","title":"GalaxyInspector.MOLLA2015_DATA_PATH","text":"Path to the file with the Milky Way profiles from Mollá et al. (2015).\n\nReferences\n\nM. Mollá et al. (2015). Galactic chemical evolution: stellar yields and the initial mass function. Monthly Notices of the Royal Astronomical Society 451(4), 3693–3708. doi:10.1093/mnras/stv1102\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.MORPHOLOGICAL_COMPONENTS","page":"Global constants","title":"GalaxyInspector.MORPHOLOGICAL_COMPONENTS","text":"Human readable name for each morphological component.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.N_KS98","page":"Global constants","title":"GalaxyInspector.N_KS98","text":"Slope of the Kennicutt-Schmidt law, taken from Kennicutt (1998) (Section 4, Equation 4).\n\nSigma_mathrmSFR = a left( fracSigma_mathrmgas1  mathrmM_odot  pc^-2 right)^N mathrmM_odot  yr^-1  kpc^-2  \n\nReferences\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.P0","page":"Global constants","title":"GalaxyInspector.P0","text":"Reference pressure for the molecular fraction-pressure relation, taken from Blitz et al. (2006) (Table 2, \"Mean\" row, Third column).\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.PARTICLE_CODE_NAME","page":"Global constants","title":"GalaxyInspector.PARTICLE_CODE_NAME","text":"Internal code name (data group in the HDF5 output) corresponding to each type of cell/particle.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.PARTICLE_TYPE","page":"Global constants","title":"GalaxyInspector.PARTICLE_TYPE","text":"Type of cell/particle corresponding to each internal code name (data group in the HDF5 output).\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.PASS_ALL","page":"Global constants","title":"GalaxyInspector.PASS_ALL","text":"Default filter dictionary that does not exclude any cells/particles.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.PASS_NONE","page":"Global constants","title":"GalaxyInspector.PASS_NONE","text":"Filter that excludes every cell/particle.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.PHYSICAL_UNITS","page":"Global constants","title":"GalaxyInspector.PHYSICAL_UNITS","text":"If physical units (lengths) will be used, instead of comoving units (lengths).\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.ReducedIndexType","page":"Global constants","title":"GalaxyInspector.ReducedIndexType","text":"Reduced index type.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/globals/#GalaxyInspector.SFR_REL_PATH","page":"Global constants","title":"GalaxyInspector.SFR_REL_PATH","text":"Relative path, within the simulation directory, of the sfr.txt file.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.SOLAR_ABUNDANCE","page":"Global constants","title":"GalaxyInspector.SOLAR_ABUNDANCE","text":"Solar abundances.\n\nThey are defined as 12 + log_10(N_mathrmX  N_mathrmH), where N_mathrmX and N_mathrmH are the number densities of element mathrmX and hydrogen respectively.\n\nReferences\n\nM. Asplund et al. (2009). The Chemical Composition of the Sun. Annual Review of Astronomy and Astrophysics, 47(1), 481–522. doi:10.1146/annurev.astro.46.060407.145222\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.STELLAR_ABUNDANCE","page":"Global constants","title":"GalaxyInspector.STELLAR_ABUNDANCE","text":"Symbol list for the stellar abundance quantities.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.THRESHOLD_DENSITY","page":"Global constants","title":"GalaxyInspector.THRESHOLD_DENSITY","text":"Threshold density above which the gas cells/particles can turn into stars.\n\nThis value corresponds to CritPhysDensity = 0318  mathrmcm^-3 in the param.txt file (used in cosmological and non-cosmological simulations). Which is converted to internal units within the code using PhysDensThresh = CritPhysDensity * PROTONMASS / HYDROGEN_MASSFRAC / UnitDensity_in_cgs. Then, to go to physical units again one has to do: PhysDensThresh * UnitDensity_in_cgs * cf_a3inv * HubbleParam * HubbleParam.\n\nPhysDensThresh = 103378 times 10^6 [internal units of density]\n\nFor a cosmological simulation at readshift 0 (cf_a3inv = 1), this result in a physical density threshold of 0192  mathrmcm^-3, or adding the proton mass a value of:\n\nlog_10 rho  mathrmM_odot  kpc^-3 = 6677\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.a_KS98","page":"Global constants","title":"GalaxyInspector.a_KS98","text":"Intercept of the Kennicutt-Schmidt law, taken from Kennicutt (1998) (Section 4, Equation 4).\n\nSigma_mathrmSFR = a left( fracSigma_mathrmgas1  mathrmM_odot  pc^-2 right)^N mathrmM_odot  yr^-1  kpc^-2  \n\nReferences\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.logging","page":"Global constants","title":"GalaxyInspector.logging","text":"If logging messages will printed out.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/globals/#GalaxyInspector.CircularGrid","page":"Global constants","title":"GalaxyInspector.CircularGrid","text":"Circular grid (2D or 3D).\n\nSeries of concentric rings or spherical shells.\n\nFields\n\ngrid::Vector{<:Number}: Vector with the distance of each bin to the center of the grid.\nticks::Vector{<:Number}: Vector with the edges of the bins.\ncenter::Vector{<:Number}: 3D location of the center of the grid. In the 2D case the grid is assumed to be in the xy plane.\nbin_area::Vector{<:Number}: Area of each ring.\nbin_volumes::Vector{<:Number}: Volume of each spherical shell.\nlog::Bool: If the grid is logarithmic.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/globals/#GalaxyInspector.CubicGrid","page":"Global constants","title":"GalaxyInspector.CubicGrid","text":"Cubic grid (3D).\n\nFields\n\ngrid::Array{NTuple{3,<:Number},3}: Matrix with the physical coordinates of each voxel in the grid.\nx_ticks::Vector{<:Number}: Full set of possible values for the x coordinate.\ny_ticks::Vector{<:Number}: Full set of possible values for the y coordinate.\nz_ticks::Vector{<:Number}: Full set of possible values for the z coordinate.\nphysical_size::Number: Side length of the cubic grid.\nn_bins::Int: Number of bins per side of the grid.\nbin_width::Number: Side length of each bin.\nbin_area::Number: Face area of each bin.\nbin_volume::Number: Volume of each bin.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/globals/#GalaxyInspector.GroupCatHeader","page":"Global constants","title":"GalaxyInspector.GroupCatHeader","text":"Data in the \"Header\" group of a HDF5 group catalog file.\n\nDefault values are for when there are no group catalog files.\n\nFields\n\nbox_size::Float64 = NaN: Total size of the simulation box.\nh0::Float64 = NaN: Hubble parameter.\nn_groups_part::Int32 = -1: Number of halos (FoF groups) in this file chunk.\nn_groups_total::Int32 = -1: Total number of halos (FoF groups) in this snapshot.\nn_subgroups_part::Int32 = -1: Number of subhalos (subfind) in this file chunk.\nn_subgroups_total::Int32 = -1: Total number of subhalos (subfind) in this snapshot.\nnum_files::Int32 = -1: Number of file chunks per snapshot.\nomega_0::Float64 = NaN: The cosmological density parameter for matter.\nomega_l::Float64 = NaN: The cosmological density parameter for the cosmological constant.\nredshift::Float64 = NaN: The redshift.\ntime::Float64 = NaN: The physical time/scale factor.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/globals/#GalaxyInspector.GroupCatalog","page":"Global constants","title":"GalaxyInspector.GroupCatalog","text":"Metadata for a group catalog file.\n\nFields\n\npath::Union{String,Missing}: Full path to the group catalog file.\nheader::GroupCatHeader: Header of the group catalog.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/globals/#GalaxyInspector.InternalUnits","page":"Global constants","title":"GalaxyInspector.InternalUnits","text":"Unit conversion factors.\n\nFields\n\nx_cgs::Unitful.Length: Length, from internal units to mathrmcm.\nx_cosmo::Unitful.Length: Length, from internal units to mathrmkpc.\nx_comoving::Unitful.Length: Length, from internal units to mathrmckpc.\nv_cgs::Unitful.Velocity: Velocity, from internal units to mathrmcm  s^-1.\nv_cosmo::Unitful.Velocity: Velocity, from internal units to mathrmkm  s^-1.\nm_cgs::Unitful.Mass: Mass, from internal units to mathrmg.\nm_cosmo::Unitful.Mass: Mass, from internal units to mathrmM_odot.\nt_cgs::Unitful.Time: Time, from internal units to mathrms.\nt_cosmo::Unitful.Time: Time, from internal units to mathrmMyr.\nU_cgs::Unitful.Energy: Specific energy, from internal units to mathrmerg  g^-1.\nrho_cgs::Unitful.Density: Density, from internal units to mathrmg  cm^-3.\nP_Pa::Unitful.Pressure: Pressure, from internal units to mathrmPa.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/globals/#GalaxyInspector.LinearGrid","page":"Global constants","title":"GalaxyInspector.LinearGrid","text":"Linear grid (1D).\n\nFields\n\ngrid::Vector{<:Number}: Vector with the central value of each bin.\nticks::Vector{<:Number}: Vector with the edges of the bins.\nbin_widths::Vector{<:Number}: Widths of the bins.\nlog::Bool: If the grid is logarithmic.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/globals/#GalaxyInspector.PlotParams","page":"Global constants","title":"GalaxyInspector.PlotParams","text":"Plotting parameters for a quantity.\n\nFields\n\nrequest::Dict{Symbol,Vector{String}} = Dict{Symbol,Vector{String}}(): Data request for readSnapshot. It must have the shape cell/particle type -> [block, block, block, ...].\nvar_name::AbstractString = \"\": Name of the quantity for the plot axis. It should not include units or scaling factors.\nexp_factor::Int = 0: Numerical exponent to scale down the axis, e.g. if x_exp_factor = 10 the values will be divided by 10^10. The default is no scaling.\nunit::Unitful.Units = Unitful.NoUnits: Target unit for the axis.\naxis_label::AbstractString = \"auto_label\": Label for the axis. It can contain the string auto_label, which will be replaced by the default label: var_name / 10^exp_factor unit.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/globals/#GalaxyInspector.Qty","page":"Global constants","title":"GalaxyInspector.Qty","text":"Dimensional information about a physical quantity.\n\nFields\n\nhdf5_name::String: HDF5 block name.\ndimensions::Unitful.Dimensions: Physical dimensions of the quantity, e.g. Unitful.𝐋 * Unitful.𝐓^-1.\nunit::Union{Unitful.Units,Symbol}: Units of the quantity within the simulation code. It can be a unit from Unitful or UnitfulAstro, or it can be the symbol :internal which denotes internal code units.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/globals/#GalaxyInspector.Simulation","page":"Global constants","title":"GalaxyInspector.Simulation","text":"Metadata for a simulation.\n\nFields\n\npath::String: Full path to the simulation directory.\nindex::Int: An index associated with the simulation.\nslice::IndexType: Slice of the simulation, i.e. which snapshots will be read. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots).\ncosmological::Bool: If the simulation is cosmological,\nfalse -> Newtonian simulation    (ComovingIntegrationOn = 0).\ntrue  -> Cosmological simulation (ComovingIntegrationOn = 1).\ntable::DataFrame: A dataframe where each row is a snapshot, and the following 8 colums:\n:ids            -> Dataframe index of each snapshot, i.e. if there are 10 snapshots in total it runs from 1 to 10.\n:numbers        -> Number in the file name of each snapshot.\n:scale_factors  -> Scale factor of each snapshot.\n:redshifts      -> Redshift of each snapshot.\n:physical_times -> Physical time since the Big Bang.\n:lookback_times -> Physical time left to reach the last snapshot.\n:snapshot_paths -> Full path to each snapshots.\n:groupcat_paths -> Full path to each group catalog files.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/globals/#GalaxyInspector.Snapshot","page":"Global constants","title":"GalaxyInspector.Snapshot","text":"Metadata for a snapshot.\n\nFields\n\npath::String: Full path to the snapshot.\nglobal_index::Int: Index of the snapshot in the context of the whole simulation.\nslice_index::Int: Index of the snapshot in the context of the slice.\nphysical_time::Unitful.Time: Physical time since the Big Bang.\nlookback_time::Unitful.Time: Physical time left to reach the last snapshot.\nscale_factor::Float64: Scale factor of the snapshot.\nredshift::Float64: Redshift of the snapshot.\nheader::SnapshotHeader: Header of the snapshot.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/globals/#GalaxyInspector.SnapshotHeader","page":"Global constants","title":"GalaxyInspector.SnapshotHeader","text":"Data in the \"Header\" group of a HDF5 snapshot file.\n\nFields\n\nbox_size::Float64: Total size of the simulation box.\nh0::Float64: Hubble parameter.\nmass_table::Vector{Float64}: Masses of particle types which have a constant mass.\nnum_files::Int32: Number of file chunks per snapshot.\nnum_part::Vector{Int32}: Number of particles (of each type) included in this file chunk.\nnum_total::Vector{UInt32}: Total number of particles (of each type) for this snapshot.\nomega_0::Float64: The cosmological density parameter for matter.\nomega_l::Float64: The cosmological density parameter for the cosmological constant.\nredshift::Float64: The redshift.\ntime::Float64: The physical time/scale factor.\nl_unit::Unitful.Length: Conversion factor from internal units of length to centimeters.\nm_unit::Unitful.Mass: Conversion factor from internal units of mass to grams.\nv_unit::Unitful.Velocity: Conversion factor from internal units of velocity to centimeters per second.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/globals/#GalaxyInspector.SquareGrid","page":"Global constants","title":"GalaxyInspector.SquareGrid","text":"Square grid (2D).\n\nFields\n\ngrid::Matrix{NTuple{2,<:Number}}: Matrix with the physical coordinates of each pixel in the grid.\nx_ticks::Vector{<:Number}: Full set of possible values for the x coordinate.\ny_ticks::Vector{<:Number}: Full set of possible values for the y coordinate.\nphysical_size::Number: Side length of the square grid.\nn_bins::Int: Number of bins per side of the grid.\nbin_width::Number: Side length of each bin.\nbin_area::Number: Area of each bin.\n\n\n\n\n\n","category":"type"},{"location":"api/constants/arepo/#Arepo-constants","page":"Arepo constants","title":"Arepo constants","text":"","category":"section"},{"location":"api/constants/arepo/","page":"Arepo constants","title":"Arepo constants","text":"This is a list of constant and types used in GalaxyInspector, specific for the Arepo codebase.","category":"page"},{"location":"api/constants/arepo/","page":"Arepo constants","title":"Arepo constants","text":"None of these constants and types are exported.","category":"page"},{"location":"api/constants/arepo/","page":"Arepo constants","title":"Arepo constants","text":"","category":"page"},{"location":"api/constants/arepo/","page":"Arepo constants","title":"Arepo constants","text":"Modules = [GalaxyInspector]\nPages   = [\"constants/arepo.jl\"]","category":"page"},{"location":"api/constants/arepo/#GalaxyInspector.ELEMENT_INDEX","page":"Arepo constants","title":"GalaxyInspector.ELEMENT_INDEX","text":"Code index for each tracked element.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/arepo/#GalaxyInspector.GC_BASENAME","page":"Arepo constants","title":"GalaxyInspector.GC_BASENAME","text":"Base name of the group catalog files.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/arepo/#GalaxyInspector.HYDROGEN_MASSFRAC","page":"Arepo constants","title":"GalaxyInspector.HYDROGEN_MASSFRAC","text":"Mass fraction of hydrogen.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/arepo/#GalaxyInspector.METAL_LIST","page":"Arepo constants","title":"GalaxyInspector.METAL_LIST","text":"List of element indices above helium.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/arepo/#GalaxyInspector.PARTICLE_INDEX","page":"Arepo constants","title":"GalaxyInspector.PARTICLE_INDEX","text":"Current cell/particle index in use.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/arepo/#GalaxyInspector.PARTICLE_NAMES","page":"Arepo constants","title":"GalaxyInspector.PARTICLE_NAMES","text":"Current human readable name of each cell/particle type in use.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/arepo/#GalaxyInspector.QUANTITIES","page":"Arepo constants","title":"GalaxyInspector.QUANTITIES","text":"Dictionary of dimensional properties for the quantities in the code.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/arepo/#GalaxyInspector.SNAP_BASENAME","page":"Arepo constants","title":"GalaxyInspector.SNAP_BASENAME","text":"Base name of the snapshot files, set in the code variable SnapshotFileBase.\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/arepo/#GalaxyInspector.SOLAR_METALLICITY","page":"Arepo constants","title":"GalaxyInspector.SOLAR_METALLICITY","text":"Solar metallicity, as used in Arepo.\n\nReferences\n\nM. Asplund et al. (2006). The new solar abundances - Part I: the observations. Communications in Asteroseismology, 147. doi:10.1553/cia147s76\n\n\n\n\n\n","category":"constant"},{"location":"api/constants/arepo/#GalaxyInspector.TRACER_MASS","page":"Arepo constants","title":"GalaxyInspector.TRACER_MASS","text":"Mass of the tracers in internal code units. Its value comes from All.TargetGasMass = All.TargetGasMassFactor * All.ReferenceGasPartMass in the code.\n\n\n\n\n\n","category":"constant"},{"location":"intro/#GalaxyInspector","page":"Introduction","title":"GalaxyInspector","text":"","category":"section"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"A Julia module for the data analysis of galaxy simulations.","category":"page"},{"location":"api/analysis/compute_quantities/masses/#Computation-of-characteristic-masses-and-mass-related-quantities","page":"Computation of characteristic masses and mass related quantities","title":"Computation of characteristic masses and mass related quantities","text":"","category":"section"},{"location":"api/analysis/compute_quantities/masses/","page":"Computation of characteristic masses and mass related quantities","title":"Computation of characteristic masses and mass related quantities","text":"These functions are used internally and none are exported. ","category":"page"},{"location":"api/analysis/compute_quantities/masses/","page":"Computation of characteristic masses and mass related quantities","title":"Computation of characteristic masses and mass related quantities","text":"These functions depend on the particulars of the simulation code (e.g. units).","category":"page"},{"location":"api/analysis/compute_quantities/masses/","page":"Computation of characteristic masses and mass related quantities","title":"Computation of characteristic masses and mass related quantities","text":"","category":"page"},{"location":"api/analysis/compute_quantities/masses/","page":"Computation of characteristic masses and mass related quantities","title":"Computation of characteristic masses and mass related quantities","text":"Modules = [GalaxyInspector]\nPages   = [\"analysis/compute_quantities/masses.jl\"]","category":"page"},{"location":"api/analysis/compute_quantities/masses/#GalaxyInspector.computeAbundance-Tuple{Dict, Symbol, Symbol}","page":"Computation of characteristic masses and mass related quantities","title":"GalaxyInspector.computeAbundance","text":"computeAbundance(\n    data_dict::Dict,\n    component::Symbol,\n    element::Symbol;\n    <keyword arguments>\n)::Float64\n\nCompute the abundance of a given element in each cell/particle of type component. The abundance is defined as n_X  n_H where n_X is the number of atoms of element X and n_H the number of hydrogen atoms.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ncomponent::Symbol: For which cell/particle type the abundance will be calculated. The possibilities are :stars and :gas.\nelement::Symbol: Target element. The possibilities are the keys of ELEMENT_INDEX.\nsolar::Bool=false: If the result will be normalized to the solar abundance or not.\n\nReturns\n\nThe abundance of element in each cell/particle of type component.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/masses/#GalaxyInspector.computeDiscAccretion-Tuple{Dict, Dict}","page":"Computation of characteristic masses and mass related quantities","title":"GalaxyInspector.computeDiscAccretion","text":"computeDiscAccretion(\n    present_dd::Dict,\n    past_dd::Dict;\n    <keyword arguments>\n)::NTuple{3,Unitful.Mass}\n\nCompute the inflow, outflow, and net gain of mass for a given cylinder, between two snapshots.\n\nArguments\n\npresent_dd::Dict: A dictionary, for the present snapshot, with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\npast_dd::Dict: A dictionary, for the past snapshot, with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nmax_r::Unitful.Length=DISK_R: Radius of the cylinder.\nmax_z::Unitful.Length=5.0u\"kpc\": Half height of the cylinder.\n\nReturns\n\nA tuple with three elements:\nThe net increase in mass.\nThe inflow mass.\nThe outflow mass.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/masses/#GalaxyInspector.computeElementMass-Tuple{Dict, Symbol, Symbol}","page":"Computation of characteristic masses and mass related quantities","title":"GalaxyInspector.computeElementMass","text":"computeElementMass(\n    data_dict::Dict,\n    component::Symbol,\n    element::Symbol,\n)::Vector{<:Unitful.Mass}\n\nCompute the total mass of element in each cell/particle.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ncomponent::Symbol: For which cell/particle type the mass will be calculated. The possibilities are :stars and :gas.\nelement::Symbol: Target element. The possibilities are the keys of ELEMENT_INDEX.\n\nReturns\n\nThe total mass of element in each cell/particle.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/masses/#GalaxyInspector.computeGlobalAbundance-Tuple{Dict, Symbol, Symbol}","page":"Computation of characteristic masses and mass related quantities","title":"GalaxyInspector.computeGlobalAbundance","text":"computeGlobalAbundance(\n    data_dict::Dict,\n    component::Symbol,\n    element::Symbol;\n    <keyword arguments>\n)::Float64\n\nCompute the total abundance of a given element, as n_X  n_H where n_X is the number of atoms of element X and n_H the number of hydrogen atoms.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ncomponent::Symbol: For which cell/particle type the abundance will be calculated. The possibilities are :stars and :gas.\nelement::Symbol: Target element. The possibilities are the keys of ELEMENT_INDEX.\nsolar::Bool=false: If the result will be normalized to the solar abundance or not.\n\nReturns\n\nThe total abundance of element.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/masses/#GalaxyInspector.computeMass-Tuple{Dict, Symbol}","page":"Computation of characteristic masses and mass related quantities","title":"GalaxyInspector.computeMass","text":"computeMass(data_dict::Dict, component::Symbol)::Vector{<:Unitful.Mass}\n\nCompute the mass in each cell/particle of a given component.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ncomponent::Symbol: For which cell/particle type the mass will be calculated. The options are:\n:gas          -> Gas mass.\n:stars        -> Stellar mass.\n:hydrogen     -> Hydrogen mass.\n:helium       -> Helium mass.\n:dark_matter  -> Dark matter mass.\n:black_holes  -> Black hole mass.\n:molecular    -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic       -> Atomic hydrogen (mathrmHI) mass.\n:ionized      -> Ionized hydrogen (mathrmHII) mass.\n:neutral      -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar      -> Stellar gas mass (according to out SF model).\n\nReturns\n\nThe mass of component in each cell/particle.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/masses/#GalaxyInspector.computeMassFraction-Tuple{Vector{<:Number}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}, Tuple{Number, Number}}","page":"Computation of characteristic masses and mass related quantities","title":"GalaxyInspector.computeMassFraction","text":"computeMassPercent(\n    quantity::Vector{<:Number},\n    masses::Vector{<:Unitful.Mass},\n    qty_limits::Tuple{<:Number,<:Number},\n)::Float64\n\nCompute the fraction of the total mass \"contained\" within a given values of quantity.\n\nArguments\n\nquantity::Vector{<:Number}: Target quantity.\nmasses::Vector{<:Unitful.Mass}: Masses of the cells/particles.\nqty_limits::Tuple{<:Number,<:Number}: Limits of the target quantity.\n\nReturns\n\nThe fraction of the total mass \"contained\" within a given value of quantity.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/masses/#GalaxyInspector.computeMassHeight-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Computation of characteristic masses and mass related quantities","title":"GalaxyInspector.computeMassHeight","text":"computeMassHeight(\n    positions::Matrix{<:Unitful.Length},\n    masses::Vector{<:Unitful.Mass};\n    <keyword arguments>\n)::Unitful.Length\n\nCompute the total height of a cylinder, of infinite radius, containing percet% of the total mass.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Masses of the cells/particles.\npercent::Float64=90.0: Target percentage of the total mass.\n\nReturns\n\nThe height containing percet% of the total mass.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/masses/#GalaxyInspector.computeMassQty-Tuple{Vector{<:Number}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Computation of characteristic masses and mass related quantities","title":"GalaxyInspector.computeMassQty","text":"computeMassQty(\n    quantity::Vector{<:Number},\n    masses::Vector{<:Unitful.Mass};\n    <keyword arguments>\n)::Number\n\nCompute the maximum value of quantity that \"contains\" percet% of the total mass.\n\nArguments\n\nquantity::Vector{<:Number}: Target quantity.\nmasses::Vector{<:Unitful.Mass}: Masses of the cells/particles.\npercent::Float64=90.0: Target percentage of the total mass.\n\nReturns\n\nThe maximum value of quantity that \"contains\" percet% of the total mass.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/masses/#GalaxyInspector.computeMassRadius-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Computation of characteristic masses and mass related quantities","title":"GalaxyInspector.computeMassRadius","text":"computeMassRadius(\n    positions::Matrix{<:Unitful.Length},\n    masses::Vector{<:Unitful.Mass};\n    <keyword arguments>\n)::Unitful.Length\n\nCompute the radius containing percent% of the total mass.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Masses of the cells/particles.\npercent::Float64=90.0: Target percentage of the total mass.\n\nReturns\n\nThe radius containing percent% of the total mass.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/masses/#GalaxyInspector.computeMetalMass-Tuple{Dict, Symbol}","page":"Computation of characteristic masses and mass related quantities","title":"GalaxyInspector.computeMetalMass","text":"computeMetalMass(data_dict::Dict, component::Symbol)::Vector{<:Unitful.Mass}\n\nCompute the total mass of metals (elements above helium) in each cell/particle.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ncomponent::Symbol: For which cell/particle type the mass will be calculated. The possibilities are :stars and :gas.\n\nReturns\n\nThe total metal mass in each cell/particle.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/masses/#GalaxyInspector.computeNumberDensity-Tuple{Dict, Symbol}","page":"Computation of characteristic masses and mass related quantities","title":"GalaxyInspector.computeNumberDensity","text":"computeNumberDensity(data_dict::Dict, component::Symbol)::Vector{<:NumberDensity}\n\nCompute the number density in each cell/particle of a given component.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ncomponent::Symbol: For which cell/particle type the mass will be calculated. The options are:\n:gas          -> Gas number density.\n:hydrogen     -> Hydrogen number density.\n:helium       -> Helium number density.\n:molecular    -> Molecular hydrogen (mathrmH_2) number density.\n:br_molecular -> Molecular hydrogen (mathrmH_2) number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic       -> Atomic hydrogen (mathrmHI) number density.\n:ionized      -> Ionized hydrogen (mathrmHII) number density.\n:neutral      -> Neutral hydrogen (mathrmHI + H_2) number density.\n\nReturns\n\nThe number density of component in each cell/particle.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/masses/#GalaxyInspector.computeVirialAccretion-Tuple{Dict, Dict}","page":"Computation of characteristic masses and mass related quantities","title":"GalaxyInspector.computeVirialAccretion","text":"computeVirialAccretion(\n    present_dd::Dict,\n    past_dd::Dict;\n    <keyword arguments>\n)::NTuple{3,Unitful.Mass}\n\nCompute the inflow, outflow, and net gain of mass for a given halo virial radius (R_200), between two snapshots.\n\nArguments\n\npresent_dd::Dict: A dictionary, for the present snapshot, with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\npast_dd::Dict: A dictionary, for the past snapshot, with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nhalo_idx::Int=1: Index of the target halo (FoF group). Starts at 1.\n\nReturns\n\nA tuple with three elements:\nThe net increase in mass.\nThe inflow mass.\nThe outflow mass.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/masses/#GalaxyInspector.computeVolumeDensity-Tuple{Dict, Symbol}","page":"Computation of characteristic masses and mass related quantities","title":"GalaxyInspector.computeVolumeDensity","text":"computeVolumeDensity(data_dict::Dict, component::Symbol)::Vector{<:Unitful.Density}\n\nCompute the volume density in each cell/particle of a given component.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ncomponent::Symbol: For which cell/particle type the mass will be calculated. The options are:\n:gas          -> Gas density.\n:hydrogen     -> Hydrogen density.\n:helium       -> Helium density.\n:molecular    -> Molecular hydrogen (mathrmH_2) density.\n:br_molecular -> Molecular hydrogen (mathrmH_2) density, computed using the pressure relation in Blitz et al. (2006).\n:atomic       -> Atomic hydrogen (mathrmHI) density.\n:ionized      -> Ionized hydrogen (mathrmHII) density.\n:neutral      -> Neutral hydrogen (mathrmHI + H_2) density.\n:stellar      -> Stellar gas fraction (according to out SF model).\n\nReturns\n\nThe density of component in each cell/particle.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/post_processing/#Post-processing-functions","page":"Post processing functions","title":"Post processing functions","text":"","category":"section"},{"location":"api/plotting/post_processing/","page":"Post processing functions","title":"Post processing functions","text":"These functions are used internally and none are exported. ","category":"page"},{"location":"api/plotting/post_processing/","page":"Post processing functions","title":"Post processing functions","text":"A post-processing function must take a Makie figure, add something to it, and return how to label the additions (or nothing when no new labels should be drawn).","category":"page"},{"location":"api/plotting/post_processing/#Expected-signature:","page":"Post processing functions","title":"Expected signature:","text":"","category":"section"},{"location":"api/plotting/post_processing/","page":"Post processing functions","title":"Post processing functions","text":"  post_processing(figure, args...; kwargs...) -> ([marker, ...], [label, ...])","category":"page"},{"location":"api/plotting/post_processing/","page":"Post processing functions","title":"Post processing functions","text":"where:","category":"page"},{"location":"api/plotting/post_processing/","page":"Post processing functions","title":"Post processing functions","text":"figure::Makie.Figure\nmarker::LegendElement\nlabel::String","category":"page"},{"location":"api/plotting/post_processing/","page":"Post processing functions","title":"Post processing functions","text":"","category":"page"},{"location":"api/plotting/post_processing/","page":"Post processing functions","title":"Post processing functions","text":"Modules = [GalaxyInspector]\nPages   = [\"plotting/post_processing.jl\"]","category":"page"},{"location":"api/plotting/post_processing/#GalaxyInspector.ppAnnotation!-Tuple{Makie.Figure, AbstractString}","page":"Post processing functions","title":"GalaxyInspector.ppAnnotation!","text":"ppAnnotation!(figure::Makie.Figure, text::AbstractString; <keyword arguments>)::Nothing\n\nAdd an annotation to the plot.\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\ntext::AbstractString: Text to be written.\nposition::Tuple{<:Real,<:Real}=(0.04, 0.98): Relative position of the top left corner of the text box.\ncolor=:black: Text color.\nfontsize::Int=35: Font size.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/post_processing/#GalaxyInspector.ppBarPlotLabels-Tuple{Makie.Figure, Bool}","page":"Post processing functions","title":"GalaxyInspector.ppBarPlotLabels","text":"ppBarPlotLabels(\n    ::Makie.Figure,\n    include_stars::Bool;\n    <keyword arguments>\n)::Tuple{Vector{<:LegendElement},Vector{AbstractString}}\n\nReturn the legend elements for the plot made by gasBarPlot.\n\nArguments\n\n::Makie.Figure: Makie figure to be drawn over.\ninclude_stars::Bool=false: If the stars will be included as one of the gas phases.\ncolors=Makie.wong_colors(): Colors for the bars.\n\nReturns\n\nA tuple with the elements for the legend:\nA PolyElements to be used in the legend.\nThe label strings.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/post_processing/#GalaxyInspector.ppBigiel2008!-Tuple{Makie.Figure, Bool}","page":"Post processing functions","title":"GalaxyInspector.ppBigiel2008!","text":"ppBigiel2008!(\n    figure::Makie.Figure,\n    molecular::Bool;\n    <keyword arguments>\n)::Union{Tuple{Vector{<:LegendElement},Vector{AbstractString}},Nothing}\n\nDraw a line plot with the fit for the KS law, taken from Bigiel et al. (2008).\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\nmolecular::Bool: If the x axis will be the area mass density of molecular hydrogen, or, if set to false, the area mass density of neutral hydrogen.\nx_unit::Unitful.Units=u\"Msun * pc^-2\": Unit for the area density of gas used in figure.\ny_unit::Unitful.Units=u\"Msun * yr^-1 * kpc^-2\": Unit for the area density of star formation rate used in figure.\nx_log::Bool=true: If the x axis is log_10(Sigma_mathrmH) (x_log = true) or just Sigma_mathrmH (x_log = false).\ny_log::Bool=true: If the y axis is log_10(Sigma_mathrmSFR) (y_log = true) or just Sigma_mathrmSFR  (y_log = false).\nextend::Float64=0.0: By default the y axis limits of the line will be the vertical range of point in the plot. This can be extended by the fraction extend of the vertical range.\ncolors::Vector{<:ColorType}=[Makie.wong_colors()[6], Makie.wong_colors()[7]]: Colors for the line. The first color will indicate the range for which there are experimental data, and the second color will be for the extrapolation.\nlinestyle::LineStyleType=nothing: Style of the line. nothing will produce a solid line.\nlinewidth::Int=3: Line width.\n\nReturns\n\nA tuple with the elements for the legend:\nA LineElement to be used as the marker.\nThe label string.\n\nReferences\n\nF. Bigiel et al. (2008). THE STAR FORMATION LAW IN NEARBY GALAXIES ON SUB-KPC SCALES. The Astrophysical Journal, 136(6), 2846. doi:10.1088/0004-6256/136/6/2846\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/post_processing/#GalaxyInspector.ppBigiel2010!-Tuple{Makie.Figure}","page":"Post processing functions","title":"GalaxyInspector.ppBigiel2010!","text":"ppBigiel2010!(\n    figure::Makie.Figure;\n    <keyword arguments>\n)::Tuple{Vector{<:LegendElement},Vector{AbstractString}}\n\nDraw a scatter plot of the SFR surface density vs gas surface density (Kennicutt-Schmidt law) for a given galaxy, using the data of Bigiel et al. (2010).\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\ngalaxy::Union{String,Symbol}=\"NGC 628\": Target galaxy. The options are:\nWith molecular and and atomic data (Table 2): \"NGC 628\", \"NGC 3184\", \"NGC 3521\", \"NGC 4736\", \"NGC 5055\", \"NGC 5194\", \"NGC 6946\".\nWith only atomic data (Table 3): \"NGC 925\", \"NGC 2403\", \"NGC 2841\", \"NGC 2903\", \"NGC 3198\", \"NGC 3351\", \"NGC 3621\", \"NGC 3627\", \"NGC 5236\", \"NGC 5457\", \"NGC 7331\", \"NGC 7793\".\n:all: Every galaxy that is available for the given quantity.\nFor more information on each galaxy see Bigiel et al. (2010).\nquantity::Symbol=:molecular: Gas quantity for the x axis. The options are:\n:molecular -> Surface density of molecular gas.\n:neutral   -> Surface density of neutral gas.\n:atomic    -> Surface density of atomic gas.\nx_log::Bool=true: If the x axis will be plotted as the log10 of the gas surface density.\ny_log::Bool=true: If the y axis will be plotted as the log10 of the SFR surface density.\nx_unit::Unitful.Units=u\"Msun * kpc^-2\": Unit for the x axis.\ny_unit::Unitful.Units=u\"Msun * yr^-1 *  kpc^-2\": Unit for the y axis.\ncolor::ColorType=Makie.wong_colors()[2]: Color of the markers.\n\nReturns\n\nA tuple with the elements for the legend:\nA MarkerElement to be used as the marker.\nThe label string.\n\nReferences\n\nF. Bigiel et al. (2010). EXTREMELY INEFFICIENT STAR FORMATION IN THE OUTER DISKS OF NEARBY GALAXIES. The Astrophysical Journal, 140(5), 1194. doi:10.1088/0004-6256/140/5/1194\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/post_processing/#GalaxyInspector.ppCross!-Tuple{Makie.Figure, Tuple{Real, Real}}","page":"Post processing functions","title":"GalaxyInspector.ppCross!","text":"ppCross!(\n    figure::Makie.Figure,\n    cross_point::Tuple{<:Real,<:Real};\n    <keyword arguments>\n)::Nothing\n\nDraw two lines, one horizontal and one vertical.\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\ncross_point::Tuple{<:Real,<:Real}: Crossing point of the lines.\ncolor::ColorType=Makie.wong_colors()[6]: Color of the lines.\nlinestyle::LineStyleType=nothing: Style of the lines. nothing will produce a solid line.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/post_processing/#GalaxyInspector.ppFeldmann2020!-Tuple{Makie.Figure, Symbol, Symbol}","page":"Post processing functions","title":"GalaxyInspector.ppFeldmann2020!","text":"ppFeldmann2020!(\n    figure::Makie.Figure,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::Tuple{Vector{<:LegendElement},Vector{AbstractString}}\n\nDraw a line, or scatter, plot using the experimental data from the xGASS and xCOLD GASS collaborations, processed by Feldmann (2020).\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\nx_quantity::Symbol: Quantity for the x axis. The options are:\n:stellar_mass      -> Stellar mass.\n:molecular_mass    -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass       -> Atomic hydrogen (mathrmHI) mass.\n:observational_sfr -> The star formation rate of the last AGE_RESOLUTION.\ny_quantity::Symbol: Quantity for the y axis. The options are:\n:stellar_mass      -> Stellar mass.\n:molecular_mass    -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass       -> Atomic hydrogen (mathrmHI) mass.\n:observational_sfr -> The star formation rate of the last AGE_RESOLUTION.\nscatter::Bool=false: If the data will be presented as a line plot with error bands (default), or alternatively, a scatter plot.\n\nReturns\n\nA tuple with the elements for the legend:\nA MarkerElement to be used as the marker.\nThe label string.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\nR. Feldmann (2020). The link between star formation and gas in nearby galaxies. Communications Physics 3(226). doi:10.1038/s42005-020-00493-0\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/post_processing/#GalaxyInspector.ppFitLine!-Tuple{Makie.Figure}","page":"Post processing functions","title":"GalaxyInspector.ppFitLine!","text":"ppFitLine!(\n    figure::Makie.Figure;\n    <keyword arguments>\n)::Union{Tuple{Vector{<:LegendElement},Vector{AbstractString}},Nothing}\n\nDraw a linear fit for the data in figure.\n\nAn annotation with the equation y = a  x + b, and the fitted values for a and b, will be positioned in the upper right corner of the plot.\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\nwts::Union{Vector{Float64},Nothing}=nothing: Weights for the fits. Set to nothing for a non-weighted fit.\nerror_formating::Symbol=:std_error: Error format for the annotation. The options are:\n:std_error     -> mean ± standard_error.\n:conf_interval -> mean ± max(upper_95 - mean, mean - lower_95).\ncolor::ColorType=Makie.wong_colors()[6],: Color of the line.\nlinestyle::LineStyleType=nothing: Style of the line. nothing will produce a solid line.\nlinewidth::Int=3: Line width.\n\nReturns\n\nA tuple with the elements for the legend:\nA LineElement to be used as the marker.\nThe label string.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/post_processing/#GalaxyInspector.ppHorizontalFlags!-Tuple{Makie.Figure, Vector{<:Real}}","page":"Post processing functions","title":"GalaxyInspector.ppHorizontalFlags!","text":"ppHorizontalFlags!(\n    figure::Makie.Figure,\n    positions::Vector{<:Real};\n    <keyword arguments>\n)::Nothing\n\nDraw horizontal lines.\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\npositions::Vector{<:Real}: The y coordinates of the lines.\ncolors::Vector{<:ColorType}=[:red]: Colors of the lines.\nline_styles::Vector{<:LineStyleType}=[nothing]: Styles of the lines. nothing will produce a solid line.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/post_processing/#GalaxyInspector.ppKennicutt1998!-Tuple{Makie.Figure}","page":"Post processing functions","title":"GalaxyInspector.ppKennicutt1998!","text":"ppKennicutt1998!(\n    figure::Makie.Figure;\n    <keyword arguments>\n)::Union{Tuple{Vector{<:LegendElement},Vector{AbstractString}},Nothing}\n\nDraw a line plot with the fit for the KS relation in Kennicutt (1998).\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\nx_unit::Unitful.Units=u\"Msun * pc^-2\": Unit for the area density of gas used in figure.\ny_unit::Unitful.Units=u\"Msun * yr^-1 * kpc^-2\": Unit for the area density of star formation rate used in figure.\nx_log::Bool=true: If the x axis is log_10(Sigma_mathrmHI + H_2) (x_log = true) or just Sigma_mathrmHI + H_2 (x_log = false).\ny_log::Bool=true: If the y axis is log_10(Sigma_mathrmSFR) (y_log = true) or just Sigma_mathrmSFR (y_log = false).\nextend::Float64=0.0: By default the y axis limits of the line will be the vertical range of point in the plot. This can be extended by the fraction extend of the vertical range.\ncolors::Vector{<:ColorType}=[Makie.wong_colors()[6], Makie.wong_colors()[7]]: Colors for the line. The first color will indicate the range for which there are experimental data, and the second color will be for the extrapolation.\nlinestyle::LineStyleType=nothing: Style of the line. nothing will produce a solid line.\nlinewidth::Int=3: Line width.\n\nReturns\n\nA tuple with the elements for the legend:\nA LineElement to be used as the marker.\nThe label string.\n\nReferences\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/post_processing/#GalaxyInspector.ppMolla2015!-Tuple{Makie.Figure, Symbol}","page":"Post processing functions","title":"GalaxyInspector.ppMolla2015!","text":"ppMolla2015!(\n    figure::Makie.Figure,\n    quantity::Symbol,\n    <keyword arguments>\n)::Tuple{Vector{<:LegendElement},Vector{AbstractString}}\n\nDraw a profile for the Milky Way using the data compiled by Mollá et al. (2015).\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\nquantity::Symbol: Quantity for the y axis. The options are:\n:stellar_area_density      -> Stellar area mass density.\n:molecular_area_density    -> Molecular mass surface density.\n:br_molecular_area_density -> Molecular mass surface density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_area_density       -> Atomic hydrogen area mass density.\n:sfr_area_density          -> Star formation rate area density.\n:X_stellar_abundance       -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). mathrmX can be O (oxygen), N (nitrogen), or C (carbon).\ncolor::ColorType=Makie.wong_colors()[6]: Color of the line.\nlinestyle::LineStyleType=nothing: Style of the line. nothing will produce a solid line.\nerror_bars::Bool=true: If the error bars will be plotted.\n\nReturns\n\nA tuple with the elements for the legend:\nA MarkerElement to be used as the marker.\nThe label string.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\nM. Mollá et al. (2015). Galactic chemical evolution: stellar yields and the initial mass function. Monthly Notices of the Royal Astronomical Society 451(4), 3693–3708. doi:10.1093/mnras/stv1102\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/post_processing/#GalaxyInspector.ppVerticalFlags!-Tuple{Makie.Figure, Vector{<:Real}}","page":"Post processing functions","title":"GalaxyInspector.ppVerticalFlags!","text":"ppVerticalFlags!(\n    figure::Makie.Figure,\n    positions::Vector{<:Real};\n    <keyword arguments>\n)::Nothing\n\nDraw vertical lines.\n\nArguments\n\nfigure::Makie.Figure: Makie figure to be drawn over.\npositions::Vector{<:Real}: The x coordinates of the lines.\ncolors::Vector{<:ColorType}=[:red]: Colors of the lines.\nline_styles::Vector{<:LineStyleType}=[nothing]: Styles of the lines. nothing will produce a solid line.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#Filter-functions","page":"Filter functions","title":"Filter functions","text":"","category":"section"},{"location":"api/analysis/filters/","page":"Filter functions","title":"Filter functions","text":"These functions are used internally and none are exported. ","category":"page"},{"location":"api/analysis/filters/","page":"Filter functions","title":"Filter functions","text":"These functions depend on the particulars of the simulation code (e.g. units).","category":"page"},{"location":"api/analysis/filters/","page":"Filter functions","title":"Filter functions","text":"","category":"page"},{"location":"api/analysis/filters/","page":"Filter functions","title":"Filter functions","text":"Modules = [GalaxyInspector]\nPages   = [\"analysis/filters.jl\"]","category":"page"},{"location":"api/analysis/filters/#GalaxyInspector.filterByBirthPlace-Tuple{Dict, Symbol}","page":"Filter functions","title":"GalaxyInspector.filterByBirthPlace","text":"filterByBirthPlace(\n    data_dict::Dict,\n    exclude::Symbol;\n    <keyword arguments>\n)::Dict{Symbol,IndexType}\n\nFilter out stars that where born either outside the given halo and subhalo (exclude= :exsitu), or inside (exclude= :insitu).\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n´exclude::Symbol´: Which stars will be filtered out, either the ones born outside the given halo and subhalo (:exsitu), or inside (:insitu).\nhalo_idx::Int=1: Index of the target halo (FoF group). Starts at 1.\nsubhalo_rel_idx::Int=1: Index of the target subhalo (subfind), relative to the target halo. Starts at 1. If it is set to 0, all subhalos of the target halo are consider insitu.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#GalaxyInspector.filterByELSFR-Tuple{Dict}","page":"Filter functions","title":"GalaxyInspector.filterByELSFR","text":"filterByELSFR(data_dict::Dict)::Dict{Symbol,IndexType}\n\nFilter out gas cells that have not entered our star formation routine.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#GalaxyInspector.filterByEquilibrium-Tuple{Dict}","page":"Filter functions","title":"GalaxyInspector.filterByEquilibrium","text":"filterByEquilibrium(\n    data_dict::Dict;\n    <keyword arguments>\n)::Dict{Symbol,IndexType}\n\nFilter out gas cells that have the molecular or ionized equation in or out of equilibrium, according to equation and filtered_phase.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nlimit::Float64=1.0e-2: Allowed deviation from equilibrium, as the fraction |RS - LS| / LS.\nequation::Symbol=:molecular: Which equilibrium equation will be used. The options are :molecular and :ionized.\nfiltered_phase::Symbol=:non_eq: Which phase will be filtered out, the equilibrium phase (:eq) or the non-equilibrium phase (:non_eq).\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#GalaxyInspector.filterByQuantity-Tuple{Dict, Symbol, Symbol, Number, Number}","page":"Filter functions","title":"GalaxyInspector.filterByQuantity","text":"filterByQuantity(\n    data_dict::Dict,\n    quantity::Symbol,\n    component::Symbol,\n    minimum::Number,\n    maximum::Number,\n)::Dict{Symbol,IndexType}\n\nFilter out particles/cells with quantity outside the range [minimum:, maximum].\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nquantity::Symbol: Target quantity. For the possibilities see the documentation of scatterQty.\ncomponent::Symbol: Type of particle/cell. The possibilities are the keys of PARTICLE_INDEX.\nminimum::Number: Minimum value of quantity.\nmaximum::Number: Maximum value of quantity.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#GalaxyInspector.filterByStellarAge-Tuple{Dict}","page":"Filter functions","title":"GalaxyInspector.filterByStellarAge","text":"filterByStellarAge(\n    data_dict::Dict;\n    <keyword arguments>\n)::Dict{Symbol,IndexType}\n\nFilter out stars with an age outside the range [min_age, max_age].\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nmin_age::Unitful.Time=0.0u\"Gyr\": Minimum age.\nmax_age::Unitful.Time=AGE_RESOLUTION: Maximum age.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#GalaxyInspector.filterBySubhalo-Tuple{Dict, Int64}","page":"Filter functions","title":"GalaxyInspector.filterBySubhalo","text":"filterBySubhalo(data_dict::Dict, subhalo_abs_idx::Int)::Dict{Symbol,IndexType}\n\nFilter out cells/particles that do not belong to a given subhalo.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nsubhalo_abs_idx::Int: Index of the target subhalo (subfind). Starts at 1.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#GalaxyInspector.filterBySubhalo-Tuple{Dict}","page":"Filter functions","title":"GalaxyInspector.filterBySubhalo","text":"filterBySubhalo(\n    data_dict::Dict;\n    <keyword arguments>\n)::Dict{Symbol,IndexType}\n\nFilter out cells/particles that do not belong to a given halo and subhalo.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nhalo_idx::Int: Index of the target halo (FoF group). Starts at 1.\nsubhalo_rel_idx::Int: Index of the target subhalo (subfind), relative to the target halo. Starts at 1. If it is set to 0, all subhalos of the target halo are included.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#GalaxyInspector.filterData!-Tuple{Dict}","page":"Filter functions","title":"GalaxyInspector.filterData!","text":"filterData!(data_dict::Dict; <keyword arguments>)::Nothing\n\nFilter data_dict using the indices provided by filter_function.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#GalaxyInspector.filterData-Tuple{Dict}","page":"Filter functions","title":"GalaxyInspector.filterData","text":"filterData(data_dict::Dict; <keyword arguments>)::Dict\n\nReturn a filtered copy of data_dict using the indices provided by filter_function.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nThe filtered data.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#GalaxyInspector.filterNothing-Tuple","page":"Filter functions","title":"GalaxyInspector.filterNothing","text":"Default filter function that does not filter any cells/particles.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#GalaxyInspector.filterOldStars-Tuple{Dict}","page":"Filter functions","title":"GalaxyInspector.filterOldStars","text":"filterOldStars(data_dict::Dict)::Dict{Symbol,IndexType}\n\nFilter out stars that where born one or more snapshots ago.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#GalaxyInspector.filterWithinCylinder-Tuple{Dict, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}, Vararg{Any}}","page":"Filter functions","title":"GalaxyInspector.filterWithinCylinder","text":"filterWithinCylinder(\n    data_dict::Dict,\n    max_r::Unitful.Length,\n    max_z::Unitful.Length,\n    origin...,\n)::Dict{Symbol,IndexType}\n\nFilter out the cell/particles outside a given cylinder.\n\nArguments\n\ndata::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nmax_r::Unitful.Length: Radius of the cylinder.\nmax_z::Unitful.Length: Half height of the cylinder.\norigin: It can be any number and type of argument compatible with the second to last arguments of a computeCenter method.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#GalaxyInspector.filterWithinSphere-Tuple{Dict, Tuple{var\"#s150\", var\"#s150\"} where var\"#s150\"<:(Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}), Vararg{Any}}","page":"Filter functions","title":"GalaxyInspector.filterWithinSphere","text":"filterWithinSphere(\n    data_dict::Dict,\n    range::NTuple{2,<:Unitful.Length},\n    origin...,\n)::Dict{Symbol,IndexType}\n\nFilter out the cell/particles outside a given spherical shell.\n\nArguments\n\ndata::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nrange::NTuple{2,<:Unitful.Length}: Internal and external radius of the spherical shell.\norigin: It can be any number and type of argument compatible with the second to last arguments of a computeCenter method.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#GalaxyInspector.intersectFilters-Tuple{Vararg{Dict{Symbol, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}}}","page":"Filter functions","title":"GalaxyInspector.intersectFilters","text":"intersectFilters(filters::Dict{Symbol,IndexType}...)::Dict{Symbol,IndexType}\n\nGenerate the filter resulting from intersecting filters (AND in boolean logic) .\n\nArguments\n\nfilters::Dict{Symbol,IndexType}: Filter, as a dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#GalaxyInspector.selectFilter-Tuple{Dict{Symbol, Any}, Dict{Symbol, Vector{String}}}","page":"Filter functions","title":"GalaxyInspector.selectFilter","text":"selectFilter(\n    filter_mode::Dict{Symbol,Any},\n    request::Dict{Symbol,Vector{String}},\n)::Tuple{\n    Function,\n    Union{Symbol,NTuple{2,Int},Int},\n    Union{Symbol,NTuple{2,Int},Int},\n    Dict{Symbol,Vector{String}},\n}\n\nSelect the filter function, translation, and rotation from filter_mode.\n\nCreates a request dictionary, using request as a base, adding what is necessary for the filter function and corresponding transformations.\n\nArguments\n\nfilter_mode::Dict{Symbol,Any}: A dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nrequest::Dict{Symbol,Vector{String}}: Base request dictionary, nothing will be deleted from it.\n\nReturns\n\nA Tuple with four elements:\nThe filter function.\nTranslation for the simulation box. The posibilites are:\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\nRotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nNew request dictionary.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/filters/#GalaxyInspector.selectFilter-Tuple{Symbol, Dict{Symbol, Vector{String}}}","page":"Filter functions","title":"GalaxyInspector.selectFilter","text":"selectFilter(\n    filter_mode::Symbol,\n    request::Dict{Symbol,Vector{String}},\n)::Tuple{Function,Union{Symbol,NTuple{2,Int}},Symbol,Dict{Symbol,Vector{String}}}\n\nSelect a filter function, and the corresponding translation and rotation for the simulation box, from a list of premade ones.\n\nCreates a request dictionary, using request as a base, adding what is necessary for the filter function and corresponding transformations.\n\nArguments\n\nfilter_mode::Symbol: Which cells/particles will be plotted, the options are:\n:all             -> Plot every cell/particle within the simulation box.\n:halo            -> Plot only the cells/particles that belong to the main halo.\n:subhalo         -> Plot only the cells/particles that belong to the main subhalo.\n:sphere          -> Plot only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Plot only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nrequest::Dict{Symbol,Vector{String}}: Base request dictionary, nothing will be deleted from it.\n\nReturns\n\nA Tuple with four elements:\nThe filter function.\nTranslation for the simulation box. The posibilites are:\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new origin.\n(halo_idx, 0)               -> Selects the center of mass of the halo_idx::Int halo, as the new origin.\nRotation for the simulation box. The posibilites are:\n:global_am          -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am         -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa         -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\nNew request dictionary.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/transformations/#Coordinate-transformation-functions","page":"Coordinate transformation functions","title":"Coordinate transformation functions","text":"","category":"section"},{"location":"api/analysis/transformations/","page":"Coordinate transformation functions","title":"Coordinate transformation functions","text":"These functions are used internally and none are exported. ","category":"page"},{"location":"api/analysis/transformations/","page":"Coordinate transformation functions","title":"Coordinate transformation functions","text":"These functions depend on the particulars of the simulation code (e.g. units).","category":"page"},{"location":"api/analysis/transformations/","page":"Coordinate transformation functions","title":"Coordinate transformation functions","text":"","category":"page"},{"location":"api/analysis/transformations/","page":"Coordinate transformation functions","title":"Coordinate transformation functions","text":"Modules = [GalaxyInspector]\nPages   = [\"analysis/transformations.jl\"]","category":"page"},{"location":"api/analysis/transformations/#GalaxyInspector.computeAMRotationMatrix-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Matrix{<:Union{Unitful.Quantity{T, 𝐋 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋 𝐓^-1, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Coordinate transformation functions","title":"GalaxyInspector.computeAMRotationMatrix","text":"computeAMRotationMatrix(\n    positions::Matrix{<:Unitful.Length},\n    velocities::Matrix{<:Unitful.Velocity},\n    masses::Vector{<:Unitful.Mass},\n)::Union{Matrix{Float64},UniformScaling{Bool}}\n\nCompute the rotation matrix that will turn the total angular momentum into the z axis; when view as an active (alibi) transformation.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nvelocities::Matrix{<:Unitful.Velocity}: Velocities of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Mass of every cell/particle.\n\nReturns\n\nThe rotation matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/transformations/#GalaxyInspector.computeGlobalAMRotationMatrix-Tuple{Dict}","page":"Coordinate transformation functions","title":"GalaxyInspector.computeGlobalAMRotationMatrix","text":"computeGlobalAMRotationMatrix(data_dict::Dict)::Union{Matrix{Float64},UniformScaling{Bool}}\n\nCompute the rotation matrix that will turn the total angular momentum of the whole system, into the z axis; when view as an active (alibi) transformation.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nThe rotation matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/transformations/#GalaxyInspector.computeInertiaTensor-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Coordinate transformation functions","title":"GalaxyInspector.computeInertiaTensor","text":"computeInertiaTensor(\n    positions::Matrix{<:Unitful.Length},\n    masses::Vector{<:Unitful.Mass},\n)::Matrix{Float64}\n\nCompute the inertia tensor of a group of cells/particles.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Masses of the cells/particles.\n\nReturns\n\nThe inertia tensor.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/transformations/#GalaxyInspector.computePARotationMatrix-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Matrix{<:Union{Unitful.Quantity{T, 𝐋 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋 𝐓^-1, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Coordinate transformation functions","title":"GalaxyInspector.computePARotationMatrix","text":"computePARotationMatrix(\n    positions::Matrix{<:Unitful.Length},\n    velocities::Matrix{<:Unitful.Velocity},\n    masses::Vector{<:Unitful.Mass},\n)::Union{Matrix{Float64},UniformScaling{Bool}}\n\nCompute the rotation matrix that will turn the principal axis into the new coordinate system; when view as an passive (alias) transformation.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nvelocities::Matrix{<:Unitful.Velocity}: Velocities of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Mass of every cell/particle.\n\nReturns\n\nThe rotation matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/transformations/#GalaxyInspector.rotateData!-Tuple{Dict, Int64}","page":"Coordinate transformation functions","title":"GalaxyInspector.rotateData!","text":"rotateData!(data_dict::Dict, axis_type::Int)::Nothing\n\nRotate the positions and velocities of the cells/particles in data_dict.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nrotation::Int: Target subhalo absolute index, starting at 1. Sets the principal axis of the stars in the subhalo as the new coordinate system.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/transformations/#GalaxyInspector.rotateData!-Tuple{Dict, Symbol}","page":"Coordinate transformation functions","title":"GalaxyInspector.rotateData!","text":"rotateData!(data_dict::Dict, axis_type::Symbol)::Nothing\n\nRotate the positions and velocities of the cells/particles in data_dict.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nrotation::Symbol: Type of rotation. The options are:\n:zero               -> No rotation is applied.\n:global_am          -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am         -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa         -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/transformations/#GalaxyInspector.rotateData!-Tuple{Dict, Tuple{Int64, Int64}}","page":"Coordinate transformation functions","title":"GalaxyInspector.rotateData!","text":"rotateData!(data_dict::Dict, axis_type::NTuple{2,Int})::Nothing\n\nRotate the positions and velocities of the cells/particles in data_dict.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nrotation::NTuple{2,Int}: Type of rotation. The options are:\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo as the new coordinate system.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/transformations/#GalaxyInspector.translateData!-Tuple{Dict, Union{Int64, Tuple{Int64, Int64}, Symbol}}","page":"Coordinate transformation functions","title":"GalaxyInspector.translateData!","text":"translateData!(data_dict::Dict, translation::Union{Symbol,NTuple{2,Int},Int})::Nothing\n\nTranslate the positions of the cells/particles in data_dict.\n\nnote: Note\nThe velocities will be boosted to the stellar center of mass of the system. If there are no stars, no transformation in applied to the velocities.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ntranslation::Union{Symbol,NTuple{2,Int},Int}=:zero: Type of translation. The options are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Sets the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/transformations/#GalaxyInspector.translatePoints-Tuple{Matrix{<:Number}, Vector{<:Number}}","page":"Coordinate transformation functions","title":"GalaxyInspector.translatePoints","text":"translatePoints(\n    positions::Matrix{<:Number},\n    new_origin::Vector{<:Number},\n)::Matrix{<:Number}\n\nTranslate a system of points, moving new_origin to the origin.\n\nArguments\n\npositions::Matrix{<:Number}: Points to be translated. Each column is a point and each row a dimension.\nnew_origin::Vector{<:Number}: Target origin.\n\nReturns\n\nMatrix with the translated points.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#Convenience-functions","page":"Convenience functions","title":"Convenience functions","text":"","category":"section"},{"location":"api/plotting/convenience/","page":"Convenience functions","title":"Convenience functions","text":"These functions are pre-made recipes for specific plots.","category":"page"},{"location":"api/plotting/convenience/","page":"Convenience functions","title":"Convenience functions","text":"They are also examples of how to use the more configurable, but much more complicated, pipeline functions.","category":"page"},{"location":"api/plotting/convenience/","page":"Convenience functions","title":"Convenience functions","text":"All these functions are exported.","category":"page"},{"location":"api/plotting/convenience/","page":"Convenience functions","title":"Convenience functions","text":"","category":"page"},{"location":"api/plotting/convenience/","page":"Convenience functions","title":"Convenience functions","text":"Modules = [GalaxyInspector]\nPages   = [\"plotting/convenience.jl\"]","category":"page"},{"location":"api/plotting/convenience/#GalaxyInspector.atomicMolecularTransition-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Vector{<:Tuple{var\"#s1875\", var\"#s1874\"} where {var\"#s1875\"<:Real, var\"#s1874\"<:Real}}}","page":"Convenience functions","title":"GalaxyInspector.atomicMolecularTransition","text":"atomicMolecularTransition(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    ranges::Vector{<:Tuple{<:Real,<:Real}};\n    <keyword arguments>\n)::Nothing\n\nPlot the atomic gas to molecular gas transition for a set of metallicity ranges.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nranges::Vector{<:Tuple{<:Real,<:Real}}: Metallicity (as in the fractional mass of metals) ranges.\nplot_type::Symbol=:heatmap: Type of plot. The options are:\n:heatmap -> Heatmap. One figure per range will be produced.\n:scatter -> Scatter plot. A single figure with every range will be produced.\noutput_path::String=\"./\": Path to the output folder.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.clumpingFactor-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol}","page":"Convenience functions","title":"GalaxyInspector.clumpingFactor","text":"clumpingFactor(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot the clumping factor of quantity for different volume scales.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantity::Symbol: The number density of which quantity will be used. The options are:\n:gas          -> Gas number density.\n:molecular    -> Molecular hydrogen number density.\n:br_molecular -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic       -> Atomic hydrogen number density.\n:ionized      -> Ionized hydrogen number density.\n:neutral      -> Neutral hydrogen number density.\nnn::Int=32: Number of neighbors.\nsmooth::Int=0: The result will be average out using smooth bins for the volume. Set it to 0 if you want no smoothing.\nx_trim::NTuple{2,<:Real}=(-Inf, Inf): The data will be trim down so the x coordinates fit within x_trim.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nda_ff::Function=filterNothing: A function with the signature:\nda_ff(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\nff_request::Dict{Symbol,Vector{String}}=Dict{Symbol,Vector{String}}(): Request dictionary for the da_ff filter function.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.compareFeldmann2020-Tuple{Vector{String}, Symbol, Symbol}","page":"Convenience functions","title":"GalaxyInspector.compareFeldmann2020","text":"compareFeldmann2020(\n    simulation_paths::Vector{String},\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot a time series plus the corresponding experimental results from Feldmann (2020).\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nx_quantity::Symbol: Quantity for the x axis. The options are:\n:stellar_mass      -> Stellar mass.\n:molecular_mass    -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass       -> Atomic hydrogen (mathrmHI) mass.\n:sfr               -> The star formation rate of the last AGE_RESOLUTION.\ny_quantity::Symbol: Quantity for the y axis. The options are:\n:stellar_mass      -> Stellar mass.\n:molecular_mass    -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass       -> Atomic hydrogen (mathrmHI) mass.\n:sfr               -> The star formation rate of the last AGE_RESOLUTION.\nslice::IndexType=(:): Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nscatter::Bool=false: If the data will be presented as a line plot with error bands (default), or alternatively, a scatter plot.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\nR. Feldmann (2020). The link between star formation and gas in nearby galaxies. Communications Physics 3(226). doi:10.1038/s42005-020-00493-0\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.compareMolla2015-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol}","page":"Convenience functions","title":"GalaxyInspector.compareMolla2015","text":"compareMolla2015(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot a Milky Way profile plus the corresponding experimental results from Mollá et al. (2015).\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantity::Symbol: Quantity for the y axis. The options are:\n:stellar_area_density      -> Stellar area mass density.\n:molecular_area_density    -> Molecular mass surface density.\n:br_molecular_area_density -> Molecular mass surface density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_area_density       -> Atomic hydrogen area mass density.\n:sfr_area_density          -> Star formation rate area density, for the last AGE_RESOLUTION.\n:O_stellar_abundance       -> Stellar abundance of oxygen, as 12 + log_10(mathrmO    H).\n:N_stellar_abundance       -> Stellar abundance of nitrogen, as 12 + log_10(mathrmN    H).\n:C_stellar_abundance       -> Stellar abundance of carbon, as 12 + log_10(mathrmC    H).\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\nM. Mollá et al. (2015). Galactic chemical evolution: stellar yields and the initial mass function. Monthly Notices of the Royal Astronomical Society 451(4), 3693–3708. doi:10.1093/mnras/stv1102\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.cpuTXT-Tuple{Vector{String}, String, Symbol, Symbol}","page":"Convenience functions","title":"GalaxyInspector.cpuTXT","text":"cpuTXT(\n    simulation_paths::Vector{String},\n    target::String,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot a time series of the data in the cpu.txt file.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\ntarget::String: Target process.\nx_quantity::Symbol: Quantity for the x axis. The options are:\n:time_step              -> Time step.\n:physical_time          -> Physical time since the Big Bang.\n:clock_time_s           -> Clock time duration of the time step in seconds.\n:clock_time_percent     -> Clock time duration of the time step as a percentage.\n:tot_clock_time_s       -> Total clock time in seconds.\n:tot_clock_time_percent -> Total clock time as a percentage.\ny_quantity::Symbol: Quantity for the y axis. The options are:\n:time_step              -> Time step.\n:physical_time          -> Physical time since the Big Bang.\n:clock_time_s           -> Clock time duration of the time step in seconds.\n:clock_time_percent     -> Clock time duration of the time step as a percentage.\n:tot_clock_time_s       -> Total clock time in seconds.\n:tot_clock_time_percent -> Total clock time as a percentage.\nsmooth::Int=0: The result will be smooth out using smooth bins. Set it to 0 if you want no smoothing.\nyscale::Function=identity: Scaling function for the y axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nx_trim::NTuple{2,<:Real}=(-Inf, Inf): The data will be trim down so the x coordinates fit within x_trim.\ny_trim::NTuple{2,<:Real}=(-Inf, Inf): The data will be trim down so the y coordinates fit within y_trim. This option does not affect histograms.\noutput_path::String=\"./\": Path to the output folder.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.densityMap-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.densityMap","text":"densityMap(\n    simulation_paths::Vector{String},\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot a 2D histogram of the density.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored. If set to 0, an animation using every snapshots will be made.\nquantities::Vector{Symbol}=[:gas_mass]: Quantities for which the density will be calculated. The options are:\n:stellar_mass      -> Stellar mass.\n:gas_mass          -> Gas mass.\n:hydrogen_mass     -> Hydrogen mass.\n:dm_mass           -> Dark matter mass.\n:bh_mass           -> Black hole mass.\n:molecular_mass    -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass       -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass      -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass      -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass  -> Stellar gas mass (according to out SF model).\ntypes::Vector{Symbol}=[:cells]: List of component types for the density fields, each element can be either :particles or Voronoi :cells.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nprojection_planes::Vector{Symbol}=[:xy]: Projection planes. The options are :xy, :xz, and :yz. The disk is generally oriented to have its axis of rotation parallel to the z axis.\nbox_size::Unitful.Length=100u\"kpc\": Physical side length of the plot window.\npixel_length::Unitful.Length=0.1u\"kpc\": Pixel (bin of the 2D histogram) side length.\nreduce_factor::Int=1: Factor by which the resolution of the result will be reduced. This will be applied after the density projection, averaging the value of neighboring pixels. It has to divide the size of grid exactly.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\ntitle::Union{Symbol,<:AbstractString}=\"\": Title for the figure. If left empty, no title is printed. It can also be set to one of the following options:\n:physical_time -> Physical time since the Big Bang.\n:lookback_time -> Physical time left to reach the last snapshot.\n:scale_factor  -> Scale factor (only relevant for cosmological simulations).\n:redshift      -> Redshift (only relevant for cosmological simulations).\nannotation::AbstractString=\"\": Text to be added into the top left corner of the plot. If left empty, nothing is printed.\ncolorbar::Bool=false: If a colorbar will be added.\ncolorrange::Union{Nothing,Tuple{<:Real,<:Real}}=nothing: Sets the start and end points of the colormap. Use nothing to use the extrema of the values to be plotted.\nda_ff::Function=filterNothing: Filter function for the data analysis function. It must be a function with the signature:\nda_ff(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\nff_request::Dict{Symbol,Vector{String}}=Dict{Symbol,Vector{String}}(): Request dictionary for the da_ff filter function.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.densityMapVelField-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.densityMapVelField","text":"densityMapVelField(\n    simulation_paths::Vector{String},\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot a 2D histogram of the density, with the velocity field.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored. If set to 0, an animation using every snapshots will be made.\nquantities::Vector{Symbol}=[:gas_mass]: Quantities for which the density will be calculated. The options are:\n:stellar_mass      -> Stellar mass.\n:gas_mass          -> Gas mass.\n:hydrogen_mass     -> Hydrogen mass.\n:dm_mass           -> Dark matter mass.\n:bh_mass           -> Black hole mass.\n:molecular_mass    -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass       -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass      -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass      -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass  -> Stellar gas mass (according to out SF model).\ntypes::Vector{Symbol}=[:cells]: List of component types for the density fields, each element can be either :particles or Voronoi :cells.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nprojection_planes::Vector{Symbol}=[:xy]: Projection planes. The options are :xy, :xz, and :yz. The disk is generally oriented to have its axis of rotation parallel to the z axis.\nbox_size::Unitful.Length=100u\"kpc\": Physical side length of the plot window.\npixel_length::Unitful.Length=0.1u\"kpc\": Pixel (bin of the 2D histogram) side length.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\ntitle::Union{Symbol,<:AbstractString}=\"\": Title for the figure. If left empty, no title is printed. It can also be set to one of the following options:\n:physical_time -> Physical time since the Big Bang.\n:lookback_time -> Physical time left to reach the last snapshot.\n:scale_factor  -> Scale factor (only relevant for cosmological simulations).\n:redshift      -> Redshift (only relevant for cosmological simulations).\nannotation::AbstractString=\"\": Text to be added into the top left corner of the plot. If left empty, nothing is printed.\ncolorbar::Bool=false: If a colorbar will be added.\ncolorrange::Union{Nothing,Tuple{<:Real,<:Real}}=nothing: Sets the start and end points of the colormap. Use nothing to use the extrema of the values to be plotted.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.densityProfile-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol}","page":"Convenience functions","title":"GalaxyInspector.densityProfile","text":"densityProfile(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot a density profile.\n\nnote: Note\nThis method plots one quantity for several simulations in one figure.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantities::Vector{Symbol}: Quantities for the y axis. The options are:\n:stellar_mass       -> Stellar mass.\n:gas_mass           -> Gas mass.\n:hydrogen_mass      -> Hydrogen mass.\n:dm_mass            -> Dark matter mass.\n:bh_mass            -> Black hole mass.\n:molecular_mass     -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass  -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass        -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass       -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass       -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass   -> Stellar gas mass (according to out SF model).\n:sfr                -> The star formation rate.\n:ssfr               -> The specific star formation rate.\n:observational_sfr  -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr -> The specific star formation rate of the last AGE_RESOLUTION.\ncumulative::Bool=false: If the profile will be accumulated or not.\nyscale::Function=identity: Scaling function for the y axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nradius::Unitful.Length=DISK_R: Radius of the profile.\nn_bins::Int=100: Number of bins.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.densityProfile-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Vector{Symbol}}","page":"Convenience functions","title":"GalaxyInspector.densityProfile","text":"densityProfile(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    quantities::Vector{Symbol};\n    <keyword arguments>\n)::Nothing\n\nPlot a density profile.\n\nnote: Note\nThis method plots several quantities for one simulations in one figure.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantities::Vector{Symbol}: Quantities for the y axis. The options are:\n:stellar_mass       -> Stellar mass.\n:gas_mass           -> Gas mass.\n:hydrogen_mass      -> Hydrogen mass.\n:dm_mass            -> Dark matter mass.\n:bh_mass            -> Black hole mass.\n:molecular_mass     -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass  -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass        -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass       -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass       -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass   -> Stellar gas mass (according to out SF model).\n:sfr                -> The star formation rate.\n:ssfr               -> The specific star formation rate.\n:observational_sfr  -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr -> The specific star formation rate of the last AGE_RESOLUTION.\ncumulative::Bool=false: If the profile will be accumulated or not.\nyscale::Function=identity: Scaling function for the y axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nradius::Unitful.Length=DISK_R: Radius of the profile.\nn_bins::Int=100: Number of bins.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=string.(quantities): Labels for the plot legend, one per quantity. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.discAccretionEvolution-Tuple{Vector{String}}","page":"Convenience functions","title":"GalaxyInspector.discAccretionEvolution","text":"discAccretionEvolution(\n    simulation_paths::Vector{String};\n    <keyword arguments>\n)::Nothing\n\nPlot a time series of the accreted mass into the disc.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType=(:): Slice of the simulations, i.e. which snapshots will be plotted. It can be vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nmax_r::Unitful.Length=DISK_R: Radius of the cylinder.\nmax_z::Unitful.Length=5.0u\"kpc\": Half height of the cylinder.\nsmooth::Int=0: The time series will be smooth out using smooth bins. Set it to 0 if you want no smoothing.\noutput_path::String=\"./\": Path to the output folder.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=nothing: Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.fitResolvedKSLaw-Tuple{String, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.fitResolvedKSLaw","text":"fitResolvedKSLaw(\n    simulation_path::String,\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot the resolved Kennicutt-Schmidt relation with an optional linear fit.\n\nnote: Note\nOnly stars younger than AGE_RESOLUTION are consider. The star formation surface density is just the stellar mass surface density divided by AGE_RESOLUTION.\n\nArguments\n\nsimulation_path::String: Path to the simulation directory, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantity::Symbol=:molecular_mass: Quantity for the x axis. The options are:\n:gas_mass          -> Gas mass surface density.\n:molecular_mass    -> Molecular mass surface density.\n:br_molecular_mass -> Molecular mass surface density, computed using the pressure relation in Blitz et al. (2006).\n:neutral_mass      -> Neutral mass surface density.\ntype::Symbol=:cells: If the gas surface density will be calculated assuming the gas is in :particles or in Voronoi :cells.\nfit::Bool=true: If a fit of the plotted values will be added on top of the scatter plot.\nbox_size::Unitful.Length=BOX_L: Physical side length for the grids. Bigiel et al. (2008) uses measurements up to the optical radius r25 (where the B-band magnitude drops below 25 mag arcsec^−2).\nx_range::NTuple{2,<:Real}=(-Inf, Inf): Only the data withing this range (for the x coordinates) will be fitted.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nsim_label::Union{String,Nothing}=basename(simulation_path): Label for the scatter plot. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\nF. Bigiel et al. (2008). THE STAR FORMATION LAW IN NEARBY GALAXIES ON SUB-KPC SCALES. The Astrophysical Journal, 136(6), 2846. doi:10.1088/0004-6256/136/6/2846\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.fitVSFLaw-Tuple{String, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.fitVSFLaw","text":"fitVSFLaw(\n    simulation_path::String,\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot the resolved volumetric star formation (VSF) law with an optional linear fit.\n\nnote: Note\nOnly stars younger than AGE_RESOLUTION are consider. The star formation surface density is just the stellar mass surface density divided by AGE_RESOLUTION.\n\nArguments\n\nsimulation_path::String: Path to the simulation directory, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantity::Symbol: Quantity for the x axis. The options are:\n:gas_mass          -> Gas density.\n:hydrogen_mass     -> Hydrogen density.\n:molecular_mass    -> Molecular hydrogen (mathrmH_2) density.\n:br_molecular_mass -> Molecular hydrogen (mathrmH_2) density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass       -> Atomic hydrogen (mathrmHI) density.\n:ionized_mass      -> Ionized hydrogen (mathrmHII) density.\n:neutral_mass      -> Neutral hydrogen (mathrmHI + H_2) density.\ntype::Symbol=:cells: If the gas surface density will be calculated assuming the gas is in :particles or in Voronoi :cells.\nfit::Bool=true: If a fit of the plotted values will be added on top of the scatter plot.\nbox_size::Unitful.Length=BOX_L: Physical side length for the grids\nx_range::NTuple{2,<:Real}=(-Inf, Inf): Only the data withing this range (for the x coordinates) will be fitted.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nsim_label::Union{String,Nothing}=basename(simulation_path): Label for the scatter plot. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.gasBarPlot-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol, Vector{<:Number}}","page":"Convenience functions","title":"GalaxyInspector.gasBarPlot","text":"gasBarPlot(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    quantity::Symbol,\n    edges::Vector{<:Number};\n    <keyword arguments>\n)::Nothing\n\nPlot a bar plot of the gas fractions, where the bins are a given gas quantity.\n\nOnly for gas cells that have entered out routine.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantity::Symbol: Target quantity. The possibilities are:\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\nedges::Vector{<:Number}: A sorted list of bin edges for quantity.\naxis_label::Union{AbstractString,Nothing}=nothing: Label for the axis. It can contain the string auto_label, which will be replaced by the default label: var_name / 10^exp_factor unit. If set to nothing a label will be assigned automaticaly.\nexp_ticks::Bool=false: If the axis ticks will be the log_10 of edges.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.gasEvolution-Tuple{Vector{String}}","page":"Convenience functions","title":"GalaxyInspector.gasEvolution","text":"gasEvolution(\n    simulation_paths::Vector{String};\n    <keyword arguments>\n)::Nothing\n\nPlot a time series of the gas components. Either their masses or their fractions.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nfractions::Bool=true: If the fractions (default), or the masses, will be plotted.\nslice::IndexType=(:): Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nextra_filter::Function=filterNothing: Filter function that will be applied after the one given by filter_mode.\nfilename::Union{String,Nothing}=nothing: Name for the output file. If left as nothing, the filename will be chosen automaticaly.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.gasSFRMap-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.gasSFRMap","text":"gasSFRMap(\n    simulation_paths::Vector{String},\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot a 2D map of the gas SFR.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored. If set to 0, an animation using every snapshots will be made.\ntypes::Symbol=:cells: Gas type for the SFR fields. It can be either :particles or Voronoi :cells.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nprojection_planes::Vector{Symbol}=[:xy]: Projection planes. The options are :xy, :xz, and :yz. The disk is generally oriented to have its axis of rotation parallel to the z axis.\nbox_size::Unitful.Length=100u\"kpc\": Physical side length of the plot window.\npixel_length::Unitful.Length=0.1u\"kpc\": Pixel (bin of the 2D histogram) side length.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\ntitle::Union{Symbol,<:AbstractString}=\"\": Title for the figure. If left empty, no title is printed. It can also be set to one of the following options:\n:physical_time -> Physical time since the Big Bang.\n:lookback_time -> Physical time left to reach the last snapshot.\n:scale_factor  -> Scale factor (only relevant for cosmological simulations).\n:redshift      -> Redshift (only relevant for cosmological simulations).\nannotation::AbstractString=\"\": Text to be added into the top left corner of the plot. If left empty, nothing is printed.\ncolorbar::Bool=false: If a colorbar will be added.\ncolorrange::Union{Nothing,Tuple{<:Real,<:Real}}=nothing: Sets the start and end points of the colormap. Use nothing to use the extrema of the values to be plotted.\nda_ff::Function=filterNothing: Filter function for the data analysis function. It must be a function with the signature:\nda_ff(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\nff_request::Dict{Symbol,Vector{String}}=Dict{Symbol,Vector{String}}(): Request dictionary for the da_ff filter function.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.gasVelocityCubes-Tuple{Vector{String}, Union{Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.gasVelocityCubes","text":"gasVelocityCubes(\n    simulation_paths::Vector{String},\n    slice::ReducedIndexType;\n    <keyword arguments>\n)::Nothing\n\nCreate a HDF5 file with the position, gas mass, velocity, and velocity dispersion of each voxel in a rectangular 3D grid.\n\nThe metadata for each snapshot in the HDF5 file includes the physical time in Gyr, the scale factor, and the redshift of that snapshot.\n\nBy default, the grid is centered at coordinates (0, 0, 0), has 300x300x300 voxels, and has a side length of BOX_L. There are as many rows as there are voxels (27000000 by default).\n\nThe quantities in the HDF5 file for each voxel are:\n\nColumn 01: x coordinate [l_unit] Column 02: y coordinate [l_unit] Column 03: z coordinate [l_unit] Column 04: Molecular mass [m_unit] Column 05: Atomic mass [m_unit] Column 06: Ionized mass [m_unit] Column 07: Velocity in the x direction [v_unit] Column 08: Velocity in the y direction [v_unit] Column 09: Velocity in the z direction [v_unit] Column 10: Velocity dispersion in the x direction [v_unit] Column 11: Velocity dispersion in the y direction [v_unit] Column 12: Velocity dispersion in the z direction [v_unit]\n\nFor gas represented by Voronoi cells (e.g. Arepo):\n\nThe mass is the mass of molecular, atomic or ionized gas intersecting the voxel, so it only considers the cell that is closest to the voxel. The velocity is given by the weighted mean of the velocities of the n_neighbors nearest cells. And the velocity dispersion, by the weighted standard deviation.\n\nNotice that for Voronoi cells, the mass will be sample at a sub-cell resolution (as long as voxel size < cell size), while the velocities are sample at a locally lower-than-cell resolution (as long as n_neighbors > 1). The weights are given by the distance (in kpc) to each neighbor, using a Gaussian kernel.\n\nFor gas represented by particles (e.g. SPH codes):\n\nThe mass is the accumulated mass of the particles within each voxel. The velocity is the mean of the velocities of those particles, and the velocity dispersion is the standard deviation.\n\nIf there are no particles, the mass is 0, and the velocity and velocity dispersion are NaN. If there is only one particle, the mass and velocity are the ones from that particle, and the velocity dispersion is NaN.\n\nBy default (filter_mode = :subhalo) we use the following reference system:\n\nThe origin is in the position of the particle/cell at the potencial minimum of the main subhalo.\nThe x, y, and z axis form a right-handed cartesian reference system (x × y = z), where the z axis has the orientation of the stellar angular momentum, and the x and y axis are roughly in the direction of the corresponding principal axis.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::ReducedIndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13) or an StepRange (e.g. 5:2:13). Starts at 1.\ntype::Symbol=:cells: If the gas density will be calculated assuming the gas is in :particles or in Voronoi :cells.\nn_neighbors::Int=32: Number of neighbors for the mean and standard deviation of the velocity. Setting this value to 1 maximizes the resolution for the velocity, and sets the standard deviation (columns 8, 9, and 10) to NaN. This is only relevant for simulations where gas is represented by Voronoi cells (type = :cells).\ngrid::CubicGrid=CubicGrid(BOX_L, 300): Cubic grid.\nrow_major_order::Bool=true: Store the results in row-major order (C and Python) instead of column-major order (Julia, Fortran, and MATLAB). See Row- and column-major order.\nm_unit::Unitful.Units=u\"Msun\": Mass unit\nl_unit::Unitful.Units=u\"kpc\": Length unit.\nv_unit::Unitful.Units=u\"km * s^-1\": Velocity unit.\noutput_file::String=\"./gas_velocity_cube.hdf5\": Path to the output HDF5 file. This file will be created, and the full path to it too, if it doesn't exist.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:subhalo: Which cells/particles will be consider, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nshow_progress::Bool=true: If a progress bar will be shown.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.kennicuttSchmidtLaw-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.kennicuttSchmidtLaw","text":"kennicuttSchmidtLaw(\n    simulation_paths::Vector{String},\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot the Kennicutt-Schmidt law.\n\nnote: Note\nOnly stars younger than AGE_RESOLUTION are consider. The star formation surface density is the stellar mass surface density divided by AGE_RESOLUTION.\n\nnote: Note\nThis function uses physical units regardless of the PHYSICAL_UNITS global setting.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir. All the simulations will be plotted together.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored. All the selected snapshots will be plotted together.\nquantity::Symbol=:molecular_mass: Quantity for the x axis. The options are:\n:gas_mass          -> Total gas mass surface density.\n:molecular_mass    -> Molecular mass surface density. This one can be plotted with the results of Bigiel et al. (2008) and Bigiel et al. (2010).\n:br_molecular_mass -> Molecular mass surface density, computed using the pressure relation in Blitz et al. (2006). This one can be plotted with the results of Bigiel et al. (2008) and Bigiel et al. (2010).\n:neutral_mass      -> Neutral mass surface density. This one can be plotted with the results of Bigiel et al. (2008), Bigiel et al. (2010), and Kennicutt (1998).\ngas_type::Symbol=:cells: If the gas surface density will be calculated assuming the gas is in :particles or in Voronoi :cells.\nreduce_grid::Symbol=:square: Grid for the density projection. The options are:\n:square    -> The gas and stellar distributions will be projected into a regular cubic grid first and then into a flat square one, to emulate the way the surface densities are measured in observations.\n:circular -> The gas and stellar distributions will be projected into a regular cubic grid first, then into a flat square one, and finally into a flat circular grid, formed by a series of concentric rings. This emulates the traditonal way the Kennicutt-Schmidt law is measured in simulations.\ngrid_size::Unitful.Length=BOX_L: Physical side length of the cubic and square grids, and diameter of the circular grid (if reduce_grid = :circular). As a reference, Bigiel et al. (2008) uses measurements up to the optical radius r25 (where the B-band magnitude drops below 25 mag arcsec^−2). This limits which cells/particles will be consider.\nbin_size::Unitful.Length=BIGIEL_PX_SIZE: Target bin size for the grids. If reduce_grid = :square, it is the physical side length of the pixels in the final square grid. If reduce_grid = :circular, it is the ring width for the final circular grid. In both cases of reduce_grid, the result will only be exact if bin_size divides grid_size exactly, otherwise grid_size will take priority and the final sizes will only approximate bin_size. For the cubic grids a default value of 200 pc is always used.\nplot_type::Symbol=:scatter: If the plot will be a :scatter plot or a :heatmap. Heatmaps will not show legends, experimental measurements or several simulations at once.\nintegrated::Bool=false: If the integrated (one point per galaxy) or resolved (several point per galaxy) Kennicutt-Schmidt law will be plotted. integrated = true only works with plot_type = :scatter. The central value is the weighted median and the error bars are the median absolute deviations.\nsfr_density::Bool=true: If the quantity for the y axis will be the SFR surface density or, if set to false, the stellar mass surface density.\n\ngas_weights::Union{Symbol,Nothing}=nothing: If plot_type = :scatter, each point (a bin in the 2D grid) can be weighted by a gas quantity. If integrated = true, the median will be computed with these weights in mind. If integrated = false, each point will have a color given by the weight. The posible weights are:\n:gas_mass_density -> Gas mass surface density of each bin. See the documentation for the function daDensity2DProjection.\n:gas_sfr          -> The total gas SFR of the column associated with each bin. See the documentation for the function daGasSFR2DProjection.\n:gas_metallicity  -> The total metallicity of the column associated with each bin. See the documentation for the function daMetallicity2DProjection.\n:temperature      -> The mean gas temperature of the column associated with each bin. See the documentation for the function daTemperature2DProjection.\n\nmeasurements::Bool=true: If the experimental measurements from Kennicutt (1998), Bigiel et al. (2008) or Bigiel et al. (2010) will be plotted alongside the simulation results.\nmeasurement_type::Union{String,Symbol}=:fits: Type of measurement to plot, only valid if measurement = true. The option are:\n:fits: Fits from Bigiel et al. (2008) and/or Kennicutt (1998) depending on the quantity in the x axis. The fits will be plotted as lines with uncertanty bands.\n\"NGC XXX\": Plot the resolved data of the given NGC galaxy as a scatter plot. Uses the data from Bigiel et al. (2010). See the documentation of ppBigiel2010! for options.\n:all: Plot the data of every galaxy in Bigiel et al. (2010), as a scatter plot.\nx_range::Union{NTuple{2,<:Number},Nothing}=nothing: x axis range for the heatmap grid. If set to nothing, the extrema of the x values will be used. Only relevant if plot_type = :heatmap.\ny_range::Union{NTuple{2,<:Number},Nothing}=nothing: y axis range for the heatmap grid. If set to nothing, the extrema of the y values will be used. Only relevant if plot_type = :heatmap.\nn_bins::Int=100: Number of bins per side of the heatmap grid. Only relevant if plot_type = :heatmap.\ncolorbar::Bool=false: If a colorbar will be added.\noutput_file::String=\"./kennicutt_schmidt_law.png\": Path to the output file.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Selects which cells/particles will be consider, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\nF. Bigiel et al. (2008). THE STAR FORMATION LAW IN NEARBY GALAXIES ON SUB-KPC SCALES. The Astrophysical Journal, 136(6), 2846. doi:10.1088/0004-6256/136/6/2846\n\nF. Bigiel et al. (2010). EXTREMELY INEFFICIENT STAR FORMATION IN THE OUTER DISKS OF NEARBY GALAXIES. The Astrophysical Journal, 140(5), 1194. doi:10.1088/0004-6256/140/5/1194\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.lineHistogram-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol, Symbol, Tuple{var\"#s1908\", var\"#s1908\"} where var\"#s1908\"<:Number}","page":"Convenience functions","title":"GalaxyInspector.lineHistogram","text":"lineHistogram(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    quantity::Symbol,\n    type::Symbol,\n    range::NTuple{2,<:Number};\n    <keyword arguments>\n)::Nothing\n\nPlot a histogram of quantity.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantity::Symbol: The possibilities are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\ntype::Symbol: Type of cell/particle.\nrange::NTuple{2,<:Number}: Range of values for the histogram.\nn_bins::Int=100: Number of bins.\nlog::Bool=false: If the bins will be logarithmic.\nnorm::Int=0: Number of count that will be use to normalize the histogram. If left as 0, the histogram will be normalize with the maximum bin count.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nextra_filter::Function=filterNothing: Filter function that will be applied after the one given by filter_mode.\nff_request::Dict{Symbol,Vector{String}}=Dict{Symbol,Vector{String}}(): Request dictionary for the extra_filter filter function.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.massMetallicityRelation-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.massMetallicityRelation","text":"massMetallicityRelation(\n    simulation_paths::Vector{String},\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot the resolved mass-metallicity relation. This method plots the M-Z relation at a fix moment in time.\n\nnote: Note\nOnly stars younger than AGE_RESOLUTION and gas cells/particles within a sphere of radius DISK_R are consider.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nelement::Symbol=:all: Which metallicity to use. The options are:\n:all -> Metallicity considering all elements, as Z  Z_odot.\n:X   -> Element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\nmass::Bool=true: If the x axis will be the stellar mass density or the SFR density.\nreduce_factor::Int=1: Factor by which the resolution of the result will be reduced. This will be applied after the density projection, averaging the value of neighboring pixels. It has to divide the size of grid exactly.\noutput_path::String=\"./resolvedKSLawZScatter\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.massProfile-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Vector{Symbol}}","page":"Convenience functions","title":"GalaxyInspector.massProfile","text":"massProfile(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    quantities::Vector{Symbol};\n    <keyword arguments>\n)::Nothing\n\nPlot a mass profile.\n\nnote: Note\nThis method plots several quantities for one simulations in one figure.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantities::Vector{Symbol}: Quantities for the y axis. The options are:\n:stellar_mass      -> Stellar mass.\n:gas_mass          -> Gas mass.\n:hydrogen_mass     -> Hydrogen mass.\n:dm_mass           -> Dark matter mass.\n:bh_mass           -> Black hole mass.\n:molecular_mass    -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass       -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass      -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass      -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass  -> Stellar gas mass (according to out SF model).\ncumulative::Bool=false: If the profile will be accumulated or not.\nyscale::Function=identity: Scaling function for the y axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nradius::Unitful.Length=DISK_R: Radius of the profile.\nn_bins::Int=100: Number of bins.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=string.(quantities): Labels for the plot legend, one per quantity. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.metallicityMap-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.metallicityMap","text":"metallicityMap(\n    simulation_paths::Vector{String},\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot a 2D histogram of the metallicity.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored. If set to 0, an animation using every snapshots will be made.\ncomponents::Vector{Symbol}=[:gas]: Target component. It can be either :stars or :gas.\ntypes::Vector{Symbol}=[:cells]: List of component types for the metallicity fields, each element can be either :particles or Voronoi :cells.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nprojection_planes::Vector{Symbol}=[:xy]: Projection planes. The options are :xy, :xz, and :yz. The disk is generally oriented to have its axis of rotation parallel to the z axis.\nbox_size::Unitful.Length=100u\"kpc\": Physical side length of the plot window.\npixel_length::Unitful.Length=0.1u\"kpc\": Pixel (bin of the 2D histogram) side length.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\ntitle::Union{Symbol,<:AbstractString}=\"\": Title for the figure. If left empty, no title is printed. It can also be set to one of the following options:\n:physical_time -> Physical time since the Big Bang.\n:lookback_time -> Physical time left to reach the last snapshot.\n:scale_factor  -> Scale factor (only relevant for cosmological simulations).\n:redshift      -> Redshift (only relevant for cosmological simulations).\nannotation::AbstractString=\"\": Text to be added into the top left corner of the plot. If left empty, nothing is printed.\ncolorbar::Bool=false: If a colorbar will be added.\ncolorrange::Union{Nothing,Tuple{<:Real,<:Real}}=nothing: Sets the start and end points of the colormap. Use nothing to use the extrema of the values to be plotted.\nda_ff::Function=filterNothing: Filter function for the data analysis function. It must be a function with the signature:\nda_ff(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\nff_request::Dict{Symbol,Vector{String}}=Dict{Symbol,Vector{String}}(): Request dictionary for the da_ff filter function.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.rotationCurve-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.rotationCurve","text":"rotationCurve(\n    simulation_paths::Vector{String},\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot the galaxy rotation curve of a set of simulations.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nradius::Unitful.Length=DISK_R: Maximum radial distance for the rotation curve.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.scatterDensityMap-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol, Symbol, Symbol, Unitful.Units}","page":"Convenience functions","title":"GalaxyInspector.scatterDensityMap","text":"scatterDensityMap(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    x_quantity::Symbol,\n    y_quantity::Symbol,\n    z_quantity::Symbol,\n    z_unit::Unitful.Units;\n    <keyword arguments>\n)::Nothing\n\nPlot two quantities as a density scatter plot (2D histogram), weighted by z_quantity.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nx_quantity::Symbol: Quantity for the x axis. The options are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\ny_quantity::Symbol: Quantity for the y axis. The options are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\nz_quantity::Symbol: Quantity for the z axis (weights). The options are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\nz_unit::Unitful.Units: Target unit for the z axis.\nx_range::Union{NTuple{2,<:Number},Nothing}=nothing: x axis range. If set to nothing, the extrema of the values will be used.\ny_range::Union{NTuple{2,<:Number},Nothing}=nothing: y axis range. If set to nothing, the extrema of the values will be used.\nxlog::Bool=false: If true, sets everything so the x axis is log10(x_quantity).\nylog::Bool=false: If true, sets everything so the y axis is log10(y_quantity).\ntotal::Bool=true: If the sum (default) or the mean of z_quantity will be used as the value of each pixel.\nn_bins::Int=100: Number of bins per side of the square grid.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nda_ff::Function=filterNothing: A function with the signature:\nda_ff(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\nff_request::Dict{Symbol,Vector{String}}=Dict{Symbol,Vector{String}}(): Request dictionary for the da_ff filter function.\ntitle::Union{Symbol,<:AbstractString}=\"\": Title for the figure. If left empty, no title is printed. It can also be set to one of the following options:\n:physical_time -> Physical time since the Big Bang.\n:lookback_time -> Physical time left to reach the last snapshot.\n:scale_factor  -> Scale factor (only relevant for cosmological simulations).\n:redshift      -> Redshift (only relevant for cosmological simulations).\ncolorbar::Bool=false: If a colorbar will be added.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.scatterPlot-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol, Symbol}","page":"Convenience functions","title":"GalaxyInspector.scatterPlot","text":"scatterPlot(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot two quantities as a scatter plot, one marker for every cell/particle.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nx_quantity::Symbol: Quantity for the x axis. The options are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\ny_quantity::Symbol: Quantity for the y axis. The options are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\nxlog::Bool=false: If true, sets everything so the x axis is log10(x_quantity).\nylog::Bool=false: If true, sets everything so the y axis is log10(y_quantity).\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nda_ff::Function=filterNothing: A function with the signature:\nda_ff(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\nff_request::Dict{Symbol,Vector{String}}=Dict{Symbol,Vector{String}}(): Request dictionary for the da_ff filter function.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.sfrTXT-Tuple{Vector{String}, Symbol, Symbol}","page":"Convenience functions","title":"GalaxyInspector.sfrTXT","text":"sfrTXT(\n    simulation_paths::Vector{String},\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot a time series of the data in the sfr.txt file.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nx_quantity::Symbol: Quantity for the x axis. The options are:\n:physical_time -> Physical time since the Big Bang.\n:lookback_time -> Physical time left to reach the last snapshot.\n:scale_factor  -> Scale factor.\n:redshift      -> Redshift.\ny_quantity::Symbol: Quantity for the y axis. The options are:\n:stellar_mass -> Stellar mass.\n:sfr          -> The star formation rate.\nsmooth::Int=0: The result will be smooth out using smooth bins. Set it to 0 if you want no smoothing.\noutput_path::String=\"./\": Path to the output folder.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.simulationReport-Tuple{Vector{String}}","page":"Convenience functions","title":"GalaxyInspector.simulationReport","text":"simulationReport(\n    simulation_paths::Vector{String};\n    <keyword arguments>\n)::Nothing\n\nWrite a text file with information about a given simulation\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir. One text file will be printed for each simulation.\noutput_path::String=\"./\": Path to the output folder.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.snapshotReport-Tuple{Vector{String}, Vector{Int64}}","page":"Convenience functions","title":"GalaxyInspector.snapshotReport","text":"snapshotReport(\n    simulation_paths::Vector{String},\n    slices::Vector{Int};\n    <keyword arguments>\n)::Nothing\n\nWrite a text file with information about a given snapshot.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir. One text file will be printed for each simulation.\nslices::Vector{Int}: Selects which snapshots to plot for each simulation, starts at 1 and is independent of the number in the file name. If every snapshot is present, the relation is slice_n = filename_number + 1.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be considered in the \"filtered\" section of the report. The options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nhalo_idx::Int=1: Index of the target halo (FoF group). Starts at 1.\nsubhalo_rel_idx::Int=1: Index of the target subhalo (subfind), relative to the target halo. Starts at 1.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.stellarBirthHalos-Tuple{String, Int64}","page":"Convenience functions","title":"GalaxyInspector.stellarBirthHalos","text":"stellarBirthHalos(\n    simulation_path::String,\n    slice_n::Int;\n    <keyword arguments>\n)::Nothing\n\nWrite, to a pair of CSV files, in which halo and subhalo every star in snapshot slice_n was born.\n\nArguments\n\nsimulation_paths::String: Path to the simulation directory, set in the code variable OutputDir.\nslice_n::Int: Selects the target snapshot. Starts at 1 and is independent of the number in the file name. If every snapshot is present, the relation is slice_n = filename_number + 1.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.stellarHistory-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol}","page":"Convenience functions","title":"GalaxyInspector.stellarHistory","text":"stellarHistory(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot the evolution of a given stellar quantity using the stellar ages at a given instant in time.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Snapshot at which the stellar ages will be read. If set to several snapshots, one plot per snapshot will be done. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nquantity::Symbol: Quantity for the y axis. The options are:\n:sfr                 -> The star formation rate.\n:ssfr                -> The specific star formation rate.\n:stellar_mass        -> Stellar mass.\n:stellar_metallicity -> Mass fraction of all elements above He in the stars (solar units).\ny_log::Bool=true: If the y axis is will have a log10 scale.\nn_bins::Int=20: Number of bins (time intervals).\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\nbackup_results::Bool=false: If the values to be plotted will be backup in a JLD2 file.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.stellarVelocityCubes-Tuple{Vector{String}, Union{Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.stellarVelocityCubes","text":"stellarVelocityCubes(\n    simulation_paths::Vector{String},\n    slice::ReducedIndexType;\n    <keyword arguments>\n)::Nothing\n\nCreate a HDF5 file with the position, stellar mass, velocity, and velocity dispersion of each voxel in a rectangular 3D grid.\n\nThe metadata for each snapshot in the HDF5 file includes the physical time in Gyr, the scale factor, and the redshift of that snapshot.\n\nBy default, the grid is centered at coordinates (0, 0, 0), has 100x100x100 voxels, and has a side length of BOX_L. There are as many rows as there are voxels (1000000 by default).\n\nThe quantities in the HDF5 file for each voxel are:\n\nColumn 01: x coordinate [l_unit] Column 02: y coordinate [l_unit] Column 03: z coordinate [l_unit] Column 04: Stellar mass [m_unit] Column 05: Velocity in the x direction [v_unit] Column 06: Velocity in the y direction [v_unit] Column 07: Velocity in the z direction [v_unit] Column 08: Velocity dispersion in the x direction [v_unit] Column 09: Velocity dispersion in the y direction [v_unit] Column 10: Velocity dispersion in the z direction [v_unit]\n\nThe mass is the accumulated mass of the particles within each voxel. The velocity is the mean of the velocities of those particles, and the velocity dispersion is the standard deviation.\n\nIf there are no particles, the mass is 0, and the velocity and velocity dispersion are NaN. If there is only one particle, the mass and velocity are the ones from that particle, and the velocity dispersion is NaN.\n\nBy default (filter_mode = :subhalo) we use the following reference system:\n\nThe origin is in the position of the particle/cell at the potencial minimum of the main subhalo.\nThe x, y, and z axis form a right-handed cartesian reference system (x × y = z), where the z axis has the orientation of the stellar angular momentum, and the x and y axis are roughly in the direction of the corresponding principal axis.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::ReducedIndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13) or an StepRange (e.g. 5:2:13). Starts at 1.\ngrid::CubicGrid=CubicGrid(BOX_L, 100): Cubic grid.\nrow_major_order::Bool=true: Store the results in row-major order (C and Python) instead of column-major order (Julia, Fortran, and MATLAB). See Row- and column-major order.\nm_unit::Unitful.Units=u\"Msun\": Mass unit\nl_unit::Unitful.Units=u\"kpc\": Length unit.\nv_unit::Unitful.Units=u\"km * s^-1\": Velocity unit.\noutput_file::String=\"./stellar_velocity_cube.hdf5\": Path to the output HDF5 file. This file will be created, and the full path to it too, if it doesn't exist.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:subhalo: Which cells/particles will be consider, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nshow_progress::Bool=true: If a progress bar will be shown.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.temperatureMap-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Convenience functions","title":"GalaxyInspector.temperatureMap","text":"temperatureMap(\n    simulation_paths::Vector{String},\n    slice::IndexType;\n    <keyword arguments>\n)::Nothing\n\nPlot a 2D histogram of the temperature.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored. If set to 0, an animation using every snapshots will be made.\ntype::Symbol=:cells: If the gas will be assumed to be in :particles or in Voronoi :cells.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nprojection_planes::Vector{Symbol}=[:xy]: Projection planes. The options are :xy, :xz, and :yz. The disk is generally oriented to have its axis of rotation parallel to the z axis.\nbox_size::Unitful.Length=100u\"kpc\": Physical side length of the plot window.\npixel_length::Unitful.Length=0.1u\"kpc\": Pixel (bin of the 2D histogram) side length.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\ntitle::Union{Symbol,<:AbstractString}=\"\": Title for the figure. If left empty, no title is printed. It can also be set to one of the following options:\n:physical_time -> Physical time since the Big Bang.\n:lookback_time -> Physical time left to reach the last snapshot.\n:scale_factor  -> Scale factor (only relevant for cosmological simulations).\n:redshift      -> Redshift (only relevant for cosmological simulations).\nannotation::AbstractString=\"\": Text to be added into the top left corner of the plot. If left empty, nothing is printed.\ncolorbar::Bool=false: If a colorbar will be added.\ncolorrange::Union{Nothing,Tuple{<:Real,<:Real}}=nothing: Sets the start and end points of the colormap. Use nothing to use the extrema of the values to be plotted.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.timeSeries-Tuple{Vector{String}, Symbol, Symbol}","page":"Convenience functions","title":"GalaxyInspector.timeSeries","text":"timeSeries(\n    simulation_paths::Vector{String},\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot a time series.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nx_quantity::Symbol: Quantity for the x axis. The options are:\n:stellar_mass              -> Stellar mass.\n:gas_mass                  -> Gas mass.\n:hydrogen_mass             -> Hydrogen mass.\n:dm_mass                   -> Dark matter mass.\n:bh_mass                   -> Black hole mass.\n:molecular_mass            -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass         -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass               -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass              -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass              -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass          -> Stellar gas mass (according to out SF model).\n:stellar_number            -> Number of stellar particles.\n:gas_number                -> Number of gas cells.\n:dm_number                 -> Number of dark matter particles.\n:bh_number                 -> Number of black hole particles.\n:molecular_fraction        -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction     -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction           -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction          -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction          -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction-> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction      -> Stellar gas fraction (according to out SF model).\n:stellar_area_density      -> Stellar area mass density, for a radius of DISK_R.\n:gas_area_density          -> Gas mass surface density, for a radius of DISK_R.\n:molecular_area_density    -> Molecular mass surface density, for a radius of DISK_R.\n:br_molecular_area_density -> Molecular mass surface density, for a radius of DISK_R, computed using the pressure relation in Blitz et al. (2006).\n:atomic_area_density       -> Atomic hydrogen area mass density, for a radius of DISK_R.\n:ionized_area_density      -> Ionized hydrogen area mass density, for a radius of DISK_R.\n:neutral_area_density      -> Neutral mass surface density, for a radius of DISK_R.\n:sfr_area_density          -> Star formation rate area density, for the last AGE_RESOLUTION and a radius of DISK_R.\n:gas_td                    -> The mean total gas depletion time.\n:molecular_td              -> The mean molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td           -> The mean molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                 -> The mean atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                -> The mean ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                -> The mean neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity           -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity       -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance           -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance       -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_specific_am       -> Norm of the stellar specific angular momentum.\n:gas_specific_am           -> Norm of the gas specific angular momentum.\n:dm_specific_am            -> Norm of the dark matter specific angular momentum.\n:sfr                       -> The star formation rate.\n:ssfr                      -> The specific star formation rate.\n:observational_sfr         -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr        -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff               -> The mean star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                   -> The mean star formation efficiency per free-fall time for the gas.\n:molecular_eff             -> The mean star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff          -> The mean star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                -> The mean star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff               -> The mean star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff               -> The mean star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:scale_factor              -> Scale factor.\n:redshift                  -> Redshift.\n:physical_time             -> Physical time since the Big Bang.\n:lookback_time             -> Physical time left to reach the last snapshot.\n:ode_gas_it                -> Integration time.\n:ode_gas_accu_it           -> Accumulated integration time.\n:ode_gas_tau_s             -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d             -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i             -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                 -> Mass recycling parameter, R.\n:ode_gas_cold_mf           -> Cold gas mass fraction.\n:ode_stellar_it            -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it       -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s         -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d         -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i         -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r             -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf       -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho       -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z         -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass      -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr       -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P         -> Gas pressure, for the gas that form the stars.\ny_quantity::Symbol: Quantity for the y axis. The options are:\n:stellar_mass              -> Stellar mass.\n:gas_mass                  -> Gas mass.\n:hydrogen_mass             -> Hydrogen mass.\n:dm_mass                   -> Dark matter mass.\n:bh_mass                   -> Black hole mass.\n:molecular_mass            -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass         -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass               -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass              -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass              -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass          -> Stellar gas mass (according to out SF model).\n:stellar_number            -> Number of stellar particles.\n:gas_number                -> Number of gas cells.\n:dm_number                 -> Number of dark matter particles.\n:bh_number                 -> Number of black hole particles.\n:molecular_fraction        -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction     -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction           -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction          -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction          -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction-> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction      -> Stellar gas fraction (according to out SF model).\n:stellar_area_density      -> Stellar area mass density, for a radius of DISK_R.\n:gas_area_density          -> Gas mass surface density, for a radius of DISK_R.\n:molecular_area_density    -> Molecular mass surface density, for a radius of DISK_R.\n:br_molecular_area_density -> Molecular mass surface density, for a radius of DISK_R, computed using the pressure relation in Blitz et al. (2006).\n:atomic_area_density       -> Atomic hydrogen area mass density, for a radius of DISK_R.\n:ionized_area_density      -> Ionized hydrogen area mass density, for a radius of DISK_R.\n:neutral_area_density      -> Neutral mass surface density, for a radius of DISK_R.\n:sfr_area_density          -> Star formation rate area density, for the last AGE_RESOLUTION and a radius of DISK_R.\n:gas_td                    -> The mean total gas depletion time.\n:molecular_td              -> The mean molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td           -> The mean molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                 -> The mean atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                -> The mean ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                -> The mean neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity           -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity       -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance           -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance       -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_specific_am       -> Norm of the stellar specific angular momentum.\n:gas_specific_am           -> Norm of the gas specific angular momentum.\n:dm_specific_am            -> Norm of the dark matter specific angular momentum.\n:sfr                       -> The star formation rate.\n:ssfr                      -> The specific star formation rate.\n:observational_sfr         -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr        -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff               -> The mean star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                   -> The mean star formation efficiency per free-fall time for the gas.\n:molecular_eff             -> The mean star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff          -> The mean star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                -> The mean star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff               -> The mean star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff               -> The mean star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:scale_factor              -> Scale factor.\n:redshift                  -> Redshift.\n:physical_time             -> Physical time since the Big Bang.\n:lookback_time             -> Physical time left to reach the last snapshot.\n:ode_gas_it                -> Integration time.\n:ode_gas_accu_it           -> Accumulated integration time.\n:ode_gas_tau_s             -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d             -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i             -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                 -> Mass recycling parameter, R.\n:ode_gas_cold_mf           -> Cold gas mass fraction.\n:ode_stellar_it            -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it       -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s         -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d         -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i         -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r             -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf       -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho       -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z         -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass      -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr       -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P         -> Gas pressure, for the gas that form the stars.\ny_log::Bool=true: If the y axis is will have a log10 scale. Only works if fraction = false.\ncumulative::Bool=false: If the y_quantity will be accumulated or not.\nfraction::Bool=false: If the y_quantity will be represented as a fraction of the last value. If cumulative = true, this will apply to the accumulated values.\nslice::IndexType=(:): Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nextra_filter::Function=filterNothing: Filter function that will be applied after the one given by filter_mode.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=nothing: Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\nbackup_results::Bool=false: If the values to be plotted will be backup in a JLD2 file.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.velocityProfile-Tuple{Vector{String}, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}, Symbol}","page":"Convenience functions","title":"GalaxyInspector.velocityProfile","text":"velocityProfile(\n    simulation_paths::Vector{String},\n    slice::IndexType,\n    quantity::Symbol;\n    <keyword arguments>\n)::Nothing\n\nPlot a velocity profile.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType: Slice of the simulations, i.e. which snapshots will be plotted. It can be an integer (a single snapshot), a vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\ncomponent::Symbol: Which component will be calculated. The options are:\n:stellar_vradial     -> Stellar radial speed (v_r).\n:stellar_vtangential -> Stellar tangential speed (v_theta).\n:stellar_vzstar      -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\nyscale::Function=identity: Scaling function for the y axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\noutput_path::String=\"./\": Path to the output folder.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc, after filtering) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=basename.(simulation_paths): Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\n\n\n\n\n","category":"method"},{"location":"api/plotting/convenience/#GalaxyInspector.virialAccretionEvolution-Tuple{Vector{String}}","page":"Convenience functions","title":"GalaxyInspector.virialAccretionEvolution","text":"virialAccretionEvolution(\n    simulation_paths::Vector{String};\n    <keyword arguments>\n)::Nothing\n\nPlot a time series of the accreted mass into the virial radius.\n\nArguments\n\nsimulation_paths::Vector{String}: Paths to the simulation directories, set in the code variable OutputDir.\nslice::IndexType=(:): Slice of the simulations, i.e. which snapshots will be plotted. It can be vector of integers (several snapshots), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (all snapshots). Starts at 1 and out of bounds indices are ignored.\nhalo_idx::Int=1: Index of the target halo (FoF group). Starts at 1.\ntracers::Bool=false: If tracers will be use to compute the mass accretion.\nsmooth::Int=0: The time series will be smooth out using smooth bins. Set it to 0 if you want no smoothing.\noutput_path::String=\"./\": Path to the output folder.\nsim_labels::Union{Vector{<:AbstractString},Nothing}=nothing: Labels for the plot legend, one per simulation. Set it to nothing if you don't want a legend.\ntheme::Attributes=Theme(): Plot theme that will take precedence over DEFAULT_THEME.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/tracers/#Tracer-functions","page":"Tracer functions","title":"Tracer functions","text":"","category":"section"},{"location":"api/analysis/tracers/","page":"Tracer functions","title":"Tracer functions","text":"These functions are used internally and none are exported. ","category":"page"},{"location":"api/analysis/tracers/","page":"Tracer functions","title":"Tracer functions","text":"These functions depend on the particulars of the simulation code (e.g. units).","category":"page"},{"location":"api/analysis/tracers/","page":"Tracer functions","title":"Tracer functions","text":"","category":"page"},{"location":"api/analysis/tracers/","page":"Tracer functions","title":"Tracer functions","text":"Modules = [GalaxyInspector]\nPages   = [\"analysis/tracers.jl\"]","category":"page"},{"location":"api/analysis/tracers/#GalaxyInspector.findTracers-Tuple{Dict}","page":"Tracer functions","title":"GalaxyInspector.findTracers","text":"findTracers(data_dict::Dict; <keyword arguments>)::Vector{UInt}\n\nFind the tracers whose parents are allowed by filter_function.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA vector with the IDs of the tracers.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/tracers/#GalaxyInspector.parentIDToIndex-Tuple{Dict, Vector{UInt64}}","page":"Tracer functions","title":"GalaxyInspector.parentIDToIndex","text":"parentIDToIndex(\n    data_dict::Dict,\n    target_ids::Vector{UInt},\n)::Dict{Symbol,Vector{Int}}\n\nFind the indices of the cell/particles with IDs given by target_ids.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ntarget_ids::Vector{UInt}: List of tracer IDs.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> idxs::Int\ncell/particle type -> idxs::Int\ncell/particle type -> idxs::Int\n...\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/tracers/#GalaxyInspector.parentToTracerID-Tuple{Dict, Vector{UInt64}}","page":"Tracer functions","title":"GalaxyInspector.parentToTracerID","text":"parentToTracerID(data_dict::Dict, target_ids::Vector{UInt})::Vector{UInt}\n\nFind the IDs of the tracers corresponding to a given list of parent IDs.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ntarget_ids::Vector{UInt}: List of parent IDs.\n\nReturns\n\nA vector with the IDs of the tracers.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/tracers/#GalaxyInspector.tracerToParentID-Tuple{Dict, Vector{UInt64}}","page":"Tracer functions","title":"GalaxyInspector.tracerToParentID","text":"tracerToParentID(data_dict::Dict, target_ids::Vector{UInt})::Vector{UInt}\n\nFind the IDs of the parents corresponding to a given list of tracer IDs.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ntarget_ids::Vector{UInt}: List of tracer IDs.\n\nReturns\n\nA vector with the IDs of the parents.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/tracers/#GalaxyInspector.tracersToMass-Tuple{Dict, Vector{UInt64}}","page":"Tracer functions","title":"GalaxyInspector.tracersToMass","text":"tracersToMass(\n    data_dict::Dict,\n    target_ids::Vector{UInt},\n)::Dict{Symbol,Vector{<:Unitful.Mass}}\n\nFind the masses of the parent cell/particles of the tracers with IDs target_ids.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ntarget_ids::Vector{UInt}: List of tracer IDs.\n\nReturns\n\nA dictionary with the following shape:\ncell/particle type -> masses::Vector{<:Unitful.Mass}\ncell/particle type -> masses::Vector{<:Unitful.Mass}\ncell/particle type -> masses::Vector{<:Unitful.Mass}\n...\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/tracers/#GalaxyInspector.tracersWithinDisc-Tuple{Dict}","page":"Tracer functions","title":"GalaxyInspector.tracersWithinDisc","text":"tracersWithinDisc(data_dict::Dict; <keyword arguments>)::Vector{UInt}\n\nFind the tracers that are within a given cylinder.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nmax_r::Unitful.Length=DISK_R: Radius of the cylinder.\nmax_z::Unitful.Length=5.0u\"kpc\": Half height of the cylinder.\n\nReturns\n\nA vector with the IDs of the tracers.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/tracers/#GalaxyInspector.tracersWithinR200-Tuple{Dict}","page":"Tracer functions","title":"GalaxyInspector.tracersWithinR200","text":"tracersWithinR200(data_dict::Dict; <keyword arguments>)::Vector{UInt}\n\nFind the tracers that are within the virial radius (R_200).\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nhalo_idx::Int=1: Index of the target halo (FoF group). Starts at 1.\n\nReturns\n\nA vector with the IDs of the tracers.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#Auxiliary-functions","page":"Auxiliary functions","title":"Auxiliary functions","text":"","category":"section"},{"location":"api/auxiliary_functions/","page":"Auxiliary functions","title":"Auxiliary functions","text":"These functions are used internally and none are exported. ","category":"page"},{"location":"api/auxiliary_functions/","page":"Auxiliary functions","title":"Auxiliary functions","text":"These functions may depend on the particulars of the simulation code (e.g. units).","category":"page"},{"location":"api/auxiliary_functions/","page":"Auxiliary functions","title":"Auxiliary functions","text":"","category":"page"},{"location":"api/auxiliary_functions/","page":"Auxiliary functions","title":"Auxiliary functions","text":"Modules = [GalaxyInspector]\nPages   = [\"auxiliary_functions.jl\"]","category":"page"},{"location":"api/auxiliary_functions/#Base.intersect-Tuple{Colon, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Auxiliary functions","title":"Base.intersect","text":"New methods for Base.intersect to use with the Colon type.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#Base.intersect-Tuple{Vector{Bool}, Union{Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Auxiliary functions","title":"Base.intersect","text":"New methods for Base.intersect to use with the Vector{Bool} type.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#Base.isempty-Tuple{LaTeXStrings.LaTeXString}","page":"Auxiliary functions","title":"Base.isempty","text":"New method for Base.isempty to check for empty LaTeXStrings.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#Base.iszero-Tuple{Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Auxiliary functions","title":"Base.iszero","text":"New method for Base.iszero to compare IndexType with 0 as an integer.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#Base.union-Tuple{Vector{Bool}, Union{Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Auxiliary functions","title":"Base.union","text":"New methods for Base.union to use with the Vector{Bool} type.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.absCoor-Tuple{Union{Makie.Axis, Makie.Figure, Makie.FigureAxisPlot}, Real, Real}","page":"Auxiliary functions","title":"GalaxyInspector.absCoor","text":"absCoor(\n    plot::Union{Makie.FigureAxisPlot,Makie.Axis,Makie.Figure},\n    r_x::Real,\n    r_y::Real,\n)::NTuple{2,Float64}\n\nCompute the absolute x and y coordinates of a plot, from the relative ones.\n\nArguments\n\nplot::Union{Makie.FigureAxisPlot,Makie.Axis,Makie.Figure}: Plot, axis, or figure for which the absolute coordinates will be calculated. In the case of a figure, it will use the limits from the current axis object.\nr_x::Real: Relative x coordinate.\nr_y::Real: Relative y coordinate.\n\nReturns\n\nA tuple with the absolute coordinates, (x, y).\n\nExamples\n\njulia> absCoor(lines(rand(100)), 0.5, 0.5)\n(50.50000071525574, 0.48792968317866325)\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.area-Tuple{Number}","page":"Auxiliary functions","title":"GalaxyInspector.area","text":"Area of a circle with radius r.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.barPlotLabelFormater-Tuple{LaTeXStrings.LaTeXString}","page":"Auxiliary functions","title":"GalaxyInspector.barPlotLabelFormater","text":"barPlotLabelFormater(x::LaTeXString)::LaTeXString\n\nFormat a number to be a barplot label.\n\nMethod for compatibility with the barplot! function of Makie.\n\nArguments\n\nx::Number: Value to be formated.\n\nReturns\n\nThe bar label.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.barPlotLabelFormater-Tuple{Number}","page":"Auxiliary functions","title":"GalaxyInspector.barPlotLabelFormater","text":"barPlotLabelFormater(x::Number)::LaTeXString\n\nFormat a number to be a barplot label.\n\nFor values between 0 and 0.01 the label will be \"< 0.01\", otherwise it will be the value itself with 2 digits.\n\nArguments\n\nx::Number: Value to be formated.\n\nReturns\n\nThe bar label.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.bigiel2008-Tuple{Vector{<:Union{Unitful.Quantity{T, 𝐌 𝐋^-2, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌 𝐋^-2, U}} where {L, S}} where {T, U}}}","page":"Auxiliary functions","title":"GalaxyInspector.bigiel2008","text":"bigiel2008(\n    ΣH::Vector{<:SurfaceDensity};\n    <keyword arguments>\n)::Vector{<:Number}\n\nKennicutt-Schmidt law for the molecular or neutral gas, taken from a set of observations of nearby galaxies.\n\nFrom Bigiel et al. (2008) (Section 3.1), we have\n\nSigma_mathrmSFR = a left( fracSigma_mathrmHI H_2 gas10  mathrmM_odot  pc^-2 right)^N  \n\nwhere N is the power-law index, and A = log_10(a), where a is Sigma_mathrmSFR at the fiducial gas surface density of 10  mathrmM_odot  pc^-2.\n\nArguments\n\nΣH::Vector{<:SurfaceDensity}: Values of the molecular or neutral gas surface density, with units.\nmolecular::Bool=true: If the x axis will be the area mass density of molecular hydrogen, or, if set to false, the area mass density of neutral hydrogen.\nlog_output::Bool=true: If the output will the log_10 of the star formation area density, or the star formation area density itself (with units). If log_output = true, the implied unit is mathrmM_odot  yr^-1  kpc^-2\n\nReturns\n\nThe star formation area density.\n\nReferences\n\nF. Bigiel et al. (2008). THE STAR FORMATION LAW IN NEARBY GALAXIES ON SUB-KPC SCALES. The Astrophysical Journal, 136(6), 2846. doi:10.1088/0004-6256/136/6/2846\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.cleanPlot!-Tuple{Any}","page":"Auxiliary functions","title":"GalaxyInspector.cleanPlot!","text":"Default function to end cleanPlot! recursion if an unknown type is encountered.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.cleanPlot!-Tuple{Makie.Axis}","page":"Auxiliary functions","title":"GalaxyInspector.cleanPlot!","text":"cleanPlot!(ax::Makie.Axis)::Bool\n\nEmpty an axis.\n\nArguments\n\nax::Makie.Axis: Axis to be emptied.\n\nReturns\n\nFlag to indicate that an axis has been emptied.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.cleanPlot!-Tuple{Makie.Figure}","page":"Auxiliary functions","title":"GalaxyInspector.cleanPlot!","text":"cleanPlot!(figure::Makie.Figure)::Nothing\n\nDelete all the legends of a figure and empty all its axes.\n\nArguments\n\nfigure::Makie.Figure: Figure to be cleaned.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.cleanPlot!-Tuple{Union{Makie.Colorbar, Makie.Legend}}","page":"Auxiliary functions","title":"GalaxyInspector.cleanPlot!","text":"cleanPlot!(legend::Union{Makie.Legend,Makie.Colorbar})::Bool\n\nDelete a legend or colorbar.\n\nArguments\n\nlegend::Union{Makie.Legend,Makie.Colorbar}: Legend or colorbar to be deleted.\n\nReturns\n\nFlag to indicate that a legend or colorbar has been deleted.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.computeParticleBandProfile-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Vector{<:Number}, GalaxyInspector.CircularGrid}","page":"Auxiliary functions","title":"GalaxyInspector.computeParticleBandProfile","text":"computeParticleBandProfile(\n    positions::Matrix{<:Unitful.Length},\n    quantity::Vector{<:Number},\n    grid::CircularGrid;\n    <keyword arguments>\n)::NTuple{2,Vector{<:Number}}\n\nCompute a profile of the mean and standard deviation of quantity, using an 1D histogram\n\nEmpty bins have NaN as mean and standard deviation.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nquantity::Vector{<:Number}: The profile will be of this quantity.\ngrid::CircularGrid: Circular grid.\nflat::Bool=true: If the profile will be 2D, using rings, or 3D, using spherical shells.\n\nReturns\n\nA tuple with two elements:\nA vector with the mean value for each bin.\nA vector with the standard deviation for each bin.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.computeParticleProfile-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Vector{<:Number}, GalaxyInspector.CircularGrid}","page":"Auxiliary functions","title":"GalaxyInspector.computeParticleProfile","text":"computeParticleProfile(\n    positions::Matrix{<:Unitful.Length},\n    quantity::Vector{<:Number},\n    grid::CircularGrid;\n    <keyword arguments>\n)::Vector{<:Number}\n\nCompute a profile, using an 1D histogram.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nquantity::Vector{<:Number}: The profile will be of this quantity.\ngrid::CircularGrid: Circular grid.\nnorm_values::Vector{<:Number}=Number[]: Values to normalize quantity.\nflat::Bool=true: If the profile will be 2D, using rings, or 3D, using spherical shells.\ntotal::Bool=true: If the sum (default) or the mean of quantity will be computed for each bin.\ncumulative::Bool=false: If the profile will be accumulated or not.\ndensity::Bool=false: If the profile will be of the density of quantity.\nempty_nan::Bool=true: If empty bins will be set to NaN, 0 is used otherwise. Be carefull if empty_nan = true and cumulative = true, because every bin after the first NaN will be set to NaN.\n\nReturns\n\nVector with the values of the profile.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.cubicSplineKernel-Tuple{Real, Number}","page":"Auxiliary functions","title":"GalaxyInspector.cubicSplineKernel","text":"cubicSplineKernel(q::Real, h::Number)::Number\n\n2D cubic spline kernel.\n\nArguments\n\nq::Real: Relative distance to the neighbor, r - r  h.\nh::Number: Smoothing length.\n\nReturns\n\nThe kernel function evaluated at a separation q * h, and with a smoothing length h.\n\nReferences\n\nPySPH documentation\n\nJ. J. Monaghan (1992). Smoothed Particle Hydrodynamics. Annual Review of Astronomy and Astrophysics, 30, 543-574. doi:10.1146/annurev.aa.30.090192.002551\n\nM.B. Liu et al. (2010). Smoothed Particle Hydrodynamics (SPH): an Overview and Recent Developments. Archives of Computational Methods in Engineering, 17, 25–76. doi:10.1007/s11831-010-9040-7\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.deltas-Tuple{Vector{<:Number}}","page":"Auxiliary functions","title":"GalaxyInspector.deltas","text":"deltas(data::Vector{<:Number})::Vector{<:Number}\n\nCompute the difference between each consecutive pair of elements in data.\n\nArguments\n\ndata::Vector{<:Number}: Data vector. It has to have at least 2 elements.\n\nReturns\n\nA vector with the difference between each consecutive pair of elements in data, the first element is 0 by convention.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.density3DProjection-Tuple{Dict, GalaxyInspector.CubicGrid, Symbol, Symbol}","page":"Auxiliary functions","title":"GalaxyInspector.density3DProjection","text":"density3DProjection(\n    data_dict::Dict,\n    grid::CubicGrid,\n    quantity::Symbol,\n    type::Symbol;\n    <keyword arguments>\n)::Array{Float64,3}\n\nSample the 3D density field of a given quantity using a cubic grid\n\nnote: Note\nIf the source of the field are particles, a simple 3D histogram is used. If they are Voronoi cells instead, the density of the cell that intersect each voxel is used.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::CubicGrid: Cubic grid.\nquantity::Symbol: Which density will be calculated. The options are:\n:stellar_mass      -> Stellar density.\n:gas_mass          -> Gas density.\n:hydrogen_mass     -> Hydrogen density.\n:dm_mass           -> Dark matter density.\n:bh_mass           -> Black hole density.\n:molecular_mass    -> Molecular hydrogen (mathrmH_2) density.\n:br_molecular_mass -> Molecular hydrogen (mathrmH_2) density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass       -> Atomic hydrogen (mathrmHI) density.\n:ionized_mass      -> Ionized hydrogen (mathrmHII) density.\n:neutral_mass      -> Neutral hydrogen (mathrmHI + H_2) density.\n:stellar_gas_mass  -> Stellar gas mass (according to out SF model).\ntype::Symbol: If the source of the field are :particles or Voronoi :cells.\nm_unit::Unitful.Units=u\"Msun\": Mass unit.\nl_unit::Unitful.Units=u\"kpc\": Length unit.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA 3D array with the density at each point of the 3D grid.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.energyIntegrand-Tuple{Real, GalaxyInspector.SnapshotHeader}","page":"Auxiliary functions","title":"GalaxyInspector.energyIntegrand","text":"energyIntegrand(a::Real, header::SnapshotHeader)::Float64\n\nThe integrand of the integral that converts the scale factor into physical time:\n\nfrac1HsqrtmathcalE  \n\nwhere\n\nmathcalE = Omega_Lambda + (1 - Omega_Lambda - Omega_m)  a^-2 + Omega_m  a^-3  \n\nH = H_0  a  \n\nArguments\n\na::Real: Scale factor.\nheader::SnapshotHeader: Header of the relevant snapshot file.\n\nReturns\n\nThe integrand evaluated at a, in mathrmGyr.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.evaluateNormal-Tuple{Vector{<:Number}}","page":"Auxiliary functions","title":"GalaxyInspector.evaluateNormal","text":"evaluateNormal(data::Vector{<:Number})::Vector{<:Number}\n\nEvaluate a normal distribution at the values in data.\n\nThe mean and standard deviation of the distribution are the ones from data itself.\n\nArguments\n\ndata::Vector{<:Number}: Data vector used to compute the mean and standard deviation of the normal distribution.\n\nReturns\n\nThe normal distribution evaluated at the values in data.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.findClosestSnapshot-Tuple{String, Union{Unitful.Quantity{T, 𝐓, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐓, U}} where {L, S}} where {T, U}}","page":"Auxiliary functions","title":"GalaxyInspector.findClosestSnapshot","text":"findClosestSnapshot(simulation_path::String, time::Unitful.Time)::Int\n\nFind the global index, in the context of the simulation, of the snapshot with a physical time closest to time.\n\nArguments\n\nsimulation_path::String: Path to the simulation directory, set in the code variable OutputDir.\ntime::Unitful.Time: Target physical time.\n\nReturns\n\nThe index of the snapshot with a physical time closest to time.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.findClosestSnapshot-Tuple{String, Vector{<:Union{Unitful.Quantity{T, 𝐓, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐓, U}} where {L, S}} where {T, U}}}","page":"Auxiliary functions","title":"GalaxyInspector.findClosestSnapshot","text":"findClosestSnapshot(simulation_path::String, times::Vector{<:Unitful.Time})::Vector{Int}\n\nFind the global index, in the context of the simulation, of the snapshot with a physical time closest to each of the ones given in times.\n\nArguments\n\nsimulation_path::String: Path to the simulation directory, set in the code variable OutputDir.\ntimes::Vector{<:Unitful.Time}: Target physical times.\n\nReturns\n\nThe indices of the snapshots with physical times closest to times.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.flattenGrid-Tuple{GalaxyInspector.CubicGrid}","page":"Auxiliary functions","title":"GalaxyInspector.flattenGrid","text":"flattenGrid(cubic_grid::CubicGrid)::SquareGrid\n\nUsing a CubicGrid construct a SquareGrid with the same center, number of bins, and physical side length.\n\nArguments\n\ncubic_grid::CubicGrid: Cubic grid.\n\nReturns\n\nA square grid.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.formatError-Tuple{Number, Number}","page":"Auxiliary functions","title":"GalaxyInspector.formatError","text":"formatError(q_mean::Number, q_error::Number)::NTuple{2,<:Number}\n\nNicely format a magnitude with uncertainty.\n\nIt follows the traditional rules for error presentation: the error has only one significant digit, unless such digit is a one, in which case two significant digits are used. The mean will have as many digits as to match the last significant position of the error. An error equal to 0 will leave the mean unchanged.\n\nArguments\n\nq_mean::Number: Mean value.\nq_error::Number: Error value. It must be positive.\n\nReturns\n\nA tuple with the formatted mean and error values.\n\nExamples\n\njulia> formatError(69.42069, 0.038796)\n(69.42, 0.04)\n\njulia> formatError(69.42069, 0.018796)\n(69.421, 0.019)\n\njulia> formatError(15.42, 0.00004)\n(15.42, 4.0e-5)\n\njulia> formatError(69.42069, 0.0)\n(69.42069, 0.0)\n\njulia> formatError(69.42069, 93.4)\n(70.0, 90.0)\n\njulia> formatError(69.42069, 123.4)\n(70.0, 120.0)\n\njulia> formatError(15.42069, 16.4)\n(15.0, 16.0)\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.getEmpty-Tuple","page":"Auxiliary functions","title":"GalaxyInspector.getEmpty","text":"Always returns an empty vector, for any type and number of arguments.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.getLabel-Tuple{AbstractString, Int64, Unitful.Units}","page":"Auxiliary functions","title":"GalaxyInspector.getLabel","text":"getLabel(\n    label::AbstractString,\n    factor::Int,\n    unit::Unitful.Units;\n    <keyword arguments>\n)::AbstractString\n\nConstruct an axis label.\n\nArguments\n\nlabel::AbstractString: Variable name.\nfactor::Int: Exponential factor to scale down the units. If different from 0, a term of the form 10^factor will be added to the label.\nunit::Unitful.Units: Unit of the axis.\nlatex::Bool=true: If the output will be a LaTeXString, or a plain String.\n\nReturns\n\nThe LaTeXString or String: \"label [10^factor unit]\". If label is \"\", an empty string is returned. The factor term only appears if factor != 0, the unit term only appears if unit != Unitful.NoUnits, and the brackets only appears if there are a factor and/or a unit term.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.getNothing-Tuple","page":"Auxiliary functions","title":"GalaxyInspector.getNothing","text":"Always returns nothing, for any type and number of arguments.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.getUnitLabel-Tuple{Int64, Unitful.Units}","page":"Auxiliary functions","title":"GalaxyInspector.getUnitLabel","text":"getUnitLabel(factor::Int, unit::Unitful.Units; <keyword arguments>)::AbstractString\n\nConstruct the unit part of an axis label.\n\nArguments\n\nfactor::Int: Exponential factor to scale down the units. If different from 0, a term of the form 10^factor will be added to the label.\nunit::Unitful.Units: Unit of the axis.\nlatex::Bool=true: If the output will be a LaTeXString, or a plain String.\n\nReturns\n\nThe LaTeXString or String: \"10^factor unit\". The factor term only appears if factor != 0, the unit term only appears if unit != Unitful.NoUnits.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.histogram1D-Tuple{Vector{<:Number}, Union{GalaxyInspector.CircularGrid, GalaxyInspector.LinearGrid}}","page":"Auxiliary functions","title":"GalaxyInspector.histogram1D","text":"histogram1D(\n    positions::Vector{<:Number},\n    grid::Union{LinearGrid,CircularGrid},\n)::Vector{Int}\n\nCompute a 1D histogram of positions.\n\nArguments\n\npositions::Vector{<:Number}: Values for which the histogram will be constructed.\ngrid::Union{LinearGrid,CircularGrid}: A linear or circular grid.\n\nReturns\n\nA vector with the counts.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.histogram1D-Tuple{Vector{<:Number}, Vector{<:Number}, Union{GalaxyInspector.CircularGrid, GalaxyInspector.LinearGrid}}","page":"Auxiliary functions","title":"GalaxyInspector.histogram1D","text":"histogram1D(\n    positions::Vector{<:Number},\n    values::Vector{<:Number},\n    grid::Union{LinearGrid,CircularGrid};\n    <keyword arguments>\n)::Vector{<:Number}\n\nCompute a 1D histogram of values.\n\nArguments\n\npositions::Vector{<:Number}: Positions of the values within a 1D axis. This determines to which bin each value will be added.\nvalues::Vector{<:Number}: The values that will be added up in each bin, according to their positions.\ngrid::Union{LinearGrid,CircularGrid}: A linear or circular grid.\ntotal::Bool=true: If the sum (default) or the mean of values will be computed for each bin.\nempty_nan::Bool=true: If NaN will be put into empty bins, 0 is used otherwise.\n\nReturns\n\nA vector with the histogram values.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.histogram1D-Tuple{Vector{<:Number}, Vector{<:Number}, Vector{<:Number}}","page":"Auxiliary functions","title":"GalaxyInspector.histogram1D","text":"histogram1D(\n    positions::Vector{<:Number},\n    values::Vector{<:Number},\n    edges::Vector{<:Number};\n    <keyword arguments>\n)::Vector{<:Number}\n\nCompute a 1D histogram of values.\n\nArguments\n\npositions::Vector{<:Number}: Positions of the values within a 1D axis. This determines to which bin each value will be added.\nvalues::Vector{<:Number}: The values that will be added up in each bin, according to their positions.\nedges::Vector{<:Number}: A sorted list of bin edges.\ntotal::Bool=true: If the sum (default) or the mean of values will be computed for each bin.\nempty_nan::Bool=true: If NaN will be put into empty bins, 0 is used otherwise.\n\nReturns\n\nA vector with the histogram values.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.histogram1D-Tuple{Vector{<:Number}, Vector{<:Number}}","page":"Auxiliary functions","title":"GalaxyInspector.histogram1D","text":"histogram1D(positions::Vector{<:Number}, edges::Vector{<:Number})::Vector{Int}\n\nCompute a 1D histogram of positions.\n\nArguments\n\npositions::Vector{<:Number}: Values for which the histogram will be constructed.\nedges::Vector{<:Number}: A sorted list of bin edges.\n\nReturns\n\nA vector with the counts.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.histogram2D-Tuple{Matrix{<:Number}, GalaxyInspector.SquareGrid}","page":"Auxiliary functions","title":"GalaxyInspector.histogram2D","text":"histogram2D(positions::Matrix{<:Number}, grid::SquareGrid)::Matrix{Int}\n\nCompute a 2D histogram of positions.\n\nArguments\n\npositions::Matrix{<:Number}: Values for which the histogram will be constructed.\ngrid::SquareGrid: A square grid.\n\nReturns\n\nA matrix with the counts.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.histogram2D-Tuple{Matrix{<:Number}, Vector{<:Number}, GalaxyInspector.SquareGrid}","page":"Auxiliary functions","title":"GalaxyInspector.histogram2D","text":"histogram2D(\n    positions::Matrix{<:Number},\n    values::Vector{<:Number},\n    grid::SquareGrid;\n    <keyword arguments>\n)::Matrix{<:Number}\n\nCompute a 2D histogram of values.\n\nArguments\n\npositions::Matrix{<:Number}: Positions of the values in the grid. Each column correspond to a value and each row is a dimension. This determines to which bin each value will be added.\nvalues::Vector{<:Number}: The values that will be added up in each square bin, according to their positions.\ngrid::SquareGrid: A square grid.\ntotal::Bool=true: If the sum (default) or the mean of values will be computed in each bin.\nempty_nan::Bool=true: If NaN will be put into empty bins, 0 is used otherwise.\n\nReturns\n\nA matrix with the histogram values.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.histogram2D-Tuple{Matrix{<:Number}, Vector{<:Number}, Vector{<:Number}, Vector{<:Number}}","page":"Auxiliary functions","title":"GalaxyInspector.histogram2D","text":"histogram2D(\n    positions::Matrix{<:Number},\n    values::Vector{<:Number},\n    x_edges::Vector{<:Number},\n    y_edges::Vector{<:Number};\n    <keyword arguments>\n)::Matrix{<:Number}\n\nCompute a 2D histogram of values.\n\nArguments\n\npositions::Matrix{<:Number}: Positions of the values in the grid. Each column correspond to a value and each row is a dimension. This determines to which bin each value will be added.\nvalues::Vector{<:Number}: The values that will be added up in each square bin, according to their positions.\nx_edges::Vector{<:Number}: A sorted list of bin edges for the x axis.\ny_edges::Vector{<:Number}: A sorted list of bin edges for the y axis.\ntotal::Bool=true: If the sum (default) or the mean of values will be computed in each bin.\nempty_nan::Bool=true: If NaN will be put into empty bins, 0 is used otherwise.\n\nReturns\n\nA matrix with the histogram values.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.histogram2D-Tuple{Matrix{<:Number}, Vector{<:Number}, Vector{<:Number}}","page":"Auxiliary functions","title":"GalaxyInspector.histogram2D","text":"histogram2D(\n    positions::Matrix{<:Number},\n    x_edges::Vector{<:Number},\n    y_edges::Vector{<:Number},\n)::Matrix{Int}\n\nCompute a 2D histogram of positions.\n\nArguments\n\npositions::Matrix{<:Number}: Values for which the histogram will be constructed.\nx_edges::Vector{<:Number}: A sorted list of bin edges for the x axis.\ny_edges::Vector{<:Number}: A sorted list of bin edges for the y axis.\n\nReturns\n\nA matrix with the counts.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.histogram3D-Tuple{Matrix{<:Number}, GalaxyInspector.CubicGrid}","page":"Auxiliary functions","title":"GalaxyInspector.histogram3D","text":"histogram3D(positions::Matrix{<:Number}, grid::CubicGrid)::Array{Int,3}\n\nCompute a 3D histogram of positions.\n\nArguments\n\npositions::Matrix{<:Number}: Values for which the histogram will be constructed.\ngrid::CubicGrid: A cubic grid.\n\nReturns\n\nA 3D tensor with the counts.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.histogram3D-Tuple{Matrix{<:Number}, Vector{<:Number}, GalaxyInspector.CubicGrid}","page":"Auxiliary functions","title":"GalaxyInspector.histogram3D","text":"histogram3D(\n    positions::Matrix{<:Number},\n    values::Vector{<:Number},\n    grid::CubicGrid;\n    <keyword arguments>\n)::Array{<:Number,3}\n\nCompute a 3D histogram of values.\n\nArguments\n\npositions::Matrix{<:Number}: Positions of the values in the grid. Each column correspond to a value and each row is a dimension. This determines to which bin each value will be added.\nvalues::Vector{<:Number}: The values that will be added up in each square bin, according to their positions.\ngrid::CubicGrid: A cubic grid.\ntotal::Bool=true: If the sum (default) or the mean of values will be computed in each bin.\nempty_nan::Bool=true: If NaN will be put into empty bins, 0 is used otherwise.\n\nReturns\n\nA 3D tensor with the histogram values.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.hvcatImages-Tuple{Int64, Vector{String}}","page":"Auxiliary functions","title":"GalaxyInspector.hvcatImages","text":"hvcatImages(\n    blocks_per_row::Int,\n    paths::Vector{String};\n    <keyword arguments>\n)::Nothing\n\nJoin several images vertically and horizontally.\n\nThe elements will fill the rows and columns starting at the top left, going from left to right and from top to bottom (row-major order).\n\nArguments\n\nblocks_per_row::Int: Number of columns.\npaths::Vector{String}: Paths to the images.\noutput_path::String=\"./joined_images.png\": Path to the output image.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.invBigiel2008-Tuple{Vector{<:Union{Unitful.Quantity{T, 𝐌 𝐋^-2 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌 𝐋^-2 𝐓^-1, U}} where {L, S}} where {T, U}}}","page":"Auxiliary functions","title":"GalaxyInspector.invBigiel2008","text":"invBigiel2008(\n    Σsfr ::Vector{<:MassFlowDensity};\n    <keyword arguments>\n)::Vector{<:Number}\n\nInverse Kennicutt-Schmidt law for the molecular or neutral gas, taken from a set of observations of nearby galaxies.\n\nFrom Bigiel et al. (2008) (Section 3.1, Eq. 2), we have\n\nSigma_mathrmSFR = a left( fracSigma_mathrmHI H_2 gas10  mathrmM_odot  pc^-2 right)^N  \n\nwhere N is the power-law index, and A = log_10(a), where a is Sigma_mathrmSFR at the fiducial gas surface density of 10  mathrmM_odot  pc^-2.\n\nArguments\n\nΣsfr ::Vector{<:MassFlowDensity}: Values of the star formation area density, with units.\nmolecular::Bool=true: If the output will be the area mass density of molecular hydrogen, or, if set to false, the area mass density of neutral hydrogen.\nlog_output::Bool=true: If the output will the log_10 of the molecular or neutral gas surface density, or the molecular or neutral gas surface density itself (with units). If log_output = true, the implied unit is 10  mathrmM_odot  pc^-2\n\nReturns\n\nThe molecular or neutral gas surface density.\n\nReferences\n\nF. Bigiel et al. (2008). THE STAR FORMATION LAW IN NEARBY GALAXIES ON SUB-KPC SCALES. The Astrophysical Journal, 136(6), 2846. doi:10.1088/0004-6256/136/6/2846\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.invKennicutt1998-Tuple{Vector{<:Union{Unitful.Quantity{T, 𝐌 𝐋^-2 𝐓^-1, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌 𝐋^-2 𝐓^-1, U}} where {L, S}} where {T, U}}}","page":"Auxiliary functions","title":"GalaxyInspector.invKennicutt1998","text":"invKennicutt1998(Σsfr::Vector{<:MassFlowDensity}; <keyword arguments>)::Vector{<:Number}\n\nInverse Kennicutt-Schmidt law, taken from a set of observations of nearby galaxies.\n\nFrom Kennicutt (1998) (Section 4, Eq. 4), we have\n\nSigma_mathrmSFR = a left( fracSigma_mathrmgas1  mathrmM_odot  pc^-2 right)^N mathrmM_odot  yr^-1  kpc^-2  \n\nwhere N is the power-law index and a is Sigma_mathrmSFR at the fiducial gas surface density of 1  mathrmM_odot  pc^-2.\n\nArguments\n\nΣsfr::Vector{<:MassFlowDensity}: Values of the star formation area density, with units.\nlog_output::Bool=true: If the output will the log_10 of the gas mass surface density, or the gas mass surface density itself (with units). If log_output = true, the implied unit is mathrmM_odot  pc^-2\n\nReturns\n\nThe gas mass surface density.\n\nReferences\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.isPositive-Tuple{Number}","page":"Auxiliary functions","title":"GalaxyInspector.isPositive","text":"Test for strict positivity.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.kennicutt1998-Tuple{Vector{<:Union{Unitful.Quantity{T, 𝐌 𝐋^-2, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌 𝐋^-2, U}} where {L, S}} where {T, U}}}","page":"Auxiliary functions","title":"GalaxyInspector.kennicutt1998","text":"kennicutt1998(Σgas::Vector{<:SurfaceDensity}; <keyword arguments>)::Vector{<:Number}\n\nKennicutt-Schmidt law, taken from a set of observations of nearby galaxies.\n\nFrom Kennicutt (1998) (Section 4, Eq. 4), we have\n\nSigma_mathrmSFR = a left( fracSigma_mathrmgas1  mathrmM_odot  pc^-2 right)^N mathrmM_odot  yr^-1  kpc^-2  \n\nwhere N is the power-law index and a is Sigma_mathrmSFR at the fiducial gas surface density of 1  mathrmM_odot  pc^-2.\n\nArguments\n\nΣgas::Vector{<:SurfaceDensity}: Values of the gas mass surface density, with units.\nlog_output::Bool=true: If the output will the log_10 of the star formation area density, or the star formation area density itself (with units). If log_output = true, the implied unit is mathrmM_odot  yr^-1  kpc^-2\n\nReturns\n\nThe star formation area density.\n\nReferences\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.listHistogram1D-Tuple{Vector{<:Number}, Vector{<:Number}, Union{GalaxyInspector.CircularGrid, GalaxyInspector.LinearGrid}}","page":"Auxiliary functions","title":"GalaxyInspector.listHistogram1D","text":"listHistogram1D(\n    positions::Vector{<:Number},\n    values::Vector{<:Number},\n    grid::Union{LinearGrid,CircularGrid},\n)::Vector{Vector{<:Number}}\n\nCompute a 1D histogram of values, returning the full list of values within each bin.\n\nArguments\n\npositions::Vector{<:Number}: Positions of the values within a 1D axis. This determines to which bin each value will be added.\nvalues::Vector{<:Number}: The values that will be added up in each bin, according to their positions.\ngrid::Union{LinearGrid,CircularGrid}: A linear or circular grid.\n\nReturns\n\n- A vector with the lists of `values` within each bin.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.listHistogram1D-Tuple{Vector{<:Number}, Vector{<:Number}, Vector{<:Number}}","page":"Auxiliary functions","title":"GalaxyInspector.listHistogram1D","text":"listHistogram1D(\n    positions::Vector{<:Number},\n    values::Vector{<:Number},\n    edges::Vector{<:Number},\n)::Vector{Vector{<:Number}}\n\nCompute a 1D histogram of values, returning the full list of values within each bin.\n\nArguments\n\npositions::Vector{<:Number}: Positions of the values within a 1D axis. This determines to which bin each value will be added.\nvalues::Vector{<:Number}: The values that will be added up in each bin, according to their positions.\nedges::Vector{<:Number}: A sorted list of bin edges.\n\nReturns\n\nA vector with the lists of values within each bin.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.listHistogram3D-Tuple{Matrix{<:Number}, GalaxyInspector.CubicGrid}","page":"Auxiliary functions","title":"GalaxyInspector.listHistogram3D","text":"listHistogram3D(positions::Matrix{<:Number}, grid::CubicGrid)::Array{Vector{Int},3}\n\nCompute a 3D histogram of positions, returning the full list of indices within each bin.\n\nArguments\n\npositions::Matrix{<:Number}: Positions of the points in the grid. Each column correspond to a point and each row is a dimension. This determines to which bin the index of each point will be added.\ngrid::CubicGrid: A cubic grid.\n\nReturns\n\n- A tensor with the indices of the points within each bin.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.meta_formatter-Tuple{Base.CoreLogging.LogLevel, Vararg{Any, 5}}","page":"Auxiliary functions","title":"GalaxyInspector.meta_formatter","text":"meta_formatter(level::LogLevel, _module, group, id, file, line)\n\nFormatter for loggers.\n\nSee the documentation for ConsoleLogger\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.parserWS-Tuple{AbstractString}","page":"Auxiliary functions","title":"GalaxyInspector.parserWS","text":"parserWS(data::AbstractString)::Union{Float64,Missing}\n\nParse a string as a Float64, ignoring white spaces. If the string is empty return missing.\n\nArguments\n\ndata::AbstractString: String to be parsed.\n\nReturns\n\nNumber in the string as a Float64.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.plotParams-Tuple{Symbol}","page":"Auxiliary functions","title":"GalaxyInspector.plotParams","text":"plotParams(quantity::Symbol)::PlotParams\n\nSelect the plotting parameters for a given quantity.\n\nArguments\n\nquantity::Symbol: The options are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:generic_mass                -> Parameters for plots with several diferent masses.\n:stellar_number              -> Number of stellar particles.\n:gas_number                  -> Number of gas cells.\n:dm_number                   -> Number of dark matter particles.\n:bh_number                   -> Number of black hole particles.\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:generic_fraction            -> Parameters for plots with several diferent fraction.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:stellar_area_density        -> Stellar area mass density, for a radius of DISK_R.\n:gas_area_density            -> Gas mass surface density, for a radius of DISK_R.\n:molecular_area_density      -> Molecular mass surface density, for a radius of DISK_R.\n:br_molecular_area_density   -> Molecular mass surface density, for a radius of DISK_R, computed using the pressure relation in Blitz et al. (2006).\n:atomic_area_density         -> Atomic hydrogen area mass density, for a radius of DISK_R.\n:ionized_area_density        -> Ionized hydrogen area mass density, for a radius of DISK_R.\n:neutral_area_density        -> Neutral mass surface density, for a radius of DISK_R.\n:sfr_area_density            -> Star formation rate area density, for the last AGE_RESOLUTION and a radius of DISK_R.\n:generic_area_density        -> Parameters for plots with several diferent area densities.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:mass_accretion              -> Gas accretion rate. Positive values mean gas infall into the virial radius R_200, and negative values mean outflow.\n:stellar_specific_am         -> Norm of the stellar specific angular momentum.\n:gas_specific_am             -> Norm of the gas specific angular momentum.\n:dm_specific_am              -> Norm of the dark matter specific angular momentum.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:scale_factor                -> Scale factor.\n:redshift                    -> Redshift.\n:physical_time               -> Physical time since the Big Bang.\n:lookback_time               -> Physical time left to reach the last snapshot.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\n\nReturns\n\nA PlotParams object, with entries:\nrequest::Dict{Symbol,Vector{String}} -> Data request for readSnapshot.\nvar_name::AbstractString             -> Name of the quantity for the plot axis.\nexp_factor::Int                      -> Numerical exponent to scale down the axis.\nunit::Unitful.Units                  -> Target unit for the axis.\naxis_label::AbstractString           -> Label for the axis.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.pointData-Tuple{Makie.Axis}","page":"Auxiliary functions","title":"GalaxyInspector.pointData","text":"Extract all the data points in a Makie plot, axis, or figure. In the case of a figure, it will only take the data from the current axis object. It only works for scatter, line and scatterline plots.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.projectIntoCircularGrid-Tuple{Matrix{<:Number}, Int64}","page":"Auxiliary functions","title":"GalaxyInspector.projectIntoCircularGrid","text":"projectIntoCircularGrid(\n    image::Matrix{<:Number},\n    n_bins::Int;\n    <keyword arguments>\n)::Vector{<:Number}\n\nProject image into a circular grid, averaging the values in each concentric ring.\n\nArguments\n\nimage::Matrix{<:Number}: Original matrix. It has to be a square matrix.\nn_bins::Int: Number of bins for the circular grid.\ninscribed::Bool=true: If the circular grid will be inscribed in image when doing the projection. If set to false, the matrix will be inscribed into the circular grid instead.\ntotal::Bool=false: If the sum (total = true) or the mean (total = false) of the values in each of the old pixels that fall within each ring will be used.\n\nReturns\n\nA vector with the averages of the values in each concentric ring.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.rangeCut!-Tuple{Vector{<:Number}, Tuple{Number, Number}}","page":"Auxiliary functions","title":"GalaxyInspector.rangeCut!","text":"rangeCut!(\n    raw_values::Vector{<:Number},\n    range::Tuple{<:Number,<:Number};\n    <keyword arguments>\n)::Bool\n\nDelete every element in raw_values that is outside the given range.\n\nArguments\n\nraw_values::Vector{<:Number}: Dataset that will be pruned.\nrange::Tuple{<:Number,<:Number}: The range in question.\nkeep_edges::Bool=true: If the edges of the range will be kept.\nmin_left::Int=1: Minimum number of values that need to be left after pruning to proceed with the transformation.\n\nReturns\n\nIf a transformation was performed.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.rangeCut!-Tuple{Vector{<:Number}, Vector, Tuple{Number, Number}}","page":"Auxiliary functions","title":"GalaxyInspector.rangeCut!","text":"rangeCut!(\n    m_data::Vector{<:Number},\n    s_data::Vector,\n    range::Tuple{<:Number,<:Number};\n    <keyword arguments>\n)::Bool\n\nDelete every element in m_data that is outside the given range.\n\nEvery corresponding element in s_data (i.e. with the same index) will be deleted too.\n\nArguments\n\nm_data::Vector{<:Number}: Master dataset that will be pruned.\ns_data::Vector: Slave dataset that will be pruned according to which values of m_data are outside range.\nrange::Tuple{<:Number,<:Number}: The range in question.\nkeep_edges::Bool=true: If the edges of the range will be kept.\nmin_left::Int=1: Minimum number of values that need to be left in the master dataset after pruning to proceed with the transformation.\n\nReturns\n\nIf a transformation was performed.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.reduceResolution-Tuple{Matrix{<:Number}, Int64}","page":"Auxiliary functions","title":"GalaxyInspector.reduceResolution","text":"reduceResolution(\n    hr_matrix::Matrix{<:Number},\n    factor::Int;\n    <keyword arguments>\n)::Matrix{<:Number}\n\nReduce the number of rows and columns of hr_matrix by factor, averaging or adding up its values.\n\nArguments\n\nhr_matrix::Matrix{<:Number}: Original \"high resolution\" matrix. It has to be a square matrix.\nfactor::Int: Factor by which the number of rows and columns will be reduced. It has to divide the size of hr_matrix exactly.\ntotal::Bool=false: If the sum (total = true) or the mean (total = false) of the values in each of the old pixels will be used for the new pixels.\n\nReturns\n\nThe new smaller matrix, with the average values.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.reduceTicks-Tuple{Vector{<:Number}, Int64}","page":"Auxiliary functions","title":"GalaxyInspector.reduceTicks","text":"reduceTicks(hr_ticks::Vector{<:Number}, factor::Int)::Vector{<:Number}\n\nReduce the number of ticks in hr_ticks by factor keeping the total length of the axis the same and assuming hr_ticks are regularly spaced.\n\nArguments\n\nhr_ticks::Vector{<:Number}: Original \"high resolution\" list of ticks.\nfactor::Int: Factor by which the number of ticks will be reduced. It has to divide the size of hr_ticks exactly.\n\nReturns\n\nThe new shorter tick list.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.ring-Tuple{Vector, Integer}","page":"Auxiliary functions","title":"GalaxyInspector.ring","text":"ring(vec::Vector, index::Integer)::Vector\n\nMake the indexing operation vec[index] work using modular arithmetic for the indices.\n\nArguments\n\nvec::Vector: Vector.\nindex::Integer: Index.\n\nReturns\n\nvec[mod1(index, length(vec))]\n\nExamples\n\njulia> ring([1, 2, 3], 11)\n2\n\njulia> ring([1, 2, 3], 3)\n3\n\njulia> ring([1, 2, 3], -5)\n1\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.safeSelect-Tuple{Vector, Union{Colon, Integer, StepRange{<:Integer, <:Integer}, UnitRange{<:Integer}, Vector{<:Integer}}}","page":"Auxiliary functions","title":"GalaxyInspector.safeSelect","text":"safeSelect(vec::Vector, index::IndexType)\n\nMake the indexing operation vec[index] ignoring indices that are out of bounds.\n\nArguments\n\nvec::Vector: Vector.\nindex::IndexType: Indices. It can be an integer (a single element), a vector of integers (several elements), an UnitRange (e.g. 5:13), an StepRange (e.g. 5:2:13) or (:) (every element).\n\nReturns\n\nvec[index (minus out of bounds indices)]\n\nExamples\n\njulia> safeSelect([1, 2, 3], 11)\nInt[]\n\njulia> safeSelect([1, 2, 3], 1:5)\n3-element Vector{Int}:\n 1\n 2\n 3\n\njulia> safeSelect([1, 2, 3], 1:3:10)\n1\n\njulia> safeSelect([1, 2, 3], [1, 2, 5, 9])\n2-element Vector{Int}:\n 1\n 2\n\njulia> safeSelect([1, 2, 3], (:))\n3-element Vector{Int}:\n 1\n 2\n 3\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.sanitizeData!-Tuple{Vector{<:Number}, Vector{<:Number}}","page":"Auxiliary functions","title":"GalaxyInspector.sanitizeData!","text":"sanitizeData!(\n    x_data::Vector{<:Number},\n    y_data::Vector{<:Number};\n    <keyword arguments>\n)::NTuple{4,Bool}\n\nDo the following transformations over x_data and y_data, in order:\n\nTrim them to fit within the domain of the functions func_domain[1] and func_domain[2], respectively.\nTrim them to fit within range[1] and range[2], respectively.\nScale them down by a factor 10^exp_factor[1] and 10^exp_factor[2], respectively.\n\nBy default, no transformation is done.\n\nnote: Note\nThe datasets must have the same length, and any operation that deletes an element, will delete the corresponding element (i.e. with the same index) in the other dataset, so that the dataset will remain of equal length.\n\nArguments\n\nx_data::Vector{<:Number}: First dataset to be sanitized.\ny_data::Vector{<:Number}: Second dataset to be sanitized.\nfunc_domain::NTuple{2,Function}=(identity, identity): x_data will be trimmed to fit within the domain of the function func_domain[1], and y_data will be trimmed to fit within the domain of the function func_domain[2]. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nrange::Tuple{Tuple{<:Number,<:Number},Tuple{<:Number,<:Number}}=((-Inf, Inf), (-Inf, Inf)): Every element in x_data that falls outside of range[1] will be deleted, and every element in y_data that falls outside of range[2] will be deleted.\nkeep_edges::NTuple{2,Bool}=(true, true): If the edges of each corresponding range will be kept.\nmin_left::Int=1: Minimum number of values that need to be left in each dataset after any of the transformations to proceed with them.\nexp_factor::NTuple{2,Int}=(0, 0): Every element in x_data will be divided by 10^exp_factor[1], and every element in y_data will be divided by 10^exp_factor[2].\n\nReturns\n\nA tuple with four flags:\nIf x_data was successfully modified to fit within the domain of func_domain[1].\nIf y_data was successfully modified to fit within the domain of func_domain[2].\nIf x_data was successfully modified to fit within range[1].\nIf y_data was successfully modified to fit within range[2].\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.sanitizeData!-Tuple{Vector{<:Number}}","page":"Auxiliary functions","title":"GalaxyInspector.sanitizeData!","text":"sanitizeData!(\n    raw_values::Vector{<:Number};\n    <keyword arguments>\n)::NTuple{2,Bool}\n\nDo the following transformations over raw_values, in order:\n\nTrim it to fit within the domain of the function func_domain.\nTrim it to fit within range.\nScale it down by a factor of 10^exp_factor.\n\nBy default, no transformation is done.\n\nArguments\n\nraw_values::Vector{<:Number}: Dataset to be sanitized.\nfunc_domain::Function=identity: raw_values will be trimmed to fit within the domain of the function func_domain. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nrange::Tuple{<:Number,<:Number}=(-Inf, Inf): Every element in raw_values that falls outside of range will be deleted.\nkeep_edges::Bool=true: If the edges of range will be kept.\nmin_left::Int=1: Minimum number of values that need to be left after each transformation to proceed with it.\nexp_factor::Int=0: Every element in raw_values will be divided by 10^exp_factor.\n\nReturns\n\nA tuple with two flags:\nIf raw_values was mutated to fit within the domain of func_domain.\nIf raw_values was mutated to fit within range.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.scaledBins-Tuple{Vector{<:Number}, Int64}","page":"Auxiliary functions","title":"GalaxyInspector.scaledBins","text":"scaledBins(\n    values::Vector{<:Number},\n    n_bins::Int;\n    <keyword arguments>\n)::Vector{Float64}\n\nCompute a set of bin edges, to encompass a given list of values.\n\nArguments\n\nvalues::Vector{<:Number}: Values to be binned.\nn_bins::Int: Number of bins.\nscaling::Function=identity: Scaling function. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\nlimits::Tuple{<:Number,<:Number}=(-Inf, Inf): Set it to a value different than (-Inf, Inf) if you want to fix the limits of the bins.\n\nReturns\n\nA sorted list of bin edges.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.setLogging!-Tuple{Bool}","page":"Auxiliary functions","title":"GalaxyInspector.setLogging!","text":"setLogging!(verb::Bool; <keyword arguments>)::Nothing\n\nSet if logging messages will printed out. By default no logs are printed.\n\nArguments\n\nverb::Bool: If logs will be printed out using the default logger.\nstream::IO=stdout: Sets where to print the logs. It can be a file.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.setPositive-Tuple{VecOrMat{<:Number}}","page":"Auxiliary functions","title":"GalaxyInspector.setPositive","text":"Create a copy of list with every negative value set to 0.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.smoothWindow-Tuple{Vector{<:Number}, Vector{<:Number}, Int64}","page":"Auxiliary functions","title":"GalaxyInspector.smoothWindow","text":"smoothWindow(\n    x_data::Vector{<:Number},\n    y_data::Vector{<:Number},\n    n_bins::Int;\n    <keyword arguments>\n)::NTuple{2,Vector{<:Number}}\n\nSeparate the values of x_data in n_bins bins and compute the mean value of x_data and y_data within each one.\n\nArguments\n\nx_data::Vector{<:Number}: x-axis data.\ny_data::Vector{<:Number}: y-axis data.\nn_bins::Int: Number of bins.\nscaling::Function=identity: Scaling function for the x axis. The options are the scaling functions accepted by Makie: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity. All the values of x_data must be in the domain of scaling.\n\nReturns\n\nA tuple with two vectors, containing the smoothed-out x and y values.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.volume-Tuple{Number}","page":"Auxiliary functions","title":"GalaxyInspector.volume","text":"Volume of a sphere with radius r.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.xlimits!-Tuple{Makie.Axis}","page":"Auxiliary functions","title":"GalaxyInspector.xlimits!","text":"Extract the limits of the x axis, from a Makie plot, axis, or figure. In the case of a figure, it will take the limits from the current axis object.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.xscale-Tuple{Makie.Axis}","page":"Auxiliary functions","title":"GalaxyInspector.xscale","text":"Extract the scale function of the x axis, from a Makie plot, axis, or figure. In the case of a figure, it will take the scale from the current axis object.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.ylimits!-Tuple{Makie.Axis}","page":"Auxiliary functions","title":"GalaxyInspector.ylimits!","text":"Extract the limits of the y axis, from a Makie plot, axis, or figure. In the case of a figure, it will take the limits from the current axis object.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.yscale-Tuple{Makie.Axis}","page":"Auxiliary functions","title":"GalaxyInspector.yscale","text":"Extract the scale function of the y axis, from a Makie plot, axis, or figure. In the case of a figure, it will take the scale from the current axis object.\n\n\n\n\n\n","category":"method"},{"location":"api/auxiliary_functions/#GalaxyInspector.τ_star-Tuple{Any}","page":"Auxiliary functions","title":"GalaxyInspector.τ_star","text":"Time factor for the SF model, without the fraction factors.\n\nτstar(ρcell)    equiv tau_mathrmstar τrec(ρcell)     equiv tau_mathrmrec  f_i τcond(ρcell, Z) equiv tau_mathrmcond  (1 - f_s)\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/positions/#Computation-of-characteristic-positions","page":"Computation of characteristic positions","title":"Computation of characteristic positions","text":"","category":"section"},{"location":"api/analysis/compute_quantities/positions/","page":"Computation of characteristic positions","title":"Computation of characteristic positions","text":"These functions are used internally and none are exported. ","category":"page"},{"location":"api/analysis/compute_quantities/positions/","page":"Computation of characteristic positions","title":"Computation of characteristic positions","text":"These functions depend on the particulars of the simulation code (e.g. units).","category":"page"},{"location":"api/analysis/compute_quantities/positions/","page":"Computation of characteristic positions","title":"Computation of characteristic positions","text":"","category":"page"},{"location":"api/analysis/compute_quantities/positions/","page":"Computation of characteristic positions","title":"Computation of characteristic positions","text":"Modules = [GalaxyInspector]\nPages   = [\"analysis/compute_quantities/positions.jl\"]","category":"page"},{"location":"api/analysis/compute_quantities/positions/#GalaxyInspector.computeCenter-Tuple{Dict, Int64}","page":"Computation of characteristic positions","title":"GalaxyInspector.computeCenter","text":"computeCenter(data_dict::Dict, subhalo_abs_idx::Int)::Vector{<:Unitful.Length}\n\nRead the position of the potencial minimum of a given subhalo.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nsubhalo_abs_idx::Int: Absolute index of the target subhalo (subfind). Starts at 1.\n\nReturns\n\nThe specified potencial minimum.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/positions/#GalaxyInspector.computeCenter-Tuple{Dict, Symbol}","page":"Computation of characteristic positions","title":"GalaxyInspector.computeCenter","text":"computeCenter(data_dict::Dict, cm_type::Symbol)::Vector{<:Unitful.Length}\n\nCompute a characteristic center for the system.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ncm_type::Symbol: It can be:\n:global_cm   -> Center of mass of the whole system.\n:{component} -> Center of mass of the given component (e.g. :stars, :gas, :halo, etc). It can be any of the keys of PARTICLE_INDEX.\n:zero        -> Origin.\n\nReturns\n\nThe specified center of mass.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/positions/#GalaxyInspector.computeCenter-Tuple{Dict, Tuple{Int64, Int64}}","page":"Computation of characteristic positions","title":"GalaxyInspector.computeCenter","text":"computeCenter(data_dict::Dict, subfind_idx::NTuple{2,Int})::Vector{<:Unitful.Length}\n\nRead the position of the particle/cell at the potencial minimum of a given halo or subhalo.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nsubfind_idx::NTuple{2,Int}: Tuple with two elements:\nIndex of the target halo (FoF group). Starts at 1.\nIndex of the target subhalo (subfind), relative the target halo. Starts at 1. If it is set to 0, the potencial minimum of the halo with index halo_idx is returned.\n\nReturns\n\nThe position of the potencial minimum.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/positions/#GalaxyInspector.computeCenterOfMass-Tuple{Matrix{<:Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}, Vector{<:Union{Unitful.Quantity{T, 𝐌, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐌, U}} where {L, S}} where {T, U}}}","page":"Computation of characteristic positions","title":"GalaxyInspector.computeCenterOfMass","text":"computeCenterOfMass(\n    positions::Matrix{<:Unitful.Length},\n    mass::Vector{<:Unitful.Mass},\n)::Vector{<:Unitful.Length}\n\nCompute the center of mass of a group of cells/particles.\n\nArguments\n\npositions::Matrix{<:Unitful.Length}: Positions of the cells/particles. Each column is a cell/particle and each row a dimension.\nmasses::Vector{<:Unitful.Mass}: Masses of the cells/particles.\n\nReturns\n\nThe center of mass.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/positions/#GalaxyInspector.computeDistance-Tuple{Matrix{<:Number}}","page":"Computation of characteristic positions","title":"GalaxyInspector.computeDistance","text":"computeDistance(\n    positions::Matrix{<:Number};\n    <keyword arguments>\n)::Vector{<:Number}\n\nCompute the distance of a group of points to center.\n\nArguments\n\npositions::Matrix{<:Number}: Positions of the points. Each column is a point and each row a dimension.\ncenter::Union{Vector{<:Number},Nothing}=nothing: Origin used to compute the distances. If set to nothing, 0 is used.\n\nReturns\n\nThe distance of every point to center.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/positions/#GalaxyInspector.computeGlobalCenterOfMass-Tuple{Dict}","page":"Computation of characteristic positions","title":"GalaxyInspector.computeGlobalCenterOfMass","text":"computeGlobalCenterOfMass(data_dict::Dict)::Vector{<:Unitful.Length}\n\nCompute the center of mass of the whole system.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nThe center of mass.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/positions/#GalaxyInspector.findHaloSubhalo-Tuple{Dict, Vector{Int64}, Vector{Bool}}","page":"Computation of characteristic positions","title":"GalaxyInspector.findHaloSubhalo","text":"findHaloSubhalo(\n    data_dict::Dict,\n    star_idxs::Vector{Int},\n    real_stars_idxs::Vector{Bool},\n)::NTuple{2,Vector{Int}}\n\nFind in which halo and subhalo of data_dict each star in star_idxs was born.\n\nFor stars with no halo or subhalo, an index of -1 is given. The subhalo index is relative to the corresponding halo.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nstar_idxs::Vector{Int}: Indices of the target stars in data_dict.\nreal_stars_idxs::Vector{Bool}: Boolean list of stellar particles. True for a real star and false for a wind particle.\n\nReturns\n\nA tuple with two elements:\nA vector with the birth halo (index starting at 1) of each star (in the order of star_idxs).\nA vector with the birth subhalo (index starting at 1) of each star (in the order of star_idxs).\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/compute_quantities/positions/#GalaxyInspector.locateStellarBirthPlace-Tuple{Dict}","page":"Computation of characteristic positions","title":"GalaxyInspector.locateStellarBirthPlace","text":"locateStellarBirthPlace(data_dict::Dict)::NTuple{2,Vector{Int}}\n\nFind in which halo and subhalo each star in data_dict was born.\n\nFor stars with no halo or subhalo, an index of -1 is given. The subhalo index is relative to the corresponding halo.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nA tuple with two elements:\nA vector with the birth halo (index starting at 1) of each star (in the order of data_dict).\nA vector with the birth subhalo (index starting at 1) of each star (in the order of data_dict).\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#Data-analysis-functions","page":"Data analysis functions","title":"Data analysis functions","text":"","category":"section"},{"location":"api/analysis/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"These functions are used internally and none are exported. ","category":"page"},{"location":"api/analysis/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"These functions depend on the particulars of the simulation code (e.g. units).","category":"page"},{"location":"api/analysis/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"These functions read the data generated by the data acquisition functions, and produce the values that will be plotted.","category":"page"},{"location":"api/analysis/data_analysis/#Signature-for-the-[plotSnapshot](@ref)-function","page":"Data analysis functions","title":"Signature for the plotSnapshot function","text":"","category":"section"},{"location":"api/analysis/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"A data analysis functions for plotSnapshot must take a dictionary with the following shape:","category":"page"},{"location":"api/analysis/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":":sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...","category":"page"},{"location":"api/analysis/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"and return one or more vectors or matrices with the processed data. It should return nothing if the input data has some problem that prevents computation (e.g. is empty).","category":"page"},{"location":"api/analysis/data_analysis/#Expected-signature:","page":"Data analysis functions","title":"Expected signature:","text":"","category":"section"},{"location":"api/analysis/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"  da_function(data_dict, args...; kwargs...) -> (processed_data, ...)","category":"page"},{"location":"api/analysis/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"where:","category":"page"},{"location":"api/analysis/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"data_dict::Dict\nprocessed_data::Union{VecOrMat{<:Number},Nothing}","category":"page"},{"location":"api/analysis/data_analysis/#Signature-for-the-[plotTimeSeries](@ref)-function","page":"Data analysis functions","title":"Signature for the plotTimeSeries function","text":"","category":"section"},{"location":"api/analysis/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"A data analysis functions for plotTimeSeries must take a Simulation struct, and return two vectors. It should return nothing if the input data has some problem that prevents computation (e.g. is empty).","category":"page"},{"location":"api/analysis/data_analysis/#Expected-signature:-2","page":"Data analysis functions","title":"Expected signature:","text":"","category":"section"},{"location":"api/analysis/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"  da_function(sim_data, args...; kw_args...) -> (processed_data_x, processed_data_y)","category":"page"},{"location":"api/analysis/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"where:","category":"page"},{"location":"api/analysis/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"sim_data::Simulation, see Simulation\nprocessed_data_x::Vector{<:Number}\nprocessed_data_y::Vector{<:Number}","category":"page"},{"location":"api/analysis/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"","category":"page"},{"location":"api/analysis/data_analysis/","page":"Data analysis functions","title":"Data analysis functions","text":"Modules = [GalaxyInspector]\nPages   = [\"analysis/data_analysis.jl\"]","category":"page"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daBandProfile-Tuple{Dict, Symbol, GalaxyInspector.CircularGrid}","page":"Data analysis functions","title":"GalaxyInspector.daBandProfile","text":"daBandProfile(\n    data_dict::Dict,\n    quantity::Symbol,\n    grid::CircularGrid;\n    <keyword arguments>\n)::Union{\n    Tuple{Vector{<:Unitful.Length},Vector{<:Number},Vector{<:Number},Vector{<:Number}},\n    Tuple{Vector{<:Unitful.Length},Vector{<:Number},Vector{<:Number}},\n    Nothing,\n}\n\nCompute the profile of a mean quantity with error bars or bands.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nquantity::Symbol: Target quantity. The possibilities are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\ngrid::CircularGrid: Circular grid.\nflat::Bool=true: If the profile will be 2D, using rings, or 3D, using spherical shells.\nerror_bar::Bool=false: If the returned values will be compatible with errorbars! or with band! (default).\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with two elements:\nA vector with the position of each ring or spherical shells.\nA vector with the value quantity in each each ring or spherical shells.\nIt returns nothing if any of the necessary quantities are missing.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daCPUtxt-Tuple{GalaxyInspector.Simulation, String, Symbol, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daCPUtxt","text":"daCPUtxt(\n    sim_data::Simulation,\n    target::String,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::NTuple{2,Vector{<:Number}}\n\nCompute the evolution of a measured quantity in the cpu.txt file, for a given target process.\n\nArguments\n\nsim_data::Simulation: Information about the simulation in a Simulation object.\ntarget::String: Target process.\nx_quantity::Symbol: Quantity for the x axis. The options are:\n:time_step              -> Time step.\n:physical_time          -> Physical time since the Big Bang.\n:clock_time_s           -> Clock time duration of the time step in seconds.\n:clock_time_percent     -> Clock time duration of the time step as a percentage.\n:tot_clock_time_s       -> Total clock time in seconds.\n:tot_clock_time_percent -> Total clock time as a percentage.\ny_quantity::Symbol: Quantity for the y axis. The options are:\n:time_step              -> Time step.\n:physical_time          -> Physical time since the Big Bang.\n:clock_time_s           -> Clock time duration of the time step in seconds.\n:clock_time_percent     -> Clock time duration of the time step as a percentage.\n:tot_clock_time_s       -> Total clock time in seconds.\n:tot_clock_time_percent -> Total clock time as a percentage.\nsmooth::Int=0: The result will be smooth out using smooth bins. Set it to 0 if you want no smoothing.\n\nReturns\n\nA Tuple with two elements:\nA Vector with the time series of x_quantity.\nA Vector with the time series of y_quantity.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daClumpingFactor-Tuple{Dict, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daClumpingFactor","text":"daClumpingFactor(\n    data_dict::Dict,\n    quantity::Symbol;\n    <keyword arguments>\n)::Tuple{Vector{<:Unitful.Volume},Vector{Float64}}\n\nCompute the clumping factor (C_rho), for the number density of quantity, at different volume scales.\n\nC_rho = fraclangle n^2 ranglelangle n rangle^2  \n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nquantity::Symbol: The number density of which quantity will be used. The options are:\n:gas          -> Gas number density.\n:molecular    -> Molecular hydrogen number density.\n:br_molecular -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic       -> Atomic hydrogen number density.\n:ionized      -> Ionized hydrogen number density.\n:neutral      -> Neutral hydrogen number density.\nnn::Int=32: Number of neighbors.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with two elements:\nA vector with the volumes.\nA vector with the clumping factors.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daClumpingFactorProfile-Tuple{Dict, Symbol, GalaxyInspector.CircularGrid}","page":"Data analysis functions","title":"GalaxyInspector.daClumpingFactorProfile","text":"daClumpingFactorProfile(\n    data_dict::Dict,\n    quantity::Symbol,\n    grid::CircularGrid;\n    <keyword arguments>\n)::Tuple{Vector{<:Unitful.Length},Vector{Float64}}\n\nCompute a clumping factor (C_rho) profile, for the number density of quantity.\n\nC_rho = fraclangle n^2 ranglelangle n rangle^2  \n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nquantity::Symbol: The number density of which quantity will be used. The options are:\n:gas          -> Gas number density.\n:molecular    -> Molecular hydrogen number density.\n:br_molecular -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic       -> Atomic hydrogen number density.\n:ionized      -> Ionized hydrogen number density.\n:neutral      -> Neutral hydrogen number density.\ngrid::CircularGrid: Circular grid.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with two elements:\nA vector with the central position of each bin.\nA vector with the clumping factors.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daDensity2DProjection-Tuple{Dict, GalaxyInspector.CubicGrid, Symbol, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daDensity2DProjection","text":"daDensity2DProjection(\n    data_dict::Dict,\n    grid::CubicGrid,\n    quantity::Symbol,\n    field_type::Symbol;\n    <keyword arguments>\n)::Tuple{Vector{<:Unitful.Length},Vector{<:Unitful.Length},Union{Matrix{Float64},Vector{Float64}}}\n\nProject a 3D density field into a given plane.\n\nnote: Note\nIf the source of the field are particles, a simple 2D histogram is used. If they are Voronoi cells instead, the density of the cells that cross the line of sight of each pixel are added up.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::CubicGrid: Cubic grid.\nquantity::Symbol: Which density will be calculated. The options are:\n:stellar_mass      -> Stellar density.\n:gas_mass          -> Gas density.\n:hydrogen_mass     -> Hydrogen density.\n:dm_mass           -> Dark matter density.\n:bh_mass           -> Black hole density.\n:molecular_mass    -> Molecular hydrogen (mathrmH_2) density.\n:br_molecular_mass -> Molecular hydrogen (mathrmH_2) density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass       -> Atomic hydrogen (mathrmHI) density.\n:ionized_mass      -> Ionized hydrogen (mathrmHII) density.\n:neutral_mass      -> Neutral hydrogen (mathrmHI + H_2) density.\n:stellar_gas_mass  -> Stellar gas mass (according to out SF model).\nfield_type::Symbol: If the source of the field are :particles or Voronoi :cells.\nreduce_factor::Int=1: Factor by which the resolution of the result will be reduced. This will be applied after the density projection. If reduce_grid = :square, the new values will be computed averaging the values of neighboring pixels. reduce_factor has to divide the size of grid exactly. If reduce_grid = :circular, the new values will be computed averaging the values of the pixels the fall within each of the reduce_factor concentric rings.\nreduce_grid::Symbol=:square: Type of grid to reduce the resolution of the result. The options are:\n:square    -> The density distribution will be reduced into a regular square grid, with a resolution reduce_factor times lower than grid. This emulates the way the surface densities are measured in observations. reduce_factor = 1 means no reduction in resolution.\n:circular -> The density distribution will be reduced into a flat circular grid, formed by a series of reduce_factor concentric rings. This emulates the traditonal way the Kennicutt-Schmidt law is measured in simulations. reduce_factor = 1 means that the result will be a single point, the opposite of the reduce_grid = :square case.\nprojection_plane::Symbol=:xy: Projection plane. The options are :xy, :xz, and :yz. The disk is generally oriented to have its axis of rotation parallel to the z axis.\nm_unit::Unitful.Units=u\"Msun\": Mass unit.\nl_unit::Unitful.Units=u\"kpc\": Length unit.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with three elements:\nA vector with the x coordinates of the grid.\nA vector with the y coordinates of the grid.\nA matrix with the log_10 of the density at each point of the 2D grid.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daDiscAccretion-Tuple{GalaxyInspector.Simulation}","page":"Data analysis functions","title":"GalaxyInspector.daDiscAccretion","text":"daDiscAccretion(\n    sim_data::Simulation;\n    <keyword arguments>\n)::NTuple{2,Vector{<:Number}}\n\nCompute the evolution of the accreted mass into the disc.\n\nArguments\n\nsim_data::Simulation: Information about the simulation in a Simulation object.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted. The options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nmax_r::Unitful.Length=DISK_R: Radius of the cylinder.\nmax_z::Unitful.Length=5.0u\"kpc\": Half height of the cylinder.\nsmooth::Int=0: The time series will be smooth out using smooth bins. Set it to 0 if you want no smoothing.\n\nReturns\n\nA Tuple with two elements:\nA Vector with the physical times.\nA Vector with the accreted mass at each time.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daEvolution-Tuple{GalaxyInspector.Simulation, Symbol, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daEvolution","text":"daEvolution(\n    sim_data::Simulation,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::NTuple{2,Vector{<:Number}}\n\nCompute the time series of two quantities.\n\nArguments\n\nsim_data::Simulation: Information about the simulation in a Simulation object.\nx_quantity::Symbol: Quantity for the x axis. The options are:\n:stellar_mass              -> Stellar mass.\n:gas_mass                  -> Gas mass.\n:hydrogen_mass             -> Hydrogen mass.\n:dm_mass                   -> Dark matter mass.\n:bh_mass                   -> Black hole mass.\n:molecular_mass            -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass         -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass               -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass              -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass              -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass          -> Stellar gas mass (according to out SF model).\n:stellar_number            -> Number of stellar particles.\n:gas_number                -> Number of gas cells.\n:dm_number                 -> Number of dark matter particles.\n:bh_number                 -> Number of black hole particles.\n:molecular_fraction        -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction     -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction           -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction          -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction          -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction-> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction      -> Stellar gas fraction (according to out SF model).\n:stellar_area_density      -> Stellar area mass density, for a radius of DISK_R.\n:gas_area_density          -> Gas mass surface density, for a radius of DISK_R.\n:molecular_area_density    -> Molecular mass surface density, for a radius of DISK_R.\n:br_molecular_area_density -> Molecular mass surface density, for a radius of DISK_R, computed using the pressure relation in Blitz et al. (2006).\n:atomic_area_density       -> Atomic hydrogen area mass density, for a radius of DISK_R.\n:ionized_area_density      -> Ionized hydrogen area mass density, for a radius of DISK_R.\n:neutral_area_density      -> Neutral mass surface density, for a radius of DISK_R.\n:sfr_area_density          -> Star formation rate area density, for the last AGE_RESOLUTION and a radius of DISK_R.\n:gas_td                    -> The mean total gas depletion time.\n:molecular_td              -> The mean molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td           -> The mean molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                 -> The mean atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                -> The mean ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                -> The mean neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity           -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity       -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance           -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance       -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_specific_am       -> Norm of the stellar specific angular momentum.\n:gas_specific_am           -> Norm of the gas specific angular momentum.\n:dm_specific_am            -> Norm of the dark matter specific angular momentum.\n:sfr                       -> The star formation rate.\n:ssfr                      -> The specific star formation rate.\n:observational_sfr         -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr        -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff               -> The mean star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                   -> The mean star formation efficiency per free-fall time for the gas.\n:molecular_eff             -> The mean star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff          -> The mean star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                -> The mean star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff               -> The mean star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff               -> The mean star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:scale_factor              -> Scale factor.\n:redshift                  -> Redshift.\n:physical_time             -> Physical time since the Big Bang.\n:lookback_time             -> Physical time left to reach the last snapshot.\n:ode_gas_it                -> Integration time.\n:ode_gas_accu_it           -> Accumulated integration time.\n:ode_gas_tau_s             -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d             -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i             -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                 -> Mass recycling parameter, R.\n:ode_gas_cold_mf           -> Cold gas mass fraction.\n:ode_stellar_it            -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it       -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s         -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d         -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i         -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r             -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf       -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho       -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z         -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass      -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr       -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P         -> Gas pressure, for the gas that form the stars.\ny_quantity::Symbol: Quantity for the y axis. The options are:\n:stellar_mass              -> Stellar mass.\n:gas_mass                  -> Gas mass.\n:hydrogen_mass             -> Hydrogen mass.\n:dm_mass                   -> Dark matter mass.\n:bh_mass                   -> Black hole mass.\n:molecular_mass            -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass         -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass               -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass              -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass              -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass          -> Stellar gas mass (according to out SF model).\n:stellar_number            -> Number of stellar particles.\n:gas_number                -> Number of gas cells.\n:dm_number                 -> Number of dark matter particles.\n:bh_number                 -> Number of black hole particles.\n:molecular_fraction        -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction     -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction           -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction          -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction          -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction-> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction      -> Stellar gas fraction (according to out SF model).\n:stellar_area_density      -> Stellar area mass density, for a radius of DISK_R.\n:gas_area_density          -> Gas mass surface density, for a radius of DISK_R.\n:molecular_area_density    -> Molecular mass surface density, for a radius of DISK_R.\n:br_molecular_area_density -> Molecular mass surface density, for a radius of DISK_R, computed using the pressure relation in Blitz et al. (2006).\n:atomic_area_density       -> Atomic hydrogen area mass density, for a radius of DISK_R.\n:ionized_area_density      -> Ionized hydrogen area mass density, for a radius of DISK_R.\n:neutral_area_density      -> Neutral mass surface density, for a radius of DISK_R.\n:sfr_area_density          -> Star formation rate area density, for the last AGE_RESOLUTION and a radius of DISK_R.\n:gas_td                    -> The mean total gas depletion time.\n:molecular_td              -> The mean molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td           -> The mean molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                 -> The mean atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                -> The mean ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                -> The mean neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity           -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity       -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance           -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance       -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_specific_am       -> Norm of the stellar specific angular momentum.\n:gas_specific_am           -> Norm of the gas specific angular momentum.\n:dm_specific_am            -> Norm of the dark matter specific angular momentum.\n:sfr                       -> The star formation rate.\n:ssfr                      -> The specific star formation rate.\n:observational_sfr         -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr        -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff               -> The mean star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                   -> The mean star formation efficiency per free-fall time for the gas.\n:molecular_eff             -> The mean star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff          -> The mean star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                -> The mean star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff               -> The mean star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff               -> The mean star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:scale_factor              -> Scale factor.\n:redshift                  -> Redshift.\n:physical_time             -> Physical time since the Big Bang.\n:lookback_time             -> Physical time left to reach the last snapshot.\n:ode_gas_it                -> Integration time.\n:ode_gas_accu_it           -> Accumulated integration time.\n:ode_gas_tau_s             -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d             -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i             -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                 -> Mass recycling parameter, R.\n:ode_gas_cold_mf           -> Cold gas mass fraction.\n:ode_stellar_it            -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it       -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s         -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d         -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i         -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r             -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf       -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho       -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z         -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass      -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr       -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P         -> Gas pressure, for the gas that form the stars.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted, the options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nextra_filter::Function=filterNothing: Filter function that will be applied after the one given by filter_mode.\nsmooth::Int=0: The result of integrateQty will be smooth out using smooth bins. Set it to 0 if you want no smoothing.\ncumulative::Bool=false: If the y_quantity will be accumulated or not.\nfraction::Bool=false: If the y_quantity will be represented as a fraction of the last value. If cumulative = true, this will apply to the accumulated values.\nscaling::Function=identity: Function to scale the x-axis (only relevant if smooth != 0). The bins will be computed accordingly. The options are the scaling functions accepted by Makie.jl: log10, log2, log, sqrt, Makie.logit, Makie.Symlog10, Makie.pseudolog10, and identity.\n\nReturns\n\nA Tuple with two elements:\nA Vector with the time series of x_quantity.\nA Vector with the time series of y_quantity.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daGasFractions-Tuple{Dict, Symbol, Vector{<:Number}}","page":"Data analysis functions","title":"GalaxyInspector.daGasFractions","text":"daGasFractions(\n    data_dict::Dict,\n    quantity::Symbol,\n    edges::Vector{<:Number};\n    <keyword arguments>\n)::Union{NTuple{2,Vector{<:Number}},Nothing}\n\nCompute the values for a bar plot of the gas fractions, where the bins are a given gas quantity.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nquantity::Symbol: Target quantity for the bins. The possibilities are:\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\nedges::Vector{<:Number}: A sorted list of bin edges for quantity.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with two elements:\nA vector with the positions of each bar.\nA vector with the height of each bar.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daGasSFR2DProjection-Tuple{Dict, GalaxyInspector.CubicGrid, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daGasSFR2DProjection","text":"daGasSFR2DProjection(\n    data_dict::Dict,\n    grid::CubicGrid,\n    field_type::Symbol;\n    <keyword arguments>\n)::Tuple{Vector{<:Unitful.Length},Vector{<:Unitful.Length},Union{Matrix{Float64},Vector{Float64}}}\n\nProject the 3D gas SFR field into a given plane.\n\nnote: Note\nIf the source of the field are particles, a simple 2D histogram is used. If they are Voronoi cells instead, the SFR of the cells that cross the line of sight of each pixel are added up.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::CubicGrid: Cubic grid.\nfield_type::Symbol: If the source of the field are :particles or Voronoi :cells.\nreduce_factor::Int=1: Factor by which the resolution of the result will be reduced. This will be applied after the density projection. If reduce_grid = :square, the new values will be computed adding up the values of neighboring pixels. reduce_factor has to divide the size of grid exactly. If reduce_grid = :circular, the new values will be computed adding up the values of the pixels the fall within each of the reduce_factor concentric rings.\nreduce_grid::Symbol=:square: Type of grid to reduce the resolution of the result. The options are:\n:square    -> The density distribution will be reduced into a regular square grid, with a resolution reduce_factor times lower than grid. This emulates the way the surface densities are measured in observations. reduce_factor = 1 means no reduction in resolution.\n:circular -> The density distribution will be reduced into a flat circular grid, formed by a series of reduce_factor concentric rings. This emulates the traditonal way the Kennicutt-Schmidt law is measured in simulations. reduce_factor = 1 means that the result will be a single point, the opposite of the reduce_grid = :square case.\nprojection_plane::Symbol=:xy: Projection plane. The options are :xy, :xz, and :yz. The disk is generally oriented to have its axis of rotation parallel to the z axis.\nm_unit::Unitful.Units=u\"Msun\": Mass unit.\nl_unit::Unitful.Units=u\"kpc\": Length unit.\nt_unit::Unitful.Units=u\"yr\": Time unit.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with three elements:\nA vector with the x coordinates of the grid.\nA vector with the y coordinates of the grid.\nA matrix with the log_10 of the gas SFR at each point of the 2D grid.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daIntegrateGalaxy-Tuple{Dict, Symbol, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daIntegrateGalaxy","text":"daIntegrateGalaxy(\n    data_dict::Dict,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::NTuple{2,Vector{<:Number}}\n\nCompute two global quantities of the simulation.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nx_quantity::Symbol: Quantity for the x axis. The options are:\n:stellar_mass              -> Stellar mass.\n:gas_mass                  -> Gas mass.\n:hydrogen_mass             -> Hydrogen mass.\n:dm_mass                   -> Dark matter mass.\n:bh_mass                   -> Black hole mass.\n:molecular_mass            -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass         -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass               -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass              -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass              -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass          -> Stellar gas mass (according to out SF model).\n:stellar_number            -> Number of stellar particles.\n:gas_number                -> Number of gas cells.\n:dm_number                 -> Number of dark matter particles.\n:bh_number                 -> Number of black hole particles.\n:molecular_fraction        -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction     -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction           -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction          -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction          -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction-> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction      -> Stellar gas fraction (according to out SF model).\n:stellar_area_density      -> Stellar area mass density, for a radius of DISK_R.\n:gas_area_density          -> Gas mass surface density, for a radius of DISK_R.\n:molecular_area_density    -> Molecular mass surface density, for a radius of DISK_R.\n:br_molecular_area_density -> Molecular mass surface density, for a radius of DISK_R, computed using the pressure relation in Blitz et al. (2006).\n:atomic_area_density       -> Atomic hydrogen area mass density, for a radius of DISK_R.\n:ionized_area_density      -> Ionized hydrogen area mass density, for a radius of DISK_R.\n:neutral_area_density      -> Neutral mass surface density, for a radius of DISK_R.\n:sfr_area_density          -> Star formation rate area density, for the last AGE_RESOLUTION and a radius of DISK_R.\n:gas_td                    -> The mean total gas depletion time.\n:molecular_td              -> The mean molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td           -> The mean molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                 -> The mean atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                -> The mean ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                -> The mean neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity           -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity       -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance           -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance       -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_specific_am       -> Norm of the stellar specific angular momentum.\n:gas_specific_am           -> Norm of the gas specific angular momentum.\n:dm_specific_am            -> Norm of the dark matter specific angular momentum.\n:sfr                       -> The star formation rate.\n:ssfr                      -> The specific star formation rate.\n:observational_sfr         -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr        -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff               -> The mean star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                   -> The mean star formation efficiency per free-fall time for the gas.\n:molecular_eff             -> The mean star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff          -> The mean star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                -> The mean star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff               -> The mean star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff               -> The mean star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:scale_factor              -> Scale factor.\n:redshift                  -> Redshift.\n:physical_time             -> Physical time since the Big Bang.\n:lookback_time             -> Physical time left to reach the last snapshot.\n:ode_gas_it                -> Integration time.\n:ode_gas_accu_it           -> Accumulated integration time.\n:ode_gas_tau_s             -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d             -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i             -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                 -> Mass recycling parameter, R.\n:ode_gas_cold_mf           -> Cold gas mass fraction.\n:ode_stellar_it            -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it       -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s         -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d         -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i         -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r             -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf       -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho       -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z         -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass      -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr       -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\ny_quantity::Symbol: Quantity for the y axis. The options are:\n:stellar_mass              -> Stellar mass.\n:gas_mass                  -> Gas mass.\n:hydrogen_mass             -> Hydrogen mass.\n:dm_mass                   -> Dark matter mass.\n:bh_mass                   -> Black hole mass.\n:molecular_mass            -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass         -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass               -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass              -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass              -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass          -> Stellar gas mass (according to out SF model).\n:stellar_number            -> Number of stellar particles.\n:gas_number                -> Number of gas cells.\n:dm_number                 -> Number of dark matter particles.\n:bh_number                 -> Number of black hole particles.\n:molecular_fraction        -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction     -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction           -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction          -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction          -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction-> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction      -> Stellar gas fraction (according to out SF model).\n:stellar_area_density      -> Stellar area mass density, for a radius of DISK_R.\n:gas_area_density          -> Gas mass surface density, for a radius of DISK_R.\n:molecular_area_density    -> Molecular mass surface density, for a radius of DISK_R.\n:br_molecular_area_density -> Molecular mass surface density, for a radius of DISK_R, computed using the pressure relation in Blitz et al. (2006).\n:atomic_area_density       -> Atomic hydrogen area mass density, for a radius of DISK_R.\n:ionized_area_density      -> Ionized hydrogen area mass density, for a radius of DISK_R.\n:neutral_area_density      -> Neutral mass surface density, for a radius of DISK_R.\n:sfr_area_density          -> Star formation rate area density, for the last AGE_RESOLUTION and a radius of DISK_R.\n:gas_td                    -> The mean total gas depletion time.\n:molecular_td              -> The mean molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td           -> The mean molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                 -> The mean atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                -> The mean ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                -> The mean neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity           -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity       -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance           -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance       -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_specific_am       -> Norm of the stellar specific angular momentum.\n:gas_specific_am           -> Norm of the gas specific angular momentum.\n:dm_specific_am            -> Norm of the dark matter specific angular momentum.\n:sfr                       -> The star formation rate.\n:ssfr                      -> The specific star formation rate.\n:observational_sfr         -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr        -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff               -> The mean star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                   -> The mean star formation efficiency per free-fall time for the gas.\n:molecular_eff             -> The mean star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff          -> The mean star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                -> The mean star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff               -> The mean star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff               -> The mean star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:scale_factor              -> Scale factor.\n:redshift                  -> Redshift.\n:physical_time             -> Physical time since the Big Bang.\n:lookback_time             -> Physical time left to reach the last snapshot.\n:ode_gas_it                -> Integration time.\n:ode_gas_accu_it           -> Accumulated integration time.\n:ode_gas_tau_s             -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d             -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i             -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                 -> Mass recycling parameter, R.\n:ode_gas_cold_mf           -> Cold gas mass fraction.\n:ode_stellar_it            -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it       -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s         -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d         -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i         -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r             -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf       -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho       -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z         -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass      -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr       -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P         -> Gas pressure, for the gas that form the stars.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with two elements:\nA single element vector with the value of x_quantity.\nA single element vector with the value of y_quantity.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daKennicuttSchmidtLaw-Tuple{Dict, GalaxyInspector.CubicGrid, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daKennicuttSchmidtLaw","text":"daKennicuttSchmidtLaw(\n    data_dict::Dict,\n    grid::CubicGrid,\n    quantity::Symbol;\n    <keyword arguments>\n)::Union{NTuple{2,Vector{<:Float64}},Nothing}\n\nCompute the gas mass surface density and the SFR surface density, used in the Kennicutt-Schmidt law.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::CubicGrid: Cubic grid.\nquantity::Symbol=:molecular_mass: Quantity for the x axis. The options are:\n:gas_mass          -> Gas mass surface density. This one will be plotted with the results of Kennicutt (1998).\n:molecular_mass    -> Molecular mass surface density. This one will be plotted with the results of Bigiel et al. (2008).\n:br_molecular_mass -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006). This one will be plotted with the results of Bigiel et al. (2008).\n:neutral_mass      -> Neutral mass surface density. This one will be plotted with the results of Bigiel et al. (2008).\ntype::Symbol=:cells: If the gas surface density will be calculated assuming the gas is in :particles or in Voronoi :cells.\nreduce::Int=1: Factor by which the resolution of the result will be reduced. This will be applied after the density projection, averaging the value of neighboring pixels. It has to divide the size of grid exactly.\nstellar_ff::Function=filterNothing: Filter function for the stars. It has to be a function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\ngas_ff::Function=filterNothing: Filter function for the gas. It has to be a function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with two elements:\nA vector with log10(ΣH / M⊙ * kpc^-2).\nA vector with log10(Σsfr / M⊙ * yr^-1 * kpc^-2).\nIt returns nothing if any of the necessary quantities are missing.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\nR. C. Kennicutt (1998). The Global Schmidt Law in Star-forming Galaxies. The Astrophysical Journal, 498(2), 541-552. doi:10.1086/305588\n\nF. Bigiel et al. (2008). THE STAR FORMATION LAW IN NEARBY GALAXIES ON SUB-KPC SCALES. The Astrophysical Journal, 136(6), 2846. doi:10.1088/0004-6256/136/6/2846\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daLineHistogram-Tuple{Dict, Symbol, GalaxyInspector.LinearGrid, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daLineHistogram","text":"daLineHistogram(\n    data_dict::Dict,\n    quantity::Symbol,\n    grid::LinearGrid;\n    <keyword arguments>\n)::Union{Tuple{Vector{<:Number},Vector{<:Number}},Nothing}\n\nCompute a 1D histogram of a given quantity, normalized to the maximum number of counts.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nquantity::Symbol: The possibilities are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\ngrid::LinearGrid: Linear grid.\ntype::Symbol: Type of cell/particle.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\nnorm::Int=0: Number of count that will be use to normalize the histogram. If left as 0, the histogram will be normalize with the maximum bin count.\n\nReturns\n\nA tuple with two elements:\nA vector with the value corresponding to each bin.\nA vector with the counts, normalized to the maximum value.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daMetallicity2DProjection-Tuple{Dict, GalaxyInspector.CubicGrid, Symbol, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daMetallicity2DProjection","text":"daMetallicity2DProjection(\n    data_dict::Dict,\n    grid::CubicGrid,\n    component::Symbol,\n    field_type::Symbol;\n    <keyword arguments>\n)::Tuple{Vector{<:Unitful.Length},Vector{<:Unitful.Length},Union{Matrix{Float64},Vector{Float64}}}\n\nProject the 3D metallicity field to a given plane.\n\nnote: Note\nThe metallicity in each pixel is the total metal mass divided by the total gas mass, in the column given by that pixel. By default, the total metallicity (element = :all) is given in solar units.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::CubicGrid: Cubic grid.\ncomponent::Symbol: Target component. It can be either :stars or :gas.\nfield_type::Symbol: If the source of the field are :particles or Voronoi :cells.\nelement::Symbol=:all: Target element. The possibilities are the keys of ELEMENT_INDEX. Set it to :all if you want the total metallicity.\nreduce_factor::Int=1: Factor by which the resolution of the result will be reduced. This will be applied after the density projection. If reduce_grid = :square, the new values will be computed adding the values of mass in each neighboring pixel. reduce_factor has to divide the size of grid exactly. If reduce_grid = :circular, the new values will be computed adding up the values of mass of the pixels the fall within each of the reduce_factor concentric rings.\nreduce_grid::Symbol=:square: Type of grid to reduce the resolution of the result. The options are:\n:square    -> The density distribution will be reduced into a regular square grid, with a resolution reduce_factor times lower than grid. This emulates the way the surface densities are measured in observations. reduce_factor = 1 means no reduction in resolution.\n:circular -> The density distribution will be reduced into a flat circular grid, formed by a series of reduce_factor concentric rings. This emulates the traditonal way the Kennicutt-Schmidt law is measured in simulations. reduce_factor = 1 means that the result will be a single point, the opposite of the reduce_grid = :square case.\nprojection_plane::Symbol=:xy: Projection plane. The options are :xy, :xz, and :yz. The disk is generally oriented to have its axis of rotation parallel to the z axis.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with three elements:\nA vector with the x coordinates of the grid.\nA vector with the y coordinates of the grid.\nA matrix with the log_10 of the metallicity at each point of the 2D grid.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daMolla2015-Tuple{Dict, GalaxyInspector.CircularGrid, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daMolla2015","text":"daMolla2015(\n    data_dict::Dict,\n    grid::CircularGrid,\n    quantity::Symbol;\n    <keyword arguments>\n)::Union{\n    Tuple{\n        Vector{<:Unitful.Length},\n        <:Union{Vector{<:SurfaceDensity},Vector{<:MassFlowDensity},Vector{Float64}}\n    },\n    Nothing,\n}\n\nCompute a profile for the Milky Way, compatible with the experimental data in Mollá et al. (2015).\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::CircularGrid: Circular grid.\nquantity::Symbol: Quantity. The options are:\n:stellar_area_density      -> Stellar area mass density.\n:molecular_area_density    -> Molecular mass surface density.\n:br_molecular_area_density -> Molecular mass surface density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_area_density       -> Atomic hydrogen area mass density.\n:sfr_area_density          -> Star formation rate area density, for the last AGE_RESOLUTION.\n:O_stellar_abundance       -> Stellar abundance of oxygen, as 12 + log_10(mathrmO    H).\n:N_stellar_abundance       -> Stellar abundance of nitrogen, as 12 + log_10(mathrmN    H).\n:C_stellar_abundance       -> Stellar abundance of carbon, as 12 + log_10(mathrmC    H).\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with two elements:\nA vector with the position of each ring.\nA vector with the quantity area density of each ring.\nIt returns nothing if any of the necessary quantities are missing.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\nM. Mollá et al. (2015). Galactic chemical evolution: stellar yields and the initial mass function. Monthly Notices of the Royal Astronomical Society 451(4), 3693–3708. doi:10.1093/mnras/stv1102\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daProfile-Tuple{Dict, Symbol, GalaxyInspector.CircularGrid}","page":"Data analysis functions","title":"GalaxyInspector.daProfile","text":"daProfile(\n    data_dict::Dict,\n    quantity::Symbol,\n    grid::CircularGrid;\n    <keyword arguments>\n)::Union{Tuple{Vector{<:Unitful.Length},Vector{<:Number}},Nothing}\n\nCompute a profile.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nquantity::Symbol: Target quantity. The options are the same as for scatterQty:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\ngrid::CircularGrid: Circular grid.\nflat::Bool=true: If the profile will be 2D, using rings, or 3D, using spherical shells.\ntotal::Bool=true: If the sum (default) or the mean of quantity will be computed for each bin.\ncumulative::Bool=false: If the profile will be accumulated or not.\ndensity::Bool=false: If the profile will be of the density of quantity.\nfractions::Bool=false: If a profile of the gas mass fractions will be calculated. It is only valid with quantity equal to :neutralmass, :molecularmass, :brmolecularmass, :atomicmass or :ionizedmass, and it forces total = true, cumulative = false, and density = false.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with two elements:\nA vector with the position of each ring or spherical shells.\nA vector with the value quantity in each each ring or spherical shells.\nIt returns nothing if any of the necessary quantities are missing.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daRotationCurve-Tuple{Dict, Union{Unitful.Quantity{T, 𝐋, U}, Unitful.Level{L, S, Unitful.Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}","page":"Data analysis functions","title":"GalaxyInspector.daRotationCurve","text":"daRotationCurve(\n    data_dict::Dict,\n    R::Unitful.Length;\n    <keyword arguments>\n)::Tuple{Vector{<:Unitful.Length},Vector{<:Unitful.Velocity}}\n\nCompute a rotation curve.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nR::Unitful.Length: Maximum radius.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with two elements:\nA vector with the distances to each star.\nA vector with the circular velocity of each star.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daSFRtxt-Tuple{GalaxyInspector.Simulation, Symbol, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daSFRtxt","text":"daSFRtxt(\n    sim_data::Simulation,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::NTuple{2,Vector{<:Number}}\n\nCompute the stellar mass or SFR evolution using the data in the sfr.txt file.\n\nArguments\n\nsim_data::Simulation: Information about the simulation in a Simulation object.\nx_quantity::Symbol: Quantity for the x axis. The options are:\n:scale_factor  -> Scale factor.\n:redshift      -> Redshift.\n:physical_time -> Physical time since the Big Bang.\n:lookback_time -> Physical time left to reach the last snapshot.\ny_quantity::Symbol: Quantity for the y axis. The options are:\n:stellar_mass -> Stellar mass.\n:sfr          -> The star formation rate.\nsmooth::Int=0: The result will be smooth out using smooth bins. Set it to 0 if you want no smoothing.\n\nReturns\n\nA Tuple with two elements:\nA Vector with the time series of x_quantity.\nA Vector with the time series of y_quantity.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daScatterDensity-Tuple{Dict, Symbol, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daScatterDensity","text":"daScatterDensity(\n    data_dict::Dict,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::Tuple{Vector{<:Number},Vector{<:Number},Matrix{Float64}}\n\nTurn a scatter plot into a 2D histogram.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nx_quantity::Symbol: Quantity for the x axis. The options are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\ny_quantity::Symbol: Quantity for the y axis. The options are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\nx_range::Union{NTuple{2,<:Number},Nothing}=nothing: x axis range for the histogram grid. If set to nothing, the extrema of the values will be used.\ny_range::Union{NTuple{2,<:Number},Nothing}=nothing: y axis range for the histogram grid. If set to nothing, the extrema of the values will be used.\nx_log::Union{Unitful.Units,Nothing}=nothing: Desired unit of x_quantity, if you want to use log10(x_quantity) for the x axis.\ny_log::Union{Unitful.Units,Nothing}=nothing: Desired unit of y_quantity, if you want to use log10(y_quantity) for the y axis.\nn_bins::Int=100: Number of bins per side of the grid.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with three elements:\nA vector with the x coordinates of the grid.\nA vector with the y coordinates of the grid.\nA matrix with the counts.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daScatterGalaxy-Tuple{Dict, Symbol, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daScatterGalaxy","text":"daScatterGalaxy(\n    data_dict::Dict,\n    x_quantity::Symbol,\n    y_quantity::Symbol;\n    <keyword arguments>\n)::NTuple{2,Vector{<:Number}}\n\nCompute two quantities for every cell/particle in the simulation.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nx_quantity::Symbol: Quantity for the x axis. The options are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\ny_quantity::Symbol: Quantity for the y axis. The options are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\nx_log::Union{Unitful.Units,Nothing}=nothing: Desired unit of x_quantity, if you want to use log10(x_quantity) for the x axis.\ny_log::Union{Unitful.Units,Nothing}=nothing: Desired unit of y_quantity, if you want to use log10(y_quantity) for the y axis.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with two elements:\nA vector with the values of x_quantity.\nA vector with the values of y_quantity.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daScatterWeightedDensity-Tuple{Dict, Symbol, Symbol, Symbol, Unitful.Units}","page":"Data analysis functions","title":"GalaxyInspector.daScatterWeightedDensity","text":"daScatterWeightedDensity(\n    data_dict::Dict,\n    x_quantity::Symbol,\n    y_quantity::Symbol,\n    z_quantity::Symbol,\n    z_unit::Unitful.Units;\n    <keyword arguments>\n)::Tuple{Vector{<:Number},Vector{<:Number},Matrix{Float64}}\n\nTurn a scatter plot into a 2D histogram, weighted by z_quantity.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nx_quantity::Symbol: Quantity for the x axis. The options are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\ny_quantity::Symbol: Quantity for the y axis. The options are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\nz_quantity::Symbol: Quantity for the z axis (weights). The options are:\n:stellar_mass                -> Stellar mass.\n:gas_mass                    -> Gas mass.\n:hydrogen_mass               -> Hydrogen mass.\n:dm_mass                     -> Dark matter mass.\n:bh_mass                     -> Black hole mass.\n:molecular_mass              -> Molecular hydrogen (mathrmH_2) mass.\n:br_molecular_mass           -> Molecular hydrogen (mathrmH_2) mass, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass                 -> Atomic hydrogen (mathrmHI) mass.\n:ionized_mass                -> Ionized hydrogen (mathrmHII) mass.\n:neutral_mass                -> Neutral hydrogen (mathrmHI + H_2) mass.\n:stellar_gas_mass            -> Stellar gas mass (according to out SF model).\n:molecular_fraction          -> Gas mass fraction of molecular hydrogen.\n:br_molecular_fraction       -> Gas mass fraction of molecular hydrogen, computed using the pressure relation in Blitz et al. (2006).\n:atomic_fraction             -> Gas mass fraction of atomic hydrogen.\n:ionized_fraction            -> Gas mass fraction of ionized hydrogen.\n:neutral_fraction            -> Gas mass fraction of neutral hydrogen.\n:molecular_neutral_fraction  -> Fraction of molecular hydrogen in the neutral gas.\n:stellar_gas_fraction        -> Stellar gas fraction (according to out SF model).\n:mol_eq_quotient             -> Equilibrium quotient for the molecular fraction equation of the SF model.\n:ion_eq_quotient             -> Equilibrium quotient for the ionized fraction equation of the SF model.\n:gas_mass_density            -> Gas mass density.\n:hydrogen_mass_density       -> Hydrogen mass density.\n:gas_number_density          -> Gas number density.\n:molecular_number_density    -> Molecular hydrogen number density.\n:br_molecular_number_density -> Molecular hydrogen number density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_number_density       -> Atomic hydrogen number density.\n:ionized_number_density      -> Ionized hydrogen number density.\n:neutral_number_density      -> Neutral hydrogen number density.\n:gas_td                      -> Total gas depletion time.\n:molecular_td                -> Molecular hydrogen (mathrmH_2) depletion time.\n:br_molecular_td             -> Molecular hydrogen (mathrmH_2) depletion time, computed using the pressure relation in Blitz et al. (2006).\n:atomic_td                   -> Atomic hydrogen (mathrmHI) depletion time.\n:ionized_td                  -> Ionized hydrogen (mathrmHII) depletion time.\n:neutral_td                  -> Neutral hydrogen (mathrmHI + H_2) depletion time.\n:gas_metallicity             -> Mass fraction of all elements above He in the gas (solar units).\n:stellar_metallicity         -> Mass fraction of all elements above He in the stars (solar units).\n:X_gas_abundance             -> Gas abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:X_stellar_abundance         -> Stellar abundance of element mathrmX, as 12 + log_10(mathrmX    H). The possibilities are the keys of ELEMENT_INDEX.\n:stellar_radial_distance     -> Distance of every stellar particle to the origin.\n:gas_radial_distance         -> Distance of every gas cell to the origin.\n:dm_radial_distance          -> Distance of every dark matter particle to the origin.\n:stellar_xy_distance         -> Projected distance of every stellar particle to the origin.\n:gas_xy_distance             -> Projected distance of every gas cell to the origin.\n:dm_xy_distance              -> Projected distance of every dark matter particle to the origin.\n:gas_sfr                     -> SFR associated to each gas particle/cell within the code.\n:stellar_circularity         -> Stellar circularity.\n:stellar_vcirc               -> Stellar circular velocity.\n:stellar_vradial             -> Stellar radial speed.\n:stellar_vtangential         -> Stellar tangential speed.\n:stellar_vzstar              -> Stellar speed in the z direction, computed as v_z  mathrmsign(z).\n:stellar_age                 -> Stellar age.\n:sfr                         -> The star formation rate.\n:ssfr                        -> The specific star formation rate.\n:observational_sfr           -> The star formation rate of the last AGE_RESOLUTION.\n:observational_ssfr          -> The specific star formation rate of the last AGE_RESOLUTION.\n:stellar_eff                 -> The star formation efficiency per free-fall time for the gas that has turn into stars.\n:gas_eff                     -> The star formation efficiency per free-fall time for the gas.\n:molecular_eff               -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas.\n:br_molecular_eff            -> The star formation efficiency per free-fall time for the molecular hydrogen (mathrmH_2) gas, computed using the pressure relation in Blitz et al. (2006).\n:atomic_eff                  -> The star formation efficiency per free-fall time for the atomic hydrogen (mathrmHI) gas.\n:ionized_eff                 -> The star formation efficiency per free-fall time for the ionized hydrogen (mathrmHII) gas.\n:neutral_eff                 -> The star formation efficiency per free-fall time for the neutral hydrogen (mathrmHI + H_2) gas.\n:temperature                 -> Gas temperature, as log_10(T    mathrmK).\n:pressure                    -> Gas pressure.\n:ode_gas_it                  -> Integration time.\n:ode_gas_accu_it             -> Accumulated integration time.\n:ode_gas_tau_s               -> Star formation time scale, tau_mathrmS.\n:ode_gas_eta_d               -> Photodissociation efficiency, eta_mathrmdiss.\n:ode_gas_eta_i               -> Photoionization efficiency, ate_mathrmion.\n:ode_gas_r                   -> Mass recycling parameter, R.\n:ode_gas_cold_mf             -> Cold gas mass fraction.\n:ode_stellar_it              -> Integration time, for the gas that form the stars.\n:ode_stellar_accu_it         -> Accumulated integration time, for the gas that form the stars.\n:ode_stellar_tau_s           -> Star formation time scale, tau_mathrmS, for the gas that form the stars.\n:ode_stellar_eta_d           -> Photodissociation efficiency, eta_mathrmdiss, for the gas that form the stars.\n:ode_stellar_eta_i           -> Photoionization efficiency, ate_mathrmion, for the gas that form the stars.\n:ode_stellar_r               -> Mass recycling parameter, R, for the gas that form the stars.\n:ode_stellar_cold_mf         -> Cold gas mass fraction, for the gas that form the stars.\n:ode_stellar_gas_rho         -> Gas mass density, for the gas that form the stars.\n:ode_stellar_gas_Z           -> Gas metallicity, for the gas that form the stars.\n:ode_stellar_gas_mass        -> Cell mass, for the gas that form the stars.\n:ode_stellar_gas_sfr         -> SFR associated to the gas particles/cells within the code, for the gas that form the stars.\n:ode_stellar_gas_P           -> Gas pressure, for the gas that form the stars.\nz_unit::Unitful.Units: Target unit for the z axis.\nx_range::Union{NTuple{2,<:Number},Nothing}=nothing: x axis range for the histogram grid. If set to nothing, the extrema of the values will be used.\ny_range::Union{NTuple{2,<:Number},Nothing}=nothing: y axis range for the histogram grid. If set to nothing, the extrema of the values will be used.\nx_log::Union{Unitful.Units,Nothing}=nothing: Desired unit of x_quantity, if you want to use log10(x_quantity) for the x axis.\ny_log::Union{Unitful.Units,Nothing}=nothing: Desired unit of y_quantity, if you want to use log10(y_quantity) for the y axis.\ntotal::Bool=true: If the sum (default) or the mean of z_quantity will be used as the value of each pixel.\nn_bins::Int=100: Number of bins per side of the grid.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with three elements:\nA vector with the x coordinates of the grid.\nA vector with the y coordinates of the grid.\nA matrix with the counts.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daStellarBTHistogram-Tuple{Dict}","page":"Data analysis functions","title":"GalaxyInspector.daStellarBTHistogram","text":"daStellarBTHistogram(data_dict::Dict)::Union{Tuple{Vector{<:Unitful.Time}},Nothing}\n\nCompute the stellar birth times, for an histogram.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nA Tuple with one elements:\nA Vector with the birth times.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daStellarHistory-Tuple{Dict}","page":"Data analysis functions","title":"GalaxyInspector.daStellarHistory","text":"daStellarHistory(\n    data_dict::Dict;\n    <keyword arguments>\n)::Union{Tuple{Vector{<:Unitful.Time},Vector{<:Number}},Nothing}\n\nCompute the evolution of a given stellar quantity using the stellar ages at a given instant in time.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nquantity::Symbol=:sfr: Target quantity. The options are:\n:sfr                 -> The star formation rate.\n:ssfr                -> The specific star formation rate.\n:stellar_mass        -> Stellar mass.\n:stellar_metallicity -> Mass fraction of all elements above He in the stars (solar units).\nn_bins::Int=100: Number of bins (time intervals).\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with two elements:\nA vector with the physical times.\nA vector with the values of quantity at each time.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daStellarMetallictyHistogram-Tuple{Dict}","page":"Data analysis functions","title":"GalaxyInspector.daStellarMetallictyHistogram","text":"daStellarMetallictyHistogram(data_dict::Dict)::Union{Tuple{Vector{Float64}},Nothing}\n\nCompute the stellar metallicity (in SOLAR_METALLICITY units), for an histogram.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\n\nReturns\n\nA Tuple with one elements:\nA Vector with the stellar metallicites.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daTemperature2DProjection-Tuple{Dict, GalaxyInspector.CubicGrid, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daTemperature2DProjection","text":"daTemperature2DProjection(\n    data_dict::Dict,\n    grid::CubicGrid,\n    field_type::Symbol;\n    <keyword arguments>\n)::Tuple{Vector{<:Unitful.Length},Vector{<:Unitful.Length},Union{Matrix{Float64},Vector{Float64}}}\n\nProject the 3D temperature field to a given plane.\n\nnote: Note\nThe temperature in each pixel is the mean temperature of the column given by that pixel. By default, K is used as unit of temperature, so the output will be log_10(T  mathrmK).\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::CubicGrid: Cubic grid.\nfield_type::Symbol: If the source of the field are :particles or Voronoi :cells.\nreduce_factor::Int=1: Factor by which the resolution of the result will be reduced. This will be applied after the density projection. If reduce_grid = :square, the new values will be computed averaging the values of neighboring pixels. reduce_factor has to divide the size of grid exactly. If reduce_grid = :circular, the new values will be computed averaging the values of the pixels the fall within each of the reduce_factor concentric rings.\nreduce_grid::Symbol=:square: Type of grid to reduce the resolution of the result. The options are:\n:square    -> The density distribution will be reduced into a regular square grid, with a resolution reduce_factor times lower than grid. This emulates the way the surface densities are measured in observations. reduce_factor = 1 means no reduction in resolution.\n:circular -> The density distribution will be reduced into a flat circular grid, formed by a series of reduce_factor concentric rings. This emulates the traditonal way the Kennicutt-Schmidt law is measured in simulations. reduce_factor = 1 means that the result will be a single point, the opposite of the reduce_grid = :square case.\nprojection_plane::Symbol=:xy: Projection plane. The options are :xy, :xz, and :yz. The disk is generally oriented to have its axis of rotation parallel to the z axis.\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with three elements:\nA vector with the x coordinates of the grid.\nA vector with the y coordinates of the grid.\nA matrix with the values of temperature at each grid point.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daVSFLaw-Tuple{Dict, GalaxyInspector.CubicGrid, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daVSFLaw","text":"daVSFLaw(\n    data_dict::Dict,\n    grid::CubicGrid,\n    quantity::Symbol;\n    <keyword arguments>\n)::Union{NTuple{2,Vector{<:Float64}},Nothing}\n\nCompute the gas mass density and the SFR density, used in the volumetric star formation (VSF) law.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::CubicGrid: Cubic grid.\nquantity::Symbol: Quantity for the x axis. The options are:\n:gas_mass          -> Gas density.\n:hydrogen_mass     -> Hydrogen density.\n:molecular_mass    -> Molecular hydrogen (mathrmH_2) density.\n:br_molecular_mass -> Molecular hydrogen (mathrmH_2) density, computed using the pressure relation in Blitz et al. (2006).\n:atomic_mass       -> Atomic hydrogen (mathrmHI) density.\n:ionized_mass      -> Ionized hydrogen (mathrmHII) density.\n:neutral_mass      -> Neutral hydrogen (mathrmHI + H_2) density.\ntype::Symbol=:cells: If the gas surface density will be calculated assuming the gas is in :particles or in Voronoi :cells.\nstellar_ff::Function=filterNothing: Filter function for the stars. It has to be a function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\ngas_ff::Function=filterNothing: Filter function for the gas. It has to be a function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with two elements:\nA vector with log10(ρH / M⊙ * pc^-2).\nA vector with log10(ρsfr / M⊙ * yr^-1 * kpc^-2).\nIt returns nothing if any of the necessary quantities are missing.\n\nReferences\n\nL. Blitz et al. (2006). The Role of Pressure in GMC Formation II: The H2-Pressure Relation. The Astrophysical Journal, 650(2), 933. doi:10.1086/505417\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daVelocityField-Tuple{Dict, GalaxyInspector.SquareGrid, Symbol}","page":"Data analysis functions","title":"GalaxyInspector.daVelocityField","text":"daVelocityField(\n    data_dict::Dict,\n    grid::SquareGrid,\n    component::Symbol;\n    <keyword arguments>\n)::Tuple{Vector{<:Unitful.Length},Vector{<:Unitful.Length},Matrix{<:Number},Matrix{<:Number}}\n\nCompute a 2D mean velocity field.\n\nArguments\n\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\ngrid::SquareGrid: Square grid.\ncomponent::Symbol: For which cell/particle type the velocity field will be computed. The possibilities are the keys of PARTICLE_INDEX.\nprojection_plane::Symbol=:xy: Projection plane. The options are :xy, :xz, and :yz. The disk is generally oriented to have its axis of rotation parallel to the z axis.\nvelocity_units::Bool=false: If the velocity will be given as an Unitful.Quantity with units or as a Flot64 (in which case the underlying unit is mathrmkm  mathrms^-1).\nfilter_function::Function=filterNothing: A function with the signature:\nfilter_function(data_dict) -> indices\nwhere\ndata_dict::Dict: A dictionary with the following shape:\n:sim_data          -> ::Simulation (see Simulation).\n:snap_data         -> ::Snapshot (see Snapshot).\n:gc_data           -> ::GroupCatalog (see GroupCatalog).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\ncell/particle type -> (block -> data of block, block -> data of block, ...).\n...\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\ngroupcat type      -> (block -> data of block, block -> data of block, ...).\n...\nindices::Dict: A dictionary with the following shape:\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\ncell/particle type -> idxs::IndexType\n...\n\nReturns\n\nA tuple with four elements:\nA vector with the x coordinates of the grid.\nA vector with the y coordinates of the grid.\nA matrix with the mean velocity in the x direction at each grid point.\nA matrix with the mean velocity in the y direction at each grid point.\n\n\n\n\n\n","category":"method"},{"location":"api/analysis/data_analysis/#GalaxyInspector.daVirialAccretion-Tuple{GalaxyInspector.Simulation}","page":"Data analysis functions","title":"GalaxyInspector.daVirialAccretion","text":"daVirialAccretion(\n    sim_data::Simulation;\n    <keyword arguments>\n)::NTuple{2,Vector{<:Number}}\n\nCompute the evolution of the accreted mass into the virial radius.\n\nArguments\n\nsim_data::Simulation: Information about the simulation in a Simulation object.\nfilter_mode::Union{Symbol,Dict{Symbol,Any}}=:all: Which cells/particles will be plotted. Only valid if tracers = true. The options are:\n:all             -> Consider every cell/particle within the simulation box.\n:halo            -> Consider only the cells/particles that belong to the main halo.\n:subhalo         -> Consider only the cells/particles that belong to the main subhalo.\n:sphere          -> Consider only the cell/particle inside a sphere with radius DISK_R (see ./src/constants/globals.jl).\n:stellar_subhalo -> Consider only the cells/particles that belong to the main subhalo.\n:all_subhalo     -> Plot every cell/particle centered around the main subhalo.\nA dictionary with three entries:\n:filter_function -> The filter function.\n:translation     -> Translation for the simulation box. The posibilites are:\n:zero                       -> No translation is applied.\n:global_cm                  -> Selects the center of mass of the whole system as the new origin.\n:{component}                -> Sets the center of mass of the given component (e.g. :stars, :gas, :halo, etc) as the new origin. It can be any of the keys of PARTICLE_INDEX.\n(halo_idx, subhalo_rel_idx) -> Sets the position of the potencial minimum for the subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo) as the new origin.\n(halo_idx, 0)               -> Sets the center of mass of the halo_idx::Int halo as the new origin.\nsubhalo_abs_idx             -> Sets the center of mass of the subhalo_abs_idx::Int as the new origin.\n:rotation        -> Rotation for the simulation box. The posibilites are:\n:zero                       -> No rotation is applied.\n:global_am                  -> Sets the angular momentum of the whole system as the new z axis.\n:stellar_am                 -> Sets the stellar angular momentum as the new z axis.\n:stellar_pa                 -> Sets the stellar principal axis as the new coordinate system.\n:stellar_subhalo_pa         -> Sets the principal axis of the stars in the main subhalo as the new coordinate system.\n(halo_idx, subhalo_rel_idx) -> Sets the principal axis of the stars in subhalo_rel_idx::Int subhalo (of the halo_idx::Int halo), as the new coordinate system.\n(halo_idx, 0)               -> Sets the principal axis of the stars in the halo_idx::Int halo, as the new coordinate system.\nsubhalo_abs_idx             -> Sets the principal axis of the stars in the subhalo_abs_idx::Int subhalo as the new coordinate system.\nhalo_idx::Int=1: Index of the target halo (FoF group). Starts at 1.\ntracers::Bool=false: If tracers will be use to compute the mass accretion. If false, filter_mode will be ignored.\nsmooth::Int=0: The time series will be smooth out using smooth bins. Set it to 0 if you want no smoothing.\n\nReturns\n\nA Tuple with two elements:\nA Vector with the physical times.\nA Vector with the accreted mass at each time.\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"","category":"page"}]
}
